// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk/stream/index_v1/response.proto

#include "sdk/stream/index_v1/response.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace kaikosdk {
PROTOBUF_CONSTEXPR StreamIndexServiceResponsePercentage::StreamIndexServiceResponsePercentage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pairs_)*/{}
  , /*decltype(_impl_.percentage_)*/0
  , /*decltype(_impl_.price_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamIndexServiceResponsePercentageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamIndexServiceResponsePercentageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamIndexServiceResponsePercentageDefaultTypeInternal() {}
  union {
    StreamIndexServiceResponsePercentage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamIndexServiceResponsePercentageDefaultTypeInternal _StreamIndexServiceResponsePercentage_default_instance_;
PROTOBUF_CONSTEXPR StreamIndexServiceResponsePairs::StreamIndexServiceResponsePairs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instruments_)*/{}
  , /*decltype(_impl_.pair_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.weight_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamIndexServiceResponsePairsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamIndexServiceResponsePairsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamIndexServiceResponsePairsDefaultTypeInternal() {}
  union {
    StreamIndexServiceResponsePairs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamIndexServiceResponsePairsDefaultTypeInternal _StreamIndexServiceResponsePairs_default_instance_;
PROTOBUF_CONSTEXPR StreamIndexServiceResponseInstruments::StreamIndexServiceResponseInstruments(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partition_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.price_)*/0
  , /*decltype(_impl_.volume_)*/0
  , /*decltype(_impl_.count_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamIndexServiceResponseInstrumentsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamIndexServiceResponseInstrumentsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamIndexServiceResponseInstrumentsDefaultTypeInternal() {}
  union {
    StreamIndexServiceResponseInstruments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamIndexServiceResponseInstrumentsDefaultTypeInternal _StreamIndexServiceResponseInstruments_default_instance_;
PROTOBUF_CONSTEXPR StreamIndexServiceResponseBaseAsset::StreamIndexServiceResponseBaseAsset(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.asset_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.weight_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamIndexServiceResponseBaseAssetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamIndexServiceResponseBaseAssetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamIndexServiceResponseBaseAssetDefaultTypeInternal() {}
  union {
    StreamIndexServiceResponseBaseAsset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamIndexServiceResponseBaseAssetDefaultTypeInternal _StreamIndexServiceResponseBaseAsset_default_instance_;
PROTOBUF_CONSTEXPR StreamIndexServiceResponseV1::StreamIndexServiceResponseV1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bases_)*/{}
  , /*decltype(_impl_.exchanges_)*/{}
  , /*decltype(_impl_.percentages_)*/{}
  , /*decltype(_impl_.index_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.quote_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sequence_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.interval_)*/nullptr
  , /*decltype(_impl_.ts_event_)*/nullptr
  , /*decltype(_impl_.commodity_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamIndexServiceResponseV1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamIndexServiceResponseV1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamIndexServiceResponseV1DefaultTypeInternal() {}
  union {
    StreamIndexServiceResponseV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamIndexServiceResponseV1DefaultTypeInternal _StreamIndexServiceResponseV1_default_instance_;
}  // namespace kaikosdk
static ::_pb::Metadata file_level_metadata_sdk_2fstream_2findex_5fv1_2fresponse_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_sdk_2fstream_2findex_5fv1_2fresponse_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_sdk_2fstream_2findex_5fv1_2fresponse_2eproto = nullptr;

const uint32_t TableStruct_sdk_2fstream_2findex_5fv1_2fresponse_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponsePercentage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponsePercentage, _impl_.percentage_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponsePercentage, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponsePercentage, _impl_.pairs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponsePairs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponsePairs, _impl_.pair_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponsePairs, _impl_.weight_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponsePairs, _impl_.instruments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseInstruments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseInstruments, _impl_.partition_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseInstruments, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseInstruments, _impl_.volume_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseInstruments, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseBaseAsset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseBaseAsset, _impl_.asset_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseBaseAsset, _impl_.weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseV1, _impl_.index_code_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseV1, _impl_.commodity_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseV1, _impl_.interval_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseV1, _impl_.quote_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseV1, _impl_.bases_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseV1, _impl_.exchanges_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseV1, _impl_.percentages_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseV1, _impl_.ts_event_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseV1, _impl_.sequence_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::kaikosdk::StreamIndexServiceResponsePercentage)},
  { 9, -1, -1, sizeof(::kaikosdk::StreamIndexServiceResponsePairs)},
  { 18, -1, -1, sizeof(::kaikosdk::StreamIndexServiceResponseInstruments)},
  { 28, -1, -1, sizeof(::kaikosdk::StreamIndexServiceResponseBaseAsset)},
  { 36, -1, -1, sizeof(::kaikosdk::StreamIndexServiceResponseV1)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::kaikosdk::_StreamIndexServiceResponsePercentage_default_instance_._instance,
  &::kaikosdk::_StreamIndexServiceResponsePairs_default_instance_._instance,
  &::kaikosdk::_StreamIndexServiceResponseInstruments_default_instance_._instance,
  &::kaikosdk::_StreamIndexServiceResponseBaseAsset_default_instance_._instance,
  &::kaikosdk::_StreamIndexServiceResponseV1_default_instance_._instance,
};

const char descriptor_table_protodef_sdk_2fstream_2findex_5fv1_2fresponse_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"sdk/stream/index_v1/response.proto\022\010ka"
  "ikosdk\032\037google/protobuf/timestamp.proto\032"
  "\034sdk/core/data_interval.proto\032#sdk/strea"
  "m/index_v1/commodity.proto\"\203\001\n$StreamInd"
  "exServiceResponsePercentage\022\022\n\npercentag"
  "e\030\001 \001(\001\022\r\n\005price\030\002 \001(\001\0228\n\005pairs\030\003 \003(\0132)."
  "kaikosdk.StreamIndexServiceResponsePairs"
  "\"\205\001\n\037StreamIndexServiceResponsePairs\022\014\n\004"
  "pair\030\001 \001(\t\022\016\n\006weight\030\002 \001(\001\022D\n\013instrument"
  "s\030\003 \003(\0132/.kaikosdk.StreamIndexServiceRes"
  "ponseInstruments\"h\n%StreamIndexServiceRe"
  "sponseInstruments\022\021\n\tpartition\030\001 \001(\t\022\r\n\005"
  "price\030\002 \001(\001\022\016\n\006volume\030\003 \001(\001\022\r\n\005count\030\004 \001"
  "(\004\"D\n#StreamIndexServiceResponseBaseAsse"
  "t\022\r\n\005asset\030\001 \001(\t\022\016\n\006weight\030\002 \001(\001\"\367\002\n\034Str"
  "eamIndexServiceResponseV1\022\022\n\nindex_code\030"
  "\001 \001(\t\0221\n\tcommodity\030\002 \001(\0162\036.kaikosdk.Stre"
  "amIndexCommodity\022(\n\010interval\030\003 \001(\0132\026.kai"
  "kosdk.DataInterval\022\r\n\005quote\030\004 \001(\t\022<\n\005bas"
  "es\030\005 \003(\0132-.kaikosdk.StreamIndexServiceRe"
  "sponseBaseAsset\022\021\n\texchanges\030\006 \003(\t\022C\n\013pe"
  "rcentages\030\007 \003(\0132..kaikosdk.StreamIndexSe"
  "rviceResponsePercentage\022,\n\010ts_event\030\010 \001("
  "\0132\032.google.protobuf.Timestamp\022\023\n\013sequenc"
  "e_id\030\t \001(\tBw\n\035com.kaiko.sdk.stream.index"
  "_v1P\001Z:github.com/kaikodata/kaiko-go-sdk"
  "/stream/index_v1;index_v1\252\002\027KaikoSdk.Str"
  "eam.IndexV1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_sdk_2fcore_2fdata_5finterval_2eproto,
  &::descriptor_table_sdk_2fstream_2findex_5fv1_2fcommodity_2eproto,
};
static ::_pbi::once_flag descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto = {
    false, false, 1099, descriptor_table_protodef_sdk_2fstream_2findex_5fv1_2fresponse_2eproto,
    "sdk/stream/index_v1/response.proto",
    &descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto_once, descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto_deps, 3, 5,
    schemas, file_default_instances, TableStruct_sdk_2fstream_2findex_5fv1_2fresponse_2eproto::offsets,
    file_level_metadata_sdk_2fstream_2findex_5fv1_2fresponse_2eproto, file_level_enum_descriptors_sdk_2fstream_2findex_5fv1_2fresponse_2eproto,
    file_level_service_descriptors_sdk_2fstream_2findex_5fv1_2fresponse_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto_getter() {
  return &descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sdk_2fstream_2findex_5fv1_2fresponse_2eproto(&descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto);
namespace kaikosdk {

// ===================================================================

class StreamIndexServiceResponsePercentage::_Internal {
 public:
};

StreamIndexServiceResponsePercentage::StreamIndexServiceResponsePercentage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaikosdk.StreamIndexServiceResponsePercentage)
}
StreamIndexServiceResponsePercentage::StreamIndexServiceResponsePercentage(const StreamIndexServiceResponsePercentage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamIndexServiceResponsePercentage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pairs_){from._impl_.pairs_}
    , decltype(_impl_.percentage_){}
    , decltype(_impl_.price_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.percentage_, &from._impl_.percentage_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.price_) -
    reinterpret_cast<char*>(&_impl_.percentage_)) + sizeof(_impl_.price_));
  // @@protoc_insertion_point(copy_constructor:kaikosdk.StreamIndexServiceResponsePercentage)
}

inline void StreamIndexServiceResponsePercentage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pairs_){arena}
    , decltype(_impl_.percentage_){0}
    , decltype(_impl_.price_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StreamIndexServiceResponsePercentage::~StreamIndexServiceResponsePercentage() {
  // @@protoc_insertion_point(destructor:kaikosdk.StreamIndexServiceResponsePercentage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamIndexServiceResponsePercentage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pairs_.~RepeatedPtrField();
}

void StreamIndexServiceResponsePercentage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamIndexServiceResponsePercentage::Clear() {
// @@protoc_insertion_point(message_clear_start:kaikosdk.StreamIndexServiceResponsePercentage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pairs_.Clear();
  ::memset(&_impl_.percentage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.price_) -
      reinterpret_cast<char*>(&_impl_.percentage_)) + sizeof(_impl_.price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamIndexServiceResponsePercentage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double percentage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .kaikosdk.StreamIndexServiceResponsePairs pairs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pairs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamIndexServiceResponsePercentage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaikosdk.StreamIndexServiceResponsePercentage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double percentage = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_percentage = this->_internal_percentage();
  uint64_t raw_percentage;
  memcpy(&raw_percentage, &tmp_percentage, sizeof(tmp_percentage));
  if (raw_percentage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_percentage(), target);
  }

  // double price = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = this->_internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_price(), target);
  }

  // repeated .kaikosdk.StreamIndexServiceResponsePairs pairs = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pairs_size()); i < n; i++) {
    const auto& repfield = this->_internal_pairs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaikosdk.StreamIndexServiceResponsePercentage)
  return target;
}

size_t StreamIndexServiceResponsePercentage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaikosdk.StreamIndexServiceResponsePercentage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kaikosdk.StreamIndexServiceResponsePairs pairs = 3;
  total_size += 1UL * this->_internal_pairs_size();
  for (const auto& msg : this->_impl_.pairs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // double percentage = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_percentage = this->_internal_percentage();
  uint64_t raw_percentage;
  memcpy(&raw_percentage, &tmp_percentage, sizeof(tmp_percentage));
  if (raw_percentage != 0) {
    total_size += 1 + 8;
  }

  // double price = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = this->_internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamIndexServiceResponsePercentage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamIndexServiceResponsePercentage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamIndexServiceResponsePercentage::GetClassData() const { return &_class_data_; }


void StreamIndexServiceResponsePercentage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamIndexServiceResponsePercentage*>(&to_msg);
  auto& from = static_cast<const StreamIndexServiceResponsePercentage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaikosdk.StreamIndexServiceResponsePercentage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pairs_.MergeFrom(from._impl_.pairs_);
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_percentage = from._internal_percentage();
  uint64_t raw_percentage;
  memcpy(&raw_percentage, &tmp_percentage, sizeof(tmp_percentage));
  if (raw_percentage != 0) {
    _this->_internal_set_percentage(from._internal_percentage());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = from._internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamIndexServiceResponsePercentage::CopyFrom(const StreamIndexServiceResponsePercentage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaikosdk.StreamIndexServiceResponsePercentage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamIndexServiceResponsePercentage::IsInitialized() const {
  return true;
}

void StreamIndexServiceResponsePercentage::InternalSwap(StreamIndexServiceResponsePercentage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pairs_.InternalSwap(&other->_impl_.pairs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamIndexServiceResponsePercentage, _impl_.price_)
      + sizeof(StreamIndexServiceResponsePercentage::_impl_.price_)
      - PROTOBUF_FIELD_OFFSET(StreamIndexServiceResponsePercentage, _impl_.percentage_)>(
          reinterpret_cast<char*>(&_impl_.percentage_),
          reinterpret_cast<char*>(&other->_impl_.percentage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamIndexServiceResponsePercentage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto_getter, &descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto_once,
      file_level_metadata_sdk_2fstream_2findex_5fv1_2fresponse_2eproto[0]);
}

// ===================================================================

class StreamIndexServiceResponsePairs::_Internal {
 public:
};

StreamIndexServiceResponsePairs::StreamIndexServiceResponsePairs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaikosdk.StreamIndexServiceResponsePairs)
}
StreamIndexServiceResponsePairs::StreamIndexServiceResponsePairs(const StreamIndexServiceResponsePairs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamIndexServiceResponsePairs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){from._impl_.instruments_}
    , decltype(_impl_.pair_){}
    , decltype(_impl_.weight_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pair_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pair_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pair().empty()) {
    _this->_impl_.pair_.Set(from._internal_pair(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.weight_ = from._impl_.weight_;
  // @@protoc_insertion_point(copy_constructor:kaikosdk.StreamIndexServiceResponsePairs)
}

inline void StreamIndexServiceResponsePairs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instruments_){arena}
    , decltype(_impl_.pair_){}
    , decltype(_impl_.weight_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pair_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pair_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamIndexServiceResponsePairs::~StreamIndexServiceResponsePairs() {
  // @@protoc_insertion_point(destructor:kaikosdk.StreamIndexServiceResponsePairs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamIndexServiceResponsePairs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instruments_.~RepeatedPtrField();
  _impl_.pair_.Destroy();
}

void StreamIndexServiceResponsePairs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamIndexServiceResponsePairs::Clear() {
// @@protoc_insertion_point(message_clear_start:kaikosdk.StreamIndexServiceResponsePairs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _impl_.pair_.ClearToEmpty();
  _impl_.weight_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamIndexServiceResponsePairs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pair();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamIndexServiceResponsePairs.pair"));
        } else
          goto handle_unusual;
        continue;
      // double weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .kaikosdk.StreamIndexServiceResponseInstruments instruments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instruments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamIndexServiceResponsePairs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaikosdk.StreamIndexServiceResponsePairs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string pair = 1;
  if (!this->_internal_pair().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pair().data(), static_cast<int>(this->_internal_pair().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamIndexServiceResponsePairs.pair");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pair(), target);
  }

  // double weight = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_weight(), target);
  }

  // repeated .kaikosdk.StreamIndexServiceResponseInstruments instruments = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_instruments_size()); i < n; i++) {
    const auto& repfield = this->_internal_instruments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaikosdk.StreamIndexServiceResponsePairs)
  return target;
}

size_t StreamIndexServiceResponsePairs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaikosdk.StreamIndexServiceResponsePairs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kaikosdk.StreamIndexServiceResponseInstruments instruments = 3;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->_impl_.instruments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string pair = 1;
  if (!this->_internal_pair().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pair());
  }

  // double weight = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamIndexServiceResponsePairs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamIndexServiceResponsePairs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamIndexServiceResponsePairs::GetClassData() const { return &_class_data_; }


void StreamIndexServiceResponsePairs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamIndexServiceResponsePairs*>(&to_msg);
  auto& from = static_cast<const StreamIndexServiceResponsePairs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaikosdk.StreamIndexServiceResponsePairs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.instruments_.MergeFrom(from._impl_.instruments_);
  if (!from._internal_pair().empty()) {
    _this->_internal_set_pair(from._internal_pair());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = from._internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    _this->_internal_set_weight(from._internal_weight());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamIndexServiceResponsePairs::CopyFrom(const StreamIndexServiceResponsePairs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaikosdk.StreamIndexServiceResponsePairs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamIndexServiceResponsePairs::IsInitialized() const {
  return true;
}

void StreamIndexServiceResponsePairs::InternalSwap(StreamIndexServiceResponsePairs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pair_, lhs_arena,
      &other->_impl_.pair_, rhs_arena
  );
  swap(_impl_.weight_, other->_impl_.weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamIndexServiceResponsePairs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto_getter, &descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto_once,
      file_level_metadata_sdk_2fstream_2findex_5fv1_2fresponse_2eproto[1]);
}

// ===================================================================

class StreamIndexServiceResponseInstruments::_Internal {
 public:
};

StreamIndexServiceResponseInstruments::StreamIndexServiceResponseInstruments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaikosdk.StreamIndexServiceResponseInstruments)
}
StreamIndexServiceResponseInstruments::StreamIndexServiceResponseInstruments(const StreamIndexServiceResponseInstruments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamIndexServiceResponseInstruments* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partition_){}
    , decltype(_impl_.price_){}
    , decltype(_impl_.volume_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.partition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_partition().empty()) {
    _this->_impl_.partition_.Set(from._internal_partition(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.price_, &from._impl_.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.price_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:kaikosdk.StreamIndexServiceResponseInstruments)
}

inline void StreamIndexServiceResponseInstruments::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partition_){}
    , decltype(_impl_.price_){0}
    , decltype(_impl_.volume_){0}
    , decltype(_impl_.count_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.partition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partition_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamIndexServiceResponseInstruments::~StreamIndexServiceResponseInstruments() {
  // @@protoc_insertion_point(destructor:kaikosdk.StreamIndexServiceResponseInstruments)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamIndexServiceResponseInstruments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partition_.Destroy();
}

void StreamIndexServiceResponseInstruments::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamIndexServiceResponseInstruments::Clear() {
// @@protoc_insertion_point(message_clear_start:kaikosdk.StreamIndexServiceResponseInstruments)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partition_.ClearToEmpty();
  ::memset(&_impl_.price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.price_)) + sizeof(_impl_.count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamIndexServiceResponseInstruments::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string partition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_partition();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamIndexServiceResponseInstruments.partition"));
        } else
          goto handle_unusual;
        continue;
      // double price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double volume = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamIndexServiceResponseInstruments::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaikosdk.StreamIndexServiceResponseInstruments)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string partition = 1;
  if (!this->_internal_partition().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partition().data(), static_cast<int>(this->_internal_partition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamIndexServiceResponseInstruments.partition");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_partition(), target);
  }

  // double price = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = this->_internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_price(), target);
  }

  // double volume = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_volume = this->_internal_volume();
  uint64_t raw_volume;
  memcpy(&raw_volume, &tmp_volume, sizeof(tmp_volume));
  if (raw_volume != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_volume(), target);
  }

  // uint64 count = 4;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaikosdk.StreamIndexServiceResponseInstruments)
  return target;
}

size_t StreamIndexServiceResponseInstruments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaikosdk.StreamIndexServiceResponseInstruments)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partition = 1;
  if (!this->_internal_partition().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partition());
  }

  // double price = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = this->_internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    total_size += 1 + 8;
  }

  // double volume = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_volume = this->_internal_volume();
  uint64_t raw_volume;
  memcpy(&raw_volume, &tmp_volume, sizeof(tmp_volume));
  if (raw_volume != 0) {
    total_size += 1 + 8;
  }

  // uint64 count = 4;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamIndexServiceResponseInstruments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamIndexServiceResponseInstruments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamIndexServiceResponseInstruments::GetClassData() const { return &_class_data_; }


void StreamIndexServiceResponseInstruments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamIndexServiceResponseInstruments*>(&to_msg);
  auto& from = static_cast<const StreamIndexServiceResponseInstruments&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaikosdk.StreamIndexServiceResponseInstruments)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_partition().empty()) {
    _this->_internal_set_partition(from._internal_partition());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = from._internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_volume = from._internal_volume();
  uint64_t raw_volume;
  memcpy(&raw_volume, &tmp_volume, sizeof(tmp_volume));
  if (raw_volume != 0) {
    _this->_internal_set_volume(from._internal_volume());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamIndexServiceResponseInstruments::CopyFrom(const StreamIndexServiceResponseInstruments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaikosdk.StreamIndexServiceResponseInstruments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamIndexServiceResponseInstruments::IsInitialized() const {
  return true;
}

void StreamIndexServiceResponseInstruments::InternalSwap(StreamIndexServiceResponseInstruments* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.partition_, lhs_arena,
      &other->_impl_.partition_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamIndexServiceResponseInstruments, _impl_.count_)
      + sizeof(StreamIndexServiceResponseInstruments::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(StreamIndexServiceResponseInstruments, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamIndexServiceResponseInstruments::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto_getter, &descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto_once,
      file_level_metadata_sdk_2fstream_2findex_5fv1_2fresponse_2eproto[2]);
}

// ===================================================================

class StreamIndexServiceResponseBaseAsset::_Internal {
 public:
};

StreamIndexServiceResponseBaseAsset::StreamIndexServiceResponseBaseAsset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaikosdk.StreamIndexServiceResponseBaseAsset)
}
StreamIndexServiceResponseBaseAsset::StreamIndexServiceResponseBaseAsset(const StreamIndexServiceResponseBaseAsset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamIndexServiceResponseBaseAsset* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.asset_){}
    , decltype(_impl_.weight_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.asset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_asset().empty()) {
    _this->_impl_.asset_.Set(from._internal_asset(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.weight_ = from._impl_.weight_;
  // @@protoc_insertion_point(copy_constructor:kaikosdk.StreamIndexServiceResponseBaseAsset)
}

inline void StreamIndexServiceResponseBaseAsset::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.asset_){}
    , decltype(_impl_.weight_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.asset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamIndexServiceResponseBaseAsset::~StreamIndexServiceResponseBaseAsset() {
  // @@protoc_insertion_point(destructor:kaikosdk.StreamIndexServiceResponseBaseAsset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamIndexServiceResponseBaseAsset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.asset_.Destroy();
}

void StreamIndexServiceResponseBaseAsset::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamIndexServiceResponseBaseAsset::Clear() {
// @@protoc_insertion_point(message_clear_start:kaikosdk.StreamIndexServiceResponseBaseAsset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.asset_.ClearToEmpty();
  _impl_.weight_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamIndexServiceResponseBaseAsset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string asset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_asset();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamIndexServiceResponseBaseAsset.asset"));
        } else
          goto handle_unusual;
        continue;
      // double weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamIndexServiceResponseBaseAsset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaikosdk.StreamIndexServiceResponseBaseAsset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string asset = 1;
  if (!this->_internal_asset().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset().data(), static_cast<int>(this->_internal_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamIndexServiceResponseBaseAsset.asset");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_asset(), target);
  }

  // double weight = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaikosdk.StreamIndexServiceResponseBaseAsset)
  return target;
}

size_t StreamIndexServiceResponseBaseAsset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaikosdk.StreamIndexServiceResponseBaseAsset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asset = 1;
  if (!this->_internal_asset().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset());
  }

  // double weight = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamIndexServiceResponseBaseAsset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamIndexServiceResponseBaseAsset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamIndexServiceResponseBaseAsset::GetClassData() const { return &_class_data_; }


void StreamIndexServiceResponseBaseAsset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamIndexServiceResponseBaseAsset*>(&to_msg);
  auto& from = static_cast<const StreamIndexServiceResponseBaseAsset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaikosdk.StreamIndexServiceResponseBaseAsset)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_asset().empty()) {
    _this->_internal_set_asset(from._internal_asset());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = from._internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    _this->_internal_set_weight(from._internal_weight());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamIndexServiceResponseBaseAsset::CopyFrom(const StreamIndexServiceResponseBaseAsset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaikosdk.StreamIndexServiceResponseBaseAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamIndexServiceResponseBaseAsset::IsInitialized() const {
  return true;
}

void StreamIndexServiceResponseBaseAsset::InternalSwap(StreamIndexServiceResponseBaseAsset* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.asset_, lhs_arena,
      &other->_impl_.asset_, rhs_arena
  );
  swap(_impl_.weight_, other->_impl_.weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamIndexServiceResponseBaseAsset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto_getter, &descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto_once,
      file_level_metadata_sdk_2fstream_2findex_5fv1_2fresponse_2eproto[3]);
}

// ===================================================================

class StreamIndexServiceResponseV1::_Internal {
 public:
  static const ::kaikosdk::DataInterval& interval(const StreamIndexServiceResponseV1* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts_event(const StreamIndexServiceResponseV1* msg);
};

const ::kaikosdk::DataInterval&
StreamIndexServiceResponseV1::_Internal::interval(const StreamIndexServiceResponseV1* msg) {
  return *msg->_impl_.interval_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
StreamIndexServiceResponseV1::_Internal::ts_event(const StreamIndexServiceResponseV1* msg) {
  return *msg->_impl_.ts_event_;
}
void StreamIndexServiceResponseV1::clear_interval() {
  if (GetArenaForAllocation() == nullptr && _impl_.interval_ != nullptr) {
    delete _impl_.interval_;
  }
  _impl_.interval_ = nullptr;
}
void StreamIndexServiceResponseV1::clear_ts_event() {
  if (GetArenaForAllocation() == nullptr && _impl_.ts_event_ != nullptr) {
    delete _impl_.ts_event_;
  }
  _impl_.ts_event_ = nullptr;
}
StreamIndexServiceResponseV1::StreamIndexServiceResponseV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaikosdk.StreamIndexServiceResponseV1)
}
StreamIndexServiceResponseV1::StreamIndexServiceResponseV1(const StreamIndexServiceResponseV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamIndexServiceResponseV1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bases_){from._impl_.bases_}
    , decltype(_impl_.exchanges_){from._impl_.exchanges_}
    , decltype(_impl_.percentages_){from._impl_.percentages_}
    , decltype(_impl_.index_code_){}
    , decltype(_impl_.quote_){}
    , decltype(_impl_.sequence_id_){}
    , decltype(_impl_.interval_){nullptr}
    , decltype(_impl_.ts_event_){nullptr}
    , decltype(_impl_.commodity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.index_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_code().empty()) {
    _this->_impl_.index_code_.Set(from._internal_index_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.quote_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote().empty()) {
    _this->_impl_.quote_.Set(from._internal_quote(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sequence_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sequence_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sequence_id().empty()) {
    _this->_impl_.sequence_id_.Set(from._internal_sequence_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_interval()) {
    _this->_impl_.interval_ = new ::kaikosdk::DataInterval(*from._impl_.interval_);
  }
  if (from._internal_has_ts_event()) {
    _this->_impl_.ts_event_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.ts_event_);
  }
  _this->_impl_.commodity_ = from._impl_.commodity_;
  // @@protoc_insertion_point(copy_constructor:kaikosdk.StreamIndexServiceResponseV1)
}

inline void StreamIndexServiceResponseV1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bases_){arena}
    , decltype(_impl_.exchanges_){arena}
    , decltype(_impl_.percentages_){arena}
    , decltype(_impl_.index_code_){}
    , decltype(_impl_.quote_){}
    , decltype(_impl_.sequence_id_){}
    , decltype(_impl_.interval_){nullptr}
    , decltype(_impl_.ts_event_){nullptr}
    , decltype(_impl_.commodity_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.index_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.quote_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sequence_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sequence_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamIndexServiceResponseV1::~StreamIndexServiceResponseV1() {
  // @@protoc_insertion_point(destructor:kaikosdk.StreamIndexServiceResponseV1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamIndexServiceResponseV1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bases_.~RepeatedPtrField();
  _impl_.exchanges_.~RepeatedPtrField();
  _impl_.percentages_.~RepeatedPtrField();
  _impl_.index_code_.Destroy();
  _impl_.quote_.Destroy();
  _impl_.sequence_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.interval_;
  if (this != internal_default_instance()) delete _impl_.ts_event_;
}

void StreamIndexServiceResponseV1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamIndexServiceResponseV1::Clear() {
// @@protoc_insertion_point(message_clear_start:kaikosdk.StreamIndexServiceResponseV1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bases_.Clear();
  _impl_.exchanges_.Clear();
  _impl_.percentages_.Clear();
  _impl_.index_code_.ClearToEmpty();
  _impl_.quote_.ClearToEmpty();
  _impl_.sequence_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.interval_ != nullptr) {
    delete _impl_.interval_;
  }
  _impl_.interval_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ts_event_ != nullptr) {
    delete _impl_.ts_event_;
  }
  _impl_.ts_event_ = nullptr;
  _impl_.commodity_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamIndexServiceResponseV1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string index_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_index_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamIndexServiceResponseV1.index_code"));
        } else
          goto handle_unusual;
        continue;
      // .kaikosdk.StreamIndexCommodity commodity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_commodity(static_cast<::kaikosdk::StreamIndexCommodity>(val));
        } else
          goto handle_unusual;
        continue;
      // .kaikosdk.DataInterval interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string quote = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_quote();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamIndexServiceResponseV1.quote"));
        } else
          goto handle_unusual;
        continue;
      // repeated .kaikosdk.StreamIndexServiceResponseBaseAsset bases = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string exchanges = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_exchanges();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamIndexServiceResponseV1.exchanges"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .kaikosdk.StreamIndexServiceResponsePercentage percentages = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_percentages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp ts_event = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ts_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sequence_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_sequence_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamIndexServiceResponseV1.sequence_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamIndexServiceResponseV1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaikosdk.StreamIndexServiceResponseV1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string index_code = 1;
  if (!this->_internal_index_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_code().data(), static_cast<int>(this->_internal_index_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamIndexServiceResponseV1.index_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_index_code(), target);
  }

  // .kaikosdk.StreamIndexCommodity commodity = 2;
  if (this->_internal_commodity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_commodity(), target);
  }

  // .kaikosdk.DataInterval interval = 3;
  if (this->_internal_has_interval()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::interval(this),
        _Internal::interval(this).GetCachedSize(), target, stream);
  }

  // string quote = 4;
  if (!this->_internal_quote().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quote().data(), static_cast<int>(this->_internal_quote().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamIndexServiceResponseV1.quote");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_quote(), target);
  }

  // repeated .kaikosdk.StreamIndexServiceResponseBaseAsset bases = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bases_size()); i < n; i++) {
    const auto& repfield = this->_internal_bases(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string exchanges = 6;
  for (int i = 0, n = this->_internal_exchanges_size(); i < n; i++) {
    const auto& s = this->_internal_exchanges(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamIndexServiceResponseV1.exchanges");
    target = stream->WriteString(6, s, target);
  }

  // repeated .kaikosdk.StreamIndexServiceResponsePercentage percentages = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_percentages_size()); i < n; i++) {
    const auto& repfield = this->_internal_percentages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp ts_event = 8;
  if (this->_internal_has_ts_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::ts_event(this),
        _Internal::ts_event(this).GetCachedSize(), target, stream);
  }

  // string sequence_id = 9;
  if (!this->_internal_sequence_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequence_id().data(), static_cast<int>(this->_internal_sequence_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamIndexServiceResponseV1.sequence_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_sequence_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaikosdk.StreamIndexServiceResponseV1)
  return target;
}

size_t StreamIndexServiceResponseV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaikosdk.StreamIndexServiceResponseV1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kaikosdk.StreamIndexServiceResponseBaseAsset bases = 5;
  total_size += 1UL * this->_internal_bases_size();
  for (const auto& msg : this->_impl_.bases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string exchanges = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.exchanges_.size());
  for (int i = 0, n = _impl_.exchanges_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.exchanges_.Get(i));
  }

  // repeated .kaikosdk.StreamIndexServiceResponsePercentage percentages = 7;
  total_size += 1UL * this->_internal_percentages_size();
  for (const auto& msg : this->_impl_.percentages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string index_code = 1;
  if (!this->_internal_index_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_code());
  }

  // string quote = 4;
  if (!this->_internal_quote().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quote());
  }

  // string sequence_id = 9;
  if (!this->_internal_sequence_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequence_id());
  }

  // .kaikosdk.DataInterval interval = 3;
  if (this->_internal_has_interval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.interval_);
  }

  // .google.protobuf.Timestamp ts_event = 8;
  if (this->_internal_has_ts_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ts_event_);
  }

  // .kaikosdk.StreamIndexCommodity commodity = 2;
  if (this->_internal_commodity() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_commodity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamIndexServiceResponseV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamIndexServiceResponseV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamIndexServiceResponseV1::GetClassData() const { return &_class_data_; }


void StreamIndexServiceResponseV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamIndexServiceResponseV1*>(&to_msg);
  auto& from = static_cast<const StreamIndexServiceResponseV1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaikosdk.StreamIndexServiceResponseV1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bases_.MergeFrom(from._impl_.bases_);
  _this->_impl_.exchanges_.MergeFrom(from._impl_.exchanges_);
  _this->_impl_.percentages_.MergeFrom(from._impl_.percentages_);
  if (!from._internal_index_code().empty()) {
    _this->_internal_set_index_code(from._internal_index_code());
  }
  if (!from._internal_quote().empty()) {
    _this->_internal_set_quote(from._internal_quote());
  }
  if (!from._internal_sequence_id().empty()) {
    _this->_internal_set_sequence_id(from._internal_sequence_id());
  }
  if (from._internal_has_interval()) {
    _this->_internal_mutable_interval()->::kaikosdk::DataInterval::MergeFrom(
        from._internal_interval());
  }
  if (from._internal_has_ts_event()) {
    _this->_internal_mutable_ts_event()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_ts_event());
  }
  if (from._internal_commodity() != 0) {
    _this->_internal_set_commodity(from._internal_commodity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamIndexServiceResponseV1::CopyFrom(const StreamIndexServiceResponseV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaikosdk.StreamIndexServiceResponseV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamIndexServiceResponseV1::IsInitialized() const {
  return true;
}

void StreamIndexServiceResponseV1::InternalSwap(StreamIndexServiceResponseV1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bases_.InternalSwap(&other->_impl_.bases_);
  _impl_.exchanges_.InternalSwap(&other->_impl_.exchanges_);
  _impl_.percentages_.InternalSwap(&other->_impl_.percentages_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.index_code_, lhs_arena,
      &other->_impl_.index_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.quote_, lhs_arena,
      &other->_impl_.quote_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sequence_id_, lhs_arena,
      &other->_impl_.sequence_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamIndexServiceResponseV1, _impl_.commodity_)
      + sizeof(StreamIndexServiceResponseV1::_impl_.commodity_)
      - PROTOBUF_FIELD_OFFSET(StreamIndexServiceResponseV1, _impl_.interval_)>(
          reinterpret_cast<char*>(&_impl_.interval_),
          reinterpret_cast<char*>(&other->_impl_.interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamIndexServiceResponseV1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto_getter, &descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto_once,
      file_level_metadata_sdk_2fstream_2findex_5fv1_2fresponse_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace kaikosdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kaikosdk::StreamIndexServiceResponsePercentage*
Arena::CreateMaybeMessage< ::kaikosdk::StreamIndexServiceResponsePercentage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaikosdk::StreamIndexServiceResponsePercentage >(arena);
}
template<> PROTOBUF_NOINLINE ::kaikosdk::StreamIndexServiceResponsePairs*
Arena::CreateMaybeMessage< ::kaikosdk::StreamIndexServiceResponsePairs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaikosdk::StreamIndexServiceResponsePairs >(arena);
}
template<> PROTOBUF_NOINLINE ::kaikosdk::StreamIndexServiceResponseInstruments*
Arena::CreateMaybeMessage< ::kaikosdk::StreamIndexServiceResponseInstruments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaikosdk::StreamIndexServiceResponseInstruments >(arena);
}
template<> PROTOBUF_NOINLINE ::kaikosdk::StreamIndexServiceResponseBaseAsset*
Arena::CreateMaybeMessage< ::kaikosdk::StreamIndexServiceResponseBaseAsset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaikosdk::StreamIndexServiceResponseBaseAsset >(arena);
}
template<> PROTOBUF_NOINLINE ::kaikosdk::StreamIndexServiceResponseV1*
Arena::CreateMaybeMessage< ::kaikosdk::StreamIndexServiceResponseV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaikosdk::StreamIndexServiceResponseV1 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
