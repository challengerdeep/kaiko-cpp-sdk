// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk/stream/index_v1/response.proto

#include "sdk/stream/index_v1/response.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace kaikosdk {
constexpr StreamIndexServiceResponsePercentage::StreamIndexServiceResponsePercentage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pairs_()
  , percentage_(0)
  , price_(0){}
struct StreamIndexServiceResponsePercentageDefaultTypeInternal {
  constexpr StreamIndexServiceResponsePercentageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamIndexServiceResponsePercentageDefaultTypeInternal() {}
  union {
    StreamIndexServiceResponsePercentage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamIndexServiceResponsePercentageDefaultTypeInternal _StreamIndexServiceResponsePercentage_default_instance_;
constexpr StreamIndexServiceResponsePairs::StreamIndexServiceResponsePairs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : instruments_()
  , pair_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , weight_(0){}
struct StreamIndexServiceResponsePairsDefaultTypeInternal {
  constexpr StreamIndexServiceResponsePairsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamIndexServiceResponsePairsDefaultTypeInternal() {}
  union {
    StreamIndexServiceResponsePairs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamIndexServiceResponsePairsDefaultTypeInternal _StreamIndexServiceResponsePairs_default_instance_;
constexpr StreamIndexServiceResponseInstruments::StreamIndexServiceResponseInstruments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : exchange_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , price_(0)
  , volume_(0){}
struct StreamIndexServiceResponseInstrumentsDefaultTypeInternal {
  constexpr StreamIndexServiceResponseInstrumentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamIndexServiceResponseInstrumentsDefaultTypeInternal() {}
  union {
    StreamIndexServiceResponseInstruments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamIndexServiceResponseInstrumentsDefaultTypeInternal _StreamIndexServiceResponseInstruments_default_instance_;
constexpr StreamIndexServiceResponseBaseAsset::StreamIndexServiceResponseBaseAsset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : asset_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , weight_(0){}
struct StreamIndexServiceResponseBaseAssetDefaultTypeInternal {
  constexpr StreamIndexServiceResponseBaseAssetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamIndexServiceResponseBaseAssetDefaultTypeInternal() {}
  union {
    StreamIndexServiceResponseBaseAsset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamIndexServiceResponseBaseAssetDefaultTypeInternal _StreamIndexServiceResponseBaseAsset_default_instance_;
constexpr StreamIndexServiceResponseV1::StreamIndexServiceResponseV1(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bases_()
  , exchanges_()
  , percentages_()
  , index_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , quote_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , interval_(nullptr)
  , ts_event_(nullptr){}
struct StreamIndexServiceResponseV1DefaultTypeInternal {
  constexpr StreamIndexServiceResponseV1DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamIndexServiceResponseV1DefaultTypeInternal() {}
  union {
    StreamIndexServiceResponseV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamIndexServiceResponseV1DefaultTypeInternal _StreamIndexServiceResponseV1_default_instance_;
}  // namespace kaikosdk
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sdk_2fstream_2findex_5fv1_2fresponse_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sdk_2fstream_2findex_5fv1_2fresponse_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sdk_2fstream_2findex_5fv1_2fresponse_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sdk_2fstream_2findex_5fv1_2fresponse_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponsePercentage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponsePercentage, percentage_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponsePercentage, price_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponsePercentage, pairs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponsePairs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponsePairs, pair_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponsePairs, weight_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponsePairs, instruments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseInstruments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseInstruments, exchange_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseInstruments, price_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseInstruments, volume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseBaseAsset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseBaseAsset, asset_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseBaseAsset, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseV1, index_code_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseV1, event_type_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseV1, interval_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseV1, quote_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseV1, bases_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseV1, exchanges_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseV1, percentages_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexServiceResponseV1, ts_event_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::kaikosdk::StreamIndexServiceResponsePercentage)},
  { 8, -1, sizeof(::kaikosdk::StreamIndexServiceResponsePairs)},
  { 16, -1, sizeof(::kaikosdk::StreamIndexServiceResponseInstruments)},
  { 24, -1, sizeof(::kaikosdk::StreamIndexServiceResponseBaseAsset)},
  { 31, -1, sizeof(::kaikosdk::StreamIndexServiceResponseV1)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaikosdk::_StreamIndexServiceResponsePercentage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaikosdk::_StreamIndexServiceResponsePairs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaikosdk::_StreamIndexServiceResponseInstruments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaikosdk::_StreamIndexServiceResponseBaseAsset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaikosdk::_StreamIndexServiceResponseV1_default_instance_),
};

const char descriptor_table_protodef_sdk_2fstream_2findex_5fv1_2fresponse_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"sdk/stream/index_v1/response.proto\022\010ka"
  "ikosdk\032\037google/protobuf/timestamp.proto\032"
  "\034sdk/core/data_interval.proto\"\203\001\n$Stream"
  "IndexServiceResponsePercentage\022\022\n\npercen"
  "tage\030\001 \001(\001\022\r\n\005price\030\002 \001(\001\0228\n\005pairs\030\003 \003(\013"
  "2).kaikosdk.StreamIndexServiceResponsePa"
  "irs\"\205\001\n\037StreamIndexServiceResponsePairs\022"
  "\014\n\004pair\030\001 \001(\t\022\016\n\006weight\030\002 \001(\001\022D\n\013instrum"
  "ents\030\003 \003(\0132/.kaikosdk.StreamIndexService"
  "ResponseInstruments\"X\n%StreamIndexServic"
  "eResponseInstruments\022\020\n\010exchange\030\001 \001(\t\022\r"
  "\n\005price\030\002 \001(\001\022\016\n\006volume\030\003 \001(\001\"D\n#StreamI"
  "ndexServiceResponseBaseAsset\022\r\n\005asset\030\001 "
  "\001(\t\022\016\n\006weight\030\002 \001(\001\"\303\002\n\034StreamIndexServi"
  "ceResponseV1\022\022\n\nindex_code\030\001 \001(\t\022\022\n\neven"
  "t_type\030\002 \001(\t\022(\n\010interval\030\003 \001(\0132\026.kaikosd"
  "k.DataInterval\022\r\n\005quote\030\004 \001(\t\022<\n\005bases\030\005"
  " \003(\0132-.kaikosdk.StreamIndexServiceRespon"
  "seBaseAsset\022\021\n\texchanges\030\006 \003(\t\022C\n\013percen"
  "tages\030\007 \003(\0132..kaikosdk.StreamIndexServic"
  "eResponsePercentage\022,\n\010ts_event\030\010 \001(\0132\032."
  "google.protobuf.TimestampB|\n\035com.kaiko.s"
  "dk.stream.index_v1P\001Z\?github.com/challen"
  "gerdeep/kaiko-go-sdk/stream/index_v1;ind"
  "ex_v1\252\002\027KaikoSdk.Stream.IndexV1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_sdk_2fcore_2fdata_5finterval_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto = {
  false, false, 999, descriptor_table_protodef_sdk_2fstream_2findex_5fv1_2fresponse_2eproto, "sdk/stream/index_v1/response.proto", 
  &descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto_once, descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto_deps, 2, 5,
  schemas, file_default_instances, TableStruct_sdk_2fstream_2findex_5fv1_2fresponse_2eproto::offsets,
  file_level_metadata_sdk_2fstream_2findex_5fv1_2fresponse_2eproto, file_level_enum_descriptors_sdk_2fstream_2findex_5fv1_2fresponse_2eproto, file_level_service_descriptors_sdk_2fstream_2findex_5fv1_2fresponse_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto_getter() {
  return &descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sdk_2fstream_2findex_5fv1_2fresponse_2eproto(&descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto);
namespace kaikosdk {

// ===================================================================

class StreamIndexServiceResponsePercentage::_Internal {
 public:
};

StreamIndexServiceResponsePercentage::StreamIndexServiceResponsePercentage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pairs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kaikosdk.StreamIndexServiceResponsePercentage)
}
StreamIndexServiceResponsePercentage::StreamIndexServiceResponsePercentage(const StreamIndexServiceResponsePercentage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pairs_(from.pairs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&percentage_, &from.percentage_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&percentage_)) + sizeof(price_));
  // @@protoc_insertion_point(copy_constructor:kaikosdk.StreamIndexServiceResponsePercentage)
}

inline void StreamIndexServiceResponsePercentage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&percentage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&price_) -
    reinterpret_cast<char*>(&percentage_)) + sizeof(price_));
}

StreamIndexServiceResponsePercentage::~StreamIndexServiceResponsePercentage() {
  // @@protoc_insertion_point(destructor:kaikosdk.StreamIndexServiceResponsePercentage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamIndexServiceResponsePercentage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StreamIndexServiceResponsePercentage::ArenaDtor(void* object) {
  StreamIndexServiceResponsePercentage* _this = reinterpret_cast< StreamIndexServiceResponsePercentage* >(object);
  (void)_this;
}
void StreamIndexServiceResponsePercentage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamIndexServiceResponsePercentage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamIndexServiceResponsePercentage::Clear() {
// @@protoc_insertion_point(message_clear_start:kaikosdk.StreamIndexServiceResponsePercentage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pairs_.Clear();
  ::memset(&percentage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&percentage_)) + sizeof(price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamIndexServiceResponsePercentage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double percentage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .kaikosdk.StreamIndexServiceResponsePairs pairs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pairs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamIndexServiceResponsePercentage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaikosdk.StreamIndexServiceResponsePercentage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double percentage = 1;
  if (!(this->_internal_percentage() <= 0 && this->_internal_percentage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_percentage(), target);
  }

  // double price = 2;
  if (!(this->_internal_price() <= 0 && this->_internal_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_price(), target);
  }

  // repeated .kaikosdk.StreamIndexServiceResponsePairs pairs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pairs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_pairs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaikosdk.StreamIndexServiceResponsePercentage)
  return target;
}

size_t StreamIndexServiceResponsePercentage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaikosdk.StreamIndexServiceResponsePercentage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kaikosdk.StreamIndexServiceResponsePairs pairs = 3;
  total_size += 1UL * this->_internal_pairs_size();
  for (const auto& msg : this->pairs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // double percentage = 1;
  if (!(this->_internal_percentage() <= 0 && this->_internal_percentage() >= 0)) {
    total_size += 1 + 8;
  }

  // double price = 2;
  if (!(this->_internal_price() <= 0 && this->_internal_price() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamIndexServiceResponsePercentage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamIndexServiceResponsePercentage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamIndexServiceResponsePercentage::GetClassData() const { return &_class_data_; }

void StreamIndexServiceResponsePercentage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StreamIndexServiceResponsePercentage *>(to)->MergeFrom(
      static_cast<const StreamIndexServiceResponsePercentage &>(from));
}


void StreamIndexServiceResponsePercentage::MergeFrom(const StreamIndexServiceResponsePercentage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kaikosdk.StreamIndexServiceResponsePercentage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pairs_.MergeFrom(from.pairs_);
  if (!(from._internal_percentage() <= 0 && from._internal_percentage() >= 0)) {
    _internal_set_percentage(from._internal_percentage());
  }
  if (!(from._internal_price() <= 0 && from._internal_price() >= 0)) {
    _internal_set_price(from._internal_price());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamIndexServiceResponsePercentage::CopyFrom(const StreamIndexServiceResponsePercentage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaikosdk.StreamIndexServiceResponsePercentage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamIndexServiceResponsePercentage::IsInitialized() const {
  return true;
}

void StreamIndexServiceResponsePercentage::InternalSwap(StreamIndexServiceResponsePercentage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pairs_.InternalSwap(&other->pairs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamIndexServiceResponsePercentage, price_)
      + sizeof(StreamIndexServiceResponsePercentage::price_)
      - PROTOBUF_FIELD_OFFSET(StreamIndexServiceResponsePercentage, percentage_)>(
          reinterpret_cast<char*>(&percentage_),
          reinterpret_cast<char*>(&other->percentage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamIndexServiceResponsePercentage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto_getter, &descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto_once,
      file_level_metadata_sdk_2fstream_2findex_5fv1_2fresponse_2eproto[0]);
}

// ===================================================================

class StreamIndexServiceResponsePairs::_Internal {
 public:
};

StreamIndexServiceResponsePairs::StreamIndexServiceResponsePairs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  instruments_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kaikosdk.StreamIndexServiceResponsePairs)
}
StreamIndexServiceResponsePairs::StreamIndexServiceResponsePairs(const StreamIndexServiceResponsePairs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      instruments_(from.instruments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pair().empty()) {
    pair_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pair(), 
      GetArenaForAllocation());
  }
  weight_ = from.weight_;
  // @@protoc_insertion_point(copy_constructor:kaikosdk.StreamIndexServiceResponsePairs)
}

inline void StreamIndexServiceResponsePairs::SharedCtor() {
pair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
weight_ = 0;
}

StreamIndexServiceResponsePairs::~StreamIndexServiceResponsePairs() {
  // @@protoc_insertion_point(destructor:kaikosdk.StreamIndexServiceResponsePairs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamIndexServiceResponsePairs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pair_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StreamIndexServiceResponsePairs::ArenaDtor(void* object) {
  StreamIndexServiceResponsePairs* _this = reinterpret_cast< StreamIndexServiceResponsePairs* >(object);
  (void)_this;
}
void StreamIndexServiceResponsePairs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamIndexServiceResponsePairs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamIndexServiceResponsePairs::Clear() {
// @@protoc_insertion_point(message_clear_start:kaikosdk.StreamIndexServiceResponsePairs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instruments_.Clear();
  pair_.ClearToEmpty();
  weight_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamIndexServiceResponsePairs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pair();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaikosdk.StreamIndexServiceResponsePairs.pair"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .kaikosdk.StreamIndexServiceResponseInstruments instruments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instruments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamIndexServiceResponsePairs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaikosdk.StreamIndexServiceResponsePairs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pair = 1;
  if (!this->_internal_pair().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pair().data(), static_cast<int>(this->_internal_pair().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamIndexServiceResponsePairs.pair");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pair(), target);
  }

  // double weight = 2;
  if (!(this->_internal_weight() <= 0 && this->_internal_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_weight(), target);
  }

  // repeated .kaikosdk.StreamIndexServiceResponseInstruments instruments = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_instruments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_instruments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaikosdk.StreamIndexServiceResponsePairs)
  return target;
}

size_t StreamIndexServiceResponsePairs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaikosdk.StreamIndexServiceResponsePairs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kaikosdk.StreamIndexServiceResponseInstruments instruments = 3;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->instruments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string pair = 1;
  if (!this->_internal_pair().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pair());
  }

  // double weight = 2;
  if (!(this->_internal_weight() <= 0 && this->_internal_weight() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamIndexServiceResponsePairs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamIndexServiceResponsePairs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamIndexServiceResponsePairs::GetClassData() const { return &_class_data_; }

void StreamIndexServiceResponsePairs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StreamIndexServiceResponsePairs *>(to)->MergeFrom(
      static_cast<const StreamIndexServiceResponsePairs &>(from));
}


void StreamIndexServiceResponsePairs::MergeFrom(const StreamIndexServiceResponsePairs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kaikosdk.StreamIndexServiceResponsePairs)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  instruments_.MergeFrom(from.instruments_);
  if (!from._internal_pair().empty()) {
    _internal_set_pair(from._internal_pair());
  }
  if (!(from._internal_weight() <= 0 && from._internal_weight() >= 0)) {
    _internal_set_weight(from._internal_weight());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamIndexServiceResponsePairs::CopyFrom(const StreamIndexServiceResponsePairs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaikosdk.StreamIndexServiceResponsePairs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamIndexServiceResponsePairs::IsInitialized() const {
  return true;
}

void StreamIndexServiceResponsePairs::InternalSwap(StreamIndexServiceResponsePairs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  instruments_.InternalSwap(&other->instruments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pair_, GetArenaForAllocation(),
      &other->pair_, other->GetArenaForAllocation()
  );
  swap(weight_, other->weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamIndexServiceResponsePairs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto_getter, &descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto_once,
      file_level_metadata_sdk_2fstream_2findex_5fv1_2fresponse_2eproto[1]);
}

// ===================================================================

class StreamIndexServiceResponseInstruments::_Internal {
 public:
};

StreamIndexServiceResponseInstruments::StreamIndexServiceResponseInstruments(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kaikosdk.StreamIndexServiceResponseInstruments)
}
StreamIndexServiceResponseInstruments::StreamIndexServiceResponseInstruments(const StreamIndexServiceResponseInstruments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  exchange_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchange().empty()) {
    exchange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_exchange(), 
      GetArenaForAllocation());
  }
  ::memcpy(&price_, &from.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_) -
    reinterpret_cast<char*>(&price_)) + sizeof(volume_));
  // @@protoc_insertion_point(copy_constructor:kaikosdk.StreamIndexServiceResponseInstruments)
}

inline void StreamIndexServiceResponseInstruments::SharedCtor() {
exchange_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&price_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&volume_) -
    reinterpret_cast<char*>(&price_)) + sizeof(volume_));
}

StreamIndexServiceResponseInstruments::~StreamIndexServiceResponseInstruments() {
  // @@protoc_insertion_point(destructor:kaikosdk.StreamIndexServiceResponseInstruments)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamIndexServiceResponseInstruments::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  exchange_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StreamIndexServiceResponseInstruments::ArenaDtor(void* object) {
  StreamIndexServiceResponseInstruments* _this = reinterpret_cast< StreamIndexServiceResponseInstruments* >(object);
  (void)_this;
}
void StreamIndexServiceResponseInstruments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamIndexServiceResponseInstruments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamIndexServiceResponseInstruments::Clear() {
// @@protoc_insertion_point(message_clear_start:kaikosdk.StreamIndexServiceResponseInstruments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exchange_.ClearToEmpty();
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&price_)) + sizeof(volume_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamIndexServiceResponseInstruments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string exchange = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_exchange();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaikosdk.StreamIndexServiceResponseInstruments.exchange"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double volume = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamIndexServiceResponseInstruments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaikosdk.StreamIndexServiceResponseInstruments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string exchange = 1;
  if (!this->_internal_exchange().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange().data(), static_cast<int>(this->_internal_exchange().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamIndexServiceResponseInstruments.exchange");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_exchange(), target);
  }

  // double price = 2;
  if (!(this->_internal_price() <= 0 && this->_internal_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_price(), target);
  }

  // double volume = 3;
  if (!(this->_internal_volume() <= 0 && this->_internal_volume() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_volume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaikosdk.StreamIndexServiceResponseInstruments)
  return target;
}

size_t StreamIndexServiceResponseInstruments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaikosdk.StreamIndexServiceResponseInstruments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string exchange = 1;
  if (!this->_internal_exchange().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange());
  }

  // double price = 2;
  if (!(this->_internal_price() <= 0 && this->_internal_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double volume = 3;
  if (!(this->_internal_volume() <= 0 && this->_internal_volume() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamIndexServiceResponseInstruments::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamIndexServiceResponseInstruments::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamIndexServiceResponseInstruments::GetClassData() const { return &_class_data_; }

void StreamIndexServiceResponseInstruments::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StreamIndexServiceResponseInstruments *>(to)->MergeFrom(
      static_cast<const StreamIndexServiceResponseInstruments &>(from));
}


void StreamIndexServiceResponseInstruments::MergeFrom(const StreamIndexServiceResponseInstruments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kaikosdk.StreamIndexServiceResponseInstruments)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_exchange().empty()) {
    _internal_set_exchange(from._internal_exchange());
  }
  if (!(from._internal_price() <= 0 && from._internal_price() >= 0)) {
    _internal_set_price(from._internal_price());
  }
  if (!(from._internal_volume() <= 0 && from._internal_volume() >= 0)) {
    _internal_set_volume(from._internal_volume());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamIndexServiceResponseInstruments::CopyFrom(const StreamIndexServiceResponseInstruments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaikosdk.StreamIndexServiceResponseInstruments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamIndexServiceResponseInstruments::IsInitialized() const {
  return true;
}

void StreamIndexServiceResponseInstruments::InternalSwap(StreamIndexServiceResponseInstruments* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &exchange_, GetArenaForAllocation(),
      &other->exchange_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamIndexServiceResponseInstruments, volume_)
      + sizeof(StreamIndexServiceResponseInstruments::volume_)
      - PROTOBUF_FIELD_OFFSET(StreamIndexServiceResponseInstruments, price_)>(
          reinterpret_cast<char*>(&price_),
          reinterpret_cast<char*>(&other->price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamIndexServiceResponseInstruments::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto_getter, &descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto_once,
      file_level_metadata_sdk_2fstream_2findex_5fv1_2fresponse_2eproto[2]);
}

// ===================================================================

class StreamIndexServiceResponseBaseAsset::_Internal {
 public:
};

StreamIndexServiceResponseBaseAsset::StreamIndexServiceResponseBaseAsset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kaikosdk.StreamIndexServiceResponseBaseAsset)
}
StreamIndexServiceResponseBaseAsset::StreamIndexServiceResponseBaseAsset(const StreamIndexServiceResponseBaseAsset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset().empty()) {
    asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset(), 
      GetArenaForAllocation());
  }
  weight_ = from.weight_;
  // @@protoc_insertion_point(copy_constructor:kaikosdk.StreamIndexServiceResponseBaseAsset)
}

inline void StreamIndexServiceResponseBaseAsset::SharedCtor() {
asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
weight_ = 0;
}

StreamIndexServiceResponseBaseAsset::~StreamIndexServiceResponseBaseAsset() {
  // @@protoc_insertion_point(destructor:kaikosdk.StreamIndexServiceResponseBaseAsset)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamIndexServiceResponseBaseAsset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StreamIndexServiceResponseBaseAsset::ArenaDtor(void* object) {
  StreamIndexServiceResponseBaseAsset* _this = reinterpret_cast< StreamIndexServiceResponseBaseAsset* >(object);
  (void)_this;
}
void StreamIndexServiceResponseBaseAsset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamIndexServiceResponseBaseAsset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamIndexServiceResponseBaseAsset::Clear() {
// @@protoc_insertion_point(message_clear_start:kaikosdk.StreamIndexServiceResponseBaseAsset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asset_.ClearToEmpty();
  weight_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamIndexServiceResponseBaseAsset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string asset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaikosdk.StreamIndexServiceResponseBaseAsset.asset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamIndexServiceResponseBaseAsset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaikosdk.StreamIndexServiceResponseBaseAsset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string asset = 1;
  if (!this->_internal_asset().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset().data(), static_cast<int>(this->_internal_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamIndexServiceResponseBaseAsset.asset");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_asset(), target);
  }

  // double weight = 2;
  if (!(this->_internal_weight() <= 0 && this->_internal_weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaikosdk.StreamIndexServiceResponseBaseAsset)
  return target;
}

size_t StreamIndexServiceResponseBaseAsset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaikosdk.StreamIndexServiceResponseBaseAsset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asset = 1;
  if (!this->_internal_asset().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset());
  }

  // double weight = 2;
  if (!(this->_internal_weight() <= 0 && this->_internal_weight() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamIndexServiceResponseBaseAsset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamIndexServiceResponseBaseAsset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamIndexServiceResponseBaseAsset::GetClassData() const { return &_class_data_; }

void StreamIndexServiceResponseBaseAsset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StreamIndexServiceResponseBaseAsset *>(to)->MergeFrom(
      static_cast<const StreamIndexServiceResponseBaseAsset &>(from));
}


void StreamIndexServiceResponseBaseAsset::MergeFrom(const StreamIndexServiceResponseBaseAsset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kaikosdk.StreamIndexServiceResponseBaseAsset)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_asset().empty()) {
    _internal_set_asset(from._internal_asset());
  }
  if (!(from._internal_weight() <= 0 && from._internal_weight() >= 0)) {
    _internal_set_weight(from._internal_weight());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamIndexServiceResponseBaseAsset::CopyFrom(const StreamIndexServiceResponseBaseAsset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaikosdk.StreamIndexServiceResponseBaseAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamIndexServiceResponseBaseAsset::IsInitialized() const {
  return true;
}

void StreamIndexServiceResponseBaseAsset::InternalSwap(StreamIndexServiceResponseBaseAsset* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &asset_, GetArenaForAllocation(),
      &other->asset_, other->GetArenaForAllocation()
  );
  swap(weight_, other->weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamIndexServiceResponseBaseAsset::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto_getter, &descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto_once,
      file_level_metadata_sdk_2fstream_2findex_5fv1_2fresponse_2eproto[3]);
}

// ===================================================================

class StreamIndexServiceResponseV1::_Internal {
 public:
  static const ::kaikosdk::DataInterval& interval(const StreamIndexServiceResponseV1* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& ts_event(const StreamIndexServiceResponseV1* msg);
};

const ::kaikosdk::DataInterval&
StreamIndexServiceResponseV1::_Internal::interval(const StreamIndexServiceResponseV1* msg) {
  return *msg->interval_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
StreamIndexServiceResponseV1::_Internal::ts_event(const StreamIndexServiceResponseV1* msg) {
  return *msg->ts_event_;
}
void StreamIndexServiceResponseV1::clear_interval() {
  if (GetArenaForAllocation() == nullptr && interval_ != nullptr) {
    delete interval_;
  }
  interval_ = nullptr;
}
void StreamIndexServiceResponseV1::clear_ts_event() {
  if (GetArenaForAllocation() == nullptr && ts_event_ != nullptr) {
    delete ts_event_;
  }
  ts_event_ = nullptr;
}
StreamIndexServiceResponseV1::StreamIndexServiceResponseV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bases_(arena),
  exchanges_(arena),
  percentages_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kaikosdk.StreamIndexServiceResponseV1)
}
StreamIndexServiceResponseV1::StreamIndexServiceResponseV1(const StreamIndexServiceResponseV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bases_(from.bases_),
      exchanges_(from.exchanges_),
      percentages_(from.percentages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index_code().empty()) {
    index_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_index_code(), 
      GetArenaForAllocation());
  }
  event_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_event_type().empty()) {
    event_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_event_type(), 
      GetArenaForAllocation());
  }
  quote_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_quote().empty()) {
    quote_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_quote(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_interval()) {
    interval_ = new ::kaikosdk::DataInterval(*from.interval_);
  } else {
    interval_ = nullptr;
  }
  if (from._internal_has_ts_event()) {
    ts_event_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.ts_event_);
  } else {
    ts_event_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kaikosdk.StreamIndexServiceResponseV1)
}

inline void StreamIndexServiceResponseV1::SharedCtor() {
index_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
event_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
quote_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&interval_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ts_event_) -
    reinterpret_cast<char*>(&interval_)) + sizeof(ts_event_));
}

StreamIndexServiceResponseV1::~StreamIndexServiceResponseV1() {
  // @@protoc_insertion_point(destructor:kaikosdk.StreamIndexServiceResponseV1)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamIndexServiceResponseV1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  index_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quote_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete interval_;
  if (this != internal_default_instance()) delete ts_event_;
}

void StreamIndexServiceResponseV1::ArenaDtor(void* object) {
  StreamIndexServiceResponseV1* _this = reinterpret_cast< StreamIndexServiceResponseV1* >(object);
  (void)_this;
}
void StreamIndexServiceResponseV1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamIndexServiceResponseV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamIndexServiceResponseV1::Clear() {
// @@protoc_insertion_point(message_clear_start:kaikosdk.StreamIndexServiceResponseV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bases_.Clear();
  exchanges_.Clear();
  percentages_.Clear();
  index_code_.ClearToEmpty();
  event_type_.ClearToEmpty();
  quote_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && interval_ != nullptr) {
    delete interval_;
  }
  interval_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ts_event_ != nullptr) {
    delete ts_event_;
  }
  ts_event_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamIndexServiceResponseV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string index_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_index_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaikosdk.StreamIndexServiceResponseV1.index_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string event_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_event_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaikosdk.StreamIndexServiceResponseV1.event_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kaikosdk.DataInterval interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string quote = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_quote();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaikosdk.StreamIndexServiceResponseV1.quote"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kaikosdk.StreamIndexServiceResponseBaseAsset bases = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string exchanges = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_exchanges();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaikosdk.StreamIndexServiceResponseV1.exchanges"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kaikosdk.StreamIndexServiceResponsePercentage percentages = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_percentages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp ts_event = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ts_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamIndexServiceResponseV1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaikosdk.StreamIndexServiceResponseV1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string index_code = 1;
  if (!this->_internal_index_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_code().data(), static_cast<int>(this->_internal_index_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamIndexServiceResponseV1.index_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_index_code(), target);
  }

  // string event_type = 2;
  if (!this->_internal_event_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_type().data(), static_cast<int>(this->_internal_event_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamIndexServiceResponseV1.event_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_event_type(), target);
  }

  // .kaikosdk.DataInterval interval = 3;
  if (this->_internal_has_interval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::interval(this), target, stream);
  }

  // string quote = 4;
  if (!this->_internal_quote().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quote().data(), static_cast<int>(this->_internal_quote().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamIndexServiceResponseV1.quote");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_quote(), target);
  }

  // repeated .kaikosdk.StreamIndexServiceResponseBaseAsset bases = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bases_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_bases(i), target, stream);
  }

  // repeated string exchanges = 6;
  for (int i = 0, n = this->_internal_exchanges_size(); i < n; i++) {
    const auto& s = this->_internal_exchanges(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamIndexServiceResponseV1.exchanges");
    target = stream->WriteString(6, s, target);
  }

  // repeated .kaikosdk.StreamIndexServiceResponsePercentage percentages = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_percentages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_percentages(i), target, stream);
  }

  // .google.protobuf.Timestamp ts_event = 8;
  if (this->_internal_has_ts_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::ts_event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaikosdk.StreamIndexServiceResponseV1)
  return target;
}

size_t StreamIndexServiceResponseV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaikosdk.StreamIndexServiceResponseV1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kaikosdk.StreamIndexServiceResponseBaseAsset bases = 5;
  total_size += 1UL * this->_internal_bases_size();
  for (const auto& msg : this->bases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string exchanges = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(exchanges_.size());
  for (int i = 0, n = exchanges_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      exchanges_.Get(i));
  }

  // repeated .kaikosdk.StreamIndexServiceResponsePercentage percentages = 7;
  total_size += 1UL * this->_internal_percentages_size();
  for (const auto& msg : this->percentages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string index_code = 1;
  if (!this->_internal_index_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_code());
  }

  // string event_type = 2;
  if (!this->_internal_event_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_type());
  }

  // string quote = 4;
  if (!this->_internal_quote().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quote());
  }

  // .kaikosdk.DataInterval interval = 3;
  if (this->_internal_has_interval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *interval_);
  }

  // .google.protobuf.Timestamp ts_event = 8;
  if (this->_internal_has_ts_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ts_event_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamIndexServiceResponseV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamIndexServiceResponseV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamIndexServiceResponseV1::GetClassData() const { return &_class_data_; }

void StreamIndexServiceResponseV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StreamIndexServiceResponseV1 *>(to)->MergeFrom(
      static_cast<const StreamIndexServiceResponseV1 &>(from));
}


void StreamIndexServiceResponseV1::MergeFrom(const StreamIndexServiceResponseV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kaikosdk.StreamIndexServiceResponseV1)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bases_.MergeFrom(from.bases_);
  exchanges_.MergeFrom(from.exchanges_);
  percentages_.MergeFrom(from.percentages_);
  if (!from._internal_index_code().empty()) {
    _internal_set_index_code(from._internal_index_code());
  }
  if (!from._internal_event_type().empty()) {
    _internal_set_event_type(from._internal_event_type());
  }
  if (!from._internal_quote().empty()) {
    _internal_set_quote(from._internal_quote());
  }
  if (from._internal_has_interval()) {
    _internal_mutable_interval()->::kaikosdk::DataInterval::MergeFrom(from._internal_interval());
  }
  if (from._internal_has_ts_event()) {
    _internal_mutable_ts_event()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_ts_event());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamIndexServiceResponseV1::CopyFrom(const StreamIndexServiceResponseV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaikosdk.StreamIndexServiceResponseV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamIndexServiceResponseV1::IsInitialized() const {
  return true;
}

void StreamIndexServiceResponseV1::InternalSwap(StreamIndexServiceResponseV1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bases_.InternalSwap(&other->bases_);
  exchanges_.InternalSwap(&other->exchanges_);
  percentages_.InternalSwap(&other->percentages_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &index_code_, GetArenaForAllocation(),
      &other->index_code_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &event_type_, GetArenaForAllocation(),
      &other->event_type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &quote_, GetArenaForAllocation(),
      &other->quote_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamIndexServiceResponseV1, ts_event_)
      + sizeof(StreamIndexServiceResponseV1::ts_event_)
      - PROTOBUF_FIELD_OFFSET(StreamIndexServiceResponseV1, interval_)>(
          reinterpret_cast<char*>(&interval_),
          reinterpret_cast<char*>(&other->interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamIndexServiceResponseV1::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto_getter, &descriptor_table_sdk_2fstream_2findex_5fv1_2fresponse_2eproto_once,
      file_level_metadata_sdk_2fstream_2findex_5fv1_2fresponse_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace kaikosdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kaikosdk::StreamIndexServiceResponsePercentage* Arena::CreateMaybeMessage< ::kaikosdk::StreamIndexServiceResponsePercentage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaikosdk::StreamIndexServiceResponsePercentage >(arena);
}
template<> PROTOBUF_NOINLINE ::kaikosdk::StreamIndexServiceResponsePairs* Arena::CreateMaybeMessage< ::kaikosdk::StreamIndexServiceResponsePairs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaikosdk::StreamIndexServiceResponsePairs >(arena);
}
template<> PROTOBUF_NOINLINE ::kaikosdk::StreamIndexServiceResponseInstruments* Arena::CreateMaybeMessage< ::kaikosdk::StreamIndexServiceResponseInstruments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaikosdk::StreamIndexServiceResponseInstruments >(arena);
}
template<> PROTOBUF_NOINLINE ::kaikosdk::StreamIndexServiceResponseBaseAsset* Arena::CreateMaybeMessage< ::kaikosdk::StreamIndexServiceResponseBaseAsset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaikosdk::StreamIndexServiceResponseBaseAsset >(arena);
}
template<> PROTOBUF_NOINLINE ::kaikosdk::StreamIndexServiceResponseV1* Arena::CreateMaybeMessage< ::kaikosdk::StreamIndexServiceResponseV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaikosdk::StreamIndexServiceResponseV1 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
