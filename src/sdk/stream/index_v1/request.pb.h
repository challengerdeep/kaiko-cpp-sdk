// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk/stream/index_v1/request.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2findex_5fv1_2frequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2findex_5fv1_2frequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sdk_2fstream_2findex_5fv1_2frequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sdk_2fstream_2findex_5fv1_2frequest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sdk_2fstream_2findex_5fv1_2frequest_2eproto;
namespace kaikosdk {
class StreamIndexServiceRequestV1;
struct StreamIndexServiceRequestV1DefaultTypeInternal;
extern StreamIndexServiceRequestV1DefaultTypeInternal _StreamIndexServiceRequestV1_default_instance_;
}  // namespace kaikosdk
PROTOBUF_NAMESPACE_OPEN
template<> ::kaikosdk::StreamIndexServiceRequestV1* Arena::CreateMaybeMessage<::kaikosdk::StreamIndexServiceRequestV1>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kaikosdk {

// ===================================================================

class StreamIndexServiceRequestV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.StreamIndexServiceRequestV1) */ {
 public:
  inline StreamIndexServiceRequestV1() : StreamIndexServiceRequestV1(nullptr) {}
  ~StreamIndexServiceRequestV1() override;
  explicit constexpr StreamIndexServiceRequestV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamIndexServiceRequestV1(const StreamIndexServiceRequestV1& from);
  StreamIndexServiceRequestV1(StreamIndexServiceRequestV1&& from) noexcept
    : StreamIndexServiceRequestV1() {
    *this = ::std::move(from);
  }

  inline StreamIndexServiceRequestV1& operator=(const StreamIndexServiceRequestV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamIndexServiceRequestV1& operator=(StreamIndexServiceRequestV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamIndexServiceRequestV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamIndexServiceRequestV1* internal_default_instance() {
    return reinterpret_cast<const StreamIndexServiceRequestV1*>(
               &_StreamIndexServiceRequestV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StreamIndexServiceRequestV1& a, StreamIndexServiceRequestV1& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamIndexServiceRequestV1* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamIndexServiceRequestV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamIndexServiceRequestV1* New() const final {
    return new StreamIndexServiceRequestV1();
  }

  StreamIndexServiceRequestV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamIndexServiceRequestV1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamIndexServiceRequestV1& from);
  void MergeFrom(const StreamIndexServiceRequestV1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamIndexServiceRequestV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.StreamIndexServiceRequestV1";
  }
  protected:
  explicit StreamIndexServiceRequestV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexCodeFieldNumber = 1,
    kEventTypeFieldNumber = 2,
  };
  // string index_code = 1;
  void clear_index_code();
  const std::string& index_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_code();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_index_code();
  void set_allocated_index_code(std::string* index_code);
  private:
  const std::string& _internal_index_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_code(const std::string& value);
  std::string* _internal_mutable_index_code();
  public:

  // string event_type = 2;
  void clear_event_type();
  const std::string& event_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event_type();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_event_type();
  void set_allocated_event_type(std::string* event_type);
  private:
  const std::string& _internal_event_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_type(const std::string& value);
  std::string* _internal_mutable_event_type();
  public:

  // @@protoc_insertion_point(class_scope:kaikosdk.StreamIndexServiceRequestV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2fstream_2findex_5fv1_2frequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StreamIndexServiceRequestV1

// string index_code = 1;
inline void StreamIndexServiceRequestV1::clear_index_code() {
  index_code_.ClearToEmpty();
}
inline const std::string& StreamIndexServiceRequestV1::index_code() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexServiceRequestV1.index_code)
  return _internal_index_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamIndexServiceRequestV1::set_index_code(ArgT0&& arg0, ArgT... args) {
 
 index_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIndexServiceRequestV1.index_code)
}
inline std::string* StreamIndexServiceRequestV1::mutable_index_code() {
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIndexServiceRequestV1.index_code)
  return _internal_mutable_index_code();
}
inline const std::string& StreamIndexServiceRequestV1::_internal_index_code() const {
  return index_code_.Get();
}
inline void StreamIndexServiceRequestV1::_internal_set_index_code(const std::string& value) {
  
  index_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StreamIndexServiceRequestV1::_internal_mutable_index_code() {
  
  return index_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StreamIndexServiceRequestV1::release_index_code() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIndexServiceRequestV1.index_code)
  return index_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StreamIndexServiceRequestV1::set_allocated_index_code(std::string* index_code) {
  if (index_code != nullptr) {
    
  } else {
    
  }
  index_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIndexServiceRequestV1.index_code)
}

// string event_type = 2;
inline void StreamIndexServiceRequestV1::clear_event_type() {
  event_type_.ClearToEmpty();
}
inline const std::string& StreamIndexServiceRequestV1::event_type() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexServiceRequestV1.event_type)
  return _internal_event_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamIndexServiceRequestV1::set_event_type(ArgT0&& arg0, ArgT... args) {
 
 event_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIndexServiceRequestV1.event_type)
}
inline std::string* StreamIndexServiceRequestV1::mutable_event_type() {
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIndexServiceRequestV1.event_type)
  return _internal_mutable_event_type();
}
inline const std::string& StreamIndexServiceRequestV1::_internal_event_type() const {
  return event_type_.Get();
}
inline void StreamIndexServiceRequestV1::_internal_set_event_type(const std::string& value) {
  
  event_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StreamIndexServiceRequestV1::_internal_mutable_event_type() {
  
  return event_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StreamIndexServiceRequestV1::release_event_type() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIndexServiceRequestV1.event_type)
  return event_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StreamIndexServiceRequestV1::set_allocated_event_type(std::string* event_type) {
  if (event_type != nullptr) {
    
  } else {
    
  }
  event_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIndexServiceRequestV1.event_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace kaikosdk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2findex_5fv1_2frequest_2eproto
