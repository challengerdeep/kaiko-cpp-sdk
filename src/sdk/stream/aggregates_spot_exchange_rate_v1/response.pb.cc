// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk/stream/aggregates_spot_exchange_rate_v1/response.proto

#include "sdk/stream/aggregates_spot_exchange_rate_v1/response.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace kaikosdk {
PROTOBUF_CONSTEXPR StreamAggregatesSpotExchangeRateResponseV1_SourcesEntry_DoNotUse::StreamAggregatesSpotExchangeRateResponseV1_SourcesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct StreamAggregatesSpotExchangeRateResponseV1_SourcesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamAggregatesSpotExchangeRateResponseV1_SourcesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamAggregatesSpotExchangeRateResponseV1_SourcesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StreamAggregatesSpotExchangeRateResponseV1_SourcesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamAggregatesSpotExchangeRateResponseV1_SourcesEntry_DoNotUseDefaultTypeInternal _StreamAggregatesSpotExchangeRateResponseV1_SourcesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR StreamAggregatesSpotExchangeRateResponseV1::StreamAggregatesSpotExchangeRateResponseV1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sources_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.aggregate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.price_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sequence_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamAggregatesSpotExchangeRateResponseV1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamAggregatesSpotExchangeRateResponseV1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamAggregatesSpotExchangeRateResponseV1DefaultTypeInternal() {}
  union {
    StreamAggregatesSpotExchangeRateResponseV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamAggregatesSpotExchangeRateResponseV1DefaultTypeInternal _StreamAggregatesSpotExchangeRateResponseV1_default_instance_;
}  // namespace kaikosdk
static ::_pb::Metadata file_level_metadata_sdk_2fstream_2faggregates_5fspot_5fexchange_5frate_5fv1_2fresponse_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_sdk_2fstream_2faggregates_5fspot_5fexchange_5frate_5fv1_2fresponse_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_sdk_2fstream_2faggregates_5fspot_5fexchange_5frate_5fv1_2fresponse_2eproto = nullptr;

const uint32_t TableStruct_sdk_2fstream_2faggregates_5fspot_5fexchange_5frate_5fv1_2fresponse_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1_SourcesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1_SourcesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1_SourcesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1_SourcesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1, _impl_.aggregate_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1, _impl_.sequence_id_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1, _impl_.sources_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1, _impl_.uid_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1_SourcesEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::kaikosdk::_StreamAggregatesSpotExchangeRateResponseV1_SourcesEntry_DoNotUse_default_instance_._instance,
  &::kaikosdk::_StreamAggregatesSpotExchangeRateResponseV1_default_instance_._instance,
};

const char descriptor_table_protodef_sdk_2fstream_2faggregates_5fspot_5fexchange_5frate_5fv1_2fresponse_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n:sdk/stream/aggregates_spot_exchange_ra"
  "te_v1/response.proto\022\010kaikosdk\032\037google/p"
  "rotobuf/timestamp.proto\032\025sdk/core/source"
  ".proto\"\303\002\n*StreamAggregatesSpotExchangeR"
  "ateResponseV1\022\021\n\taggregate\030\001 \001(\t\022\014\n\004code"
  "\030\002 \001(\t\022\r\n\005price\030\003 \001(\t\022\023\n\013sequence_id\030\004 \001"
  "(\t\022R\n\007sources\030\005 \003(\0132A.kaikosdk.StreamAgg"
  "regatesSpotExchangeRateResponseV1.Source"
  "sEntry\022-\n\ttimestamp\030\006 \001(\0132\032.google.proto"
  "buf.Timestamp\022\013\n\003uid\030\007 \001(\t\032@\n\014SourcesEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022\037\n\005value\030\002 \001(\0132\020.kaikosd"
  "k.Source:\0028\001B\324\001\n5com.kaiko.sdk.stream.ag"
  "gregates_spot_exchange_rate_v1P\001Zjgithub"
  ".com/kaikodata/kaiko-go-sdk/stream/aggre"
  "gates_spot_exchange_rate_v1;aggregates_s"
  "pot_exchange_rate_v1\252\002,KaikoSdk.Stream.A"
  "ggregatesSpotExchangeRateV1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_sdk_2fstream_2faggregates_5fspot_5fexchange_5frate_5fv1_2fresponse_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_sdk_2fcore_2fsource_2eproto,
};
static ::_pbi::once_flag descriptor_table_sdk_2fstream_2faggregates_5fspot_5fexchange_5frate_5fv1_2fresponse_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sdk_2fstream_2faggregates_5fspot_5fexchange_5frate_5fv1_2fresponse_2eproto = {
    false, false, 675, descriptor_table_protodef_sdk_2fstream_2faggregates_5fspot_5fexchange_5frate_5fv1_2fresponse_2eproto,
    "sdk/stream/aggregates_spot_exchange_rate_v1/response.proto",
    &descriptor_table_sdk_2fstream_2faggregates_5fspot_5fexchange_5frate_5fv1_2fresponse_2eproto_once, descriptor_table_sdk_2fstream_2faggregates_5fspot_5fexchange_5frate_5fv1_2fresponse_2eproto_deps, 2, 2,
    schemas, file_default_instances, TableStruct_sdk_2fstream_2faggregates_5fspot_5fexchange_5frate_5fv1_2fresponse_2eproto::offsets,
    file_level_metadata_sdk_2fstream_2faggregates_5fspot_5fexchange_5frate_5fv1_2fresponse_2eproto, file_level_enum_descriptors_sdk_2fstream_2faggregates_5fspot_5fexchange_5frate_5fv1_2fresponse_2eproto,
    file_level_service_descriptors_sdk_2fstream_2faggregates_5fspot_5fexchange_5frate_5fv1_2fresponse_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sdk_2fstream_2faggregates_5fspot_5fexchange_5frate_5fv1_2fresponse_2eproto_getter() {
  return &descriptor_table_sdk_2fstream_2faggregates_5fspot_5fexchange_5frate_5fv1_2fresponse_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sdk_2fstream_2faggregates_5fspot_5fexchange_5frate_5fv1_2fresponse_2eproto(&descriptor_table_sdk_2fstream_2faggregates_5fspot_5fexchange_5frate_5fv1_2fresponse_2eproto);
namespace kaikosdk {

// ===================================================================

StreamAggregatesSpotExchangeRateResponseV1_SourcesEntry_DoNotUse::StreamAggregatesSpotExchangeRateResponseV1_SourcesEntry_DoNotUse() {}
StreamAggregatesSpotExchangeRateResponseV1_SourcesEntry_DoNotUse::StreamAggregatesSpotExchangeRateResponseV1_SourcesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StreamAggregatesSpotExchangeRateResponseV1_SourcesEntry_DoNotUse::MergeFrom(const StreamAggregatesSpotExchangeRateResponseV1_SourcesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StreamAggregatesSpotExchangeRateResponseV1_SourcesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2fstream_2faggregates_5fspot_5fexchange_5frate_5fv1_2fresponse_2eproto_getter, &descriptor_table_sdk_2fstream_2faggregates_5fspot_5fexchange_5frate_5fv1_2fresponse_2eproto_once,
      file_level_metadata_sdk_2fstream_2faggregates_5fspot_5fexchange_5frate_5fv1_2fresponse_2eproto[0]);
}

// ===================================================================

class StreamAggregatesSpotExchangeRateResponseV1::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const StreamAggregatesSpotExchangeRateResponseV1* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
StreamAggregatesSpotExchangeRateResponseV1::_Internal::timestamp(const StreamAggregatesSpotExchangeRateResponseV1* msg) {
  return *msg->_impl_.timestamp_;
}
void StreamAggregatesSpotExchangeRateResponseV1::clear_sources() {
  _impl_.sources_.Clear();
}
void StreamAggregatesSpotExchangeRateResponseV1::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
}
StreamAggregatesSpotExchangeRateResponseV1::StreamAggregatesSpotExchangeRateResponseV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &StreamAggregatesSpotExchangeRateResponseV1::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:kaikosdk.StreamAggregatesSpotExchangeRateResponseV1)
}
StreamAggregatesSpotExchangeRateResponseV1::StreamAggregatesSpotExchangeRateResponseV1(const StreamAggregatesSpotExchangeRateResponseV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamAggregatesSpotExchangeRateResponseV1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.sources_)*/{}
    , decltype(_impl_.aggregate_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.price_){}
    , decltype(_impl_.sequence_id_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.timestamp_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sources_.MergeFrom(from._impl_.sources_);
  _impl_.aggregate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aggregate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_aggregate().empty()) {
    _this->_impl_.aggregate_.Set(from._internal_aggregate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.price_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_price().empty()) {
    _this->_impl_.price_.Set(from._internal_price(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sequence_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sequence_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sequence_id().empty()) {
    _this->_impl_.sequence_id_.Set(from._internal_sequence_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  // @@protoc_insertion_point(copy_constructor:kaikosdk.StreamAggregatesSpotExchangeRateResponseV1)
}

inline void StreamAggregatesSpotExchangeRateResponseV1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.sources_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.aggregate_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.price_){}
    , decltype(_impl_.sequence_id_){}
    , decltype(_impl_.uid_){}
    , decltype(_impl_.timestamp_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.aggregate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.aggregate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.price_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sequence_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sequence_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamAggregatesSpotExchangeRateResponseV1::~StreamAggregatesSpotExchangeRateResponseV1() {
  // @@protoc_insertion_point(destructor:kaikosdk.StreamAggregatesSpotExchangeRateResponseV1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void StreamAggregatesSpotExchangeRateResponseV1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sources_.Destruct();
  _impl_.sources_.~MapField();
  _impl_.aggregate_.Destroy();
  _impl_.code_.Destroy();
  _impl_.price_.Destroy();
  _impl_.sequence_id_.Destroy();
  _impl_.uid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void StreamAggregatesSpotExchangeRateResponseV1::ArenaDtor(void* object) {
  StreamAggregatesSpotExchangeRateResponseV1* _this = reinterpret_cast< StreamAggregatesSpotExchangeRateResponseV1* >(object);
  _this->_impl_.sources_.Destruct();
}
void StreamAggregatesSpotExchangeRateResponseV1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamAggregatesSpotExchangeRateResponseV1::Clear() {
// @@protoc_insertion_point(message_clear_start:kaikosdk.StreamAggregatesSpotExchangeRateResponseV1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sources_.Clear();
  _impl_.aggregate_.ClearToEmpty();
  _impl_.code_.ClearToEmpty();
  _impl_.price_.ClearToEmpty();
  _impl_.sequence_id_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.timestamp_ != nullptr) {
    delete _impl_.timestamp_;
  }
  _impl_.timestamp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamAggregatesSpotExchangeRateResponseV1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string aggregate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_aggregate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamAggregatesSpotExchangeRateResponseV1.aggregate"));
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamAggregatesSpotExchangeRateResponseV1.code"));
        } else
          goto handle_unusual;
        continue;
      // string price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamAggregatesSpotExchangeRateResponseV1.price"));
        } else
          goto handle_unusual;
        continue;
      // string sequence_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sequence_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamAggregatesSpotExchangeRateResponseV1.sequence_id"));
        } else
          goto handle_unusual;
        continue;
      // map<string, .kaikosdk.Source> sources = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.sources_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string uid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamAggregatesSpotExchangeRateResponseV1.uid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamAggregatesSpotExchangeRateResponseV1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaikosdk.StreamAggregatesSpotExchangeRateResponseV1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string aggregate = 1;
  if (!this->_internal_aggregate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_aggregate().data(), static_cast<int>(this->_internal_aggregate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamAggregatesSpotExchangeRateResponseV1.aggregate");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_aggregate(), target);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamAggregatesSpotExchangeRateResponseV1.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // string price = 3;
  if (!this->_internal_price().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_price().data(), static_cast<int>(this->_internal_price().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamAggregatesSpotExchangeRateResponseV1.price");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_price(), target);
  }

  // string sequence_id = 4;
  if (!this->_internal_sequence_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequence_id().data(), static_cast<int>(this->_internal_sequence_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamAggregatesSpotExchangeRateResponseV1.sequence_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sequence_id(), target);
  }

  // map<string, .kaikosdk.Source> sources = 5;
  if (!this->_internal_sources().empty()) {
    using MapType = ::_pb::Map<std::string, ::kaikosdk::Source>;
    using WireHelper = StreamAggregatesSpotExchangeRateResponseV1_SourcesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_sources();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "kaikosdk.StreamAggregatesSpotExchangeRateResponseV1.SourcesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .google.protobuf.Timestamp timestamp = 6;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // string uid = 7;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamAggregatesSpotExchangeRateResponseV1.uid");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaikosdk.StreamAggregatesSpotExchangeRateResponseV1)
  return target;
}

size_t StreamAggregatesSpotExchangeRateResponseV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaikosdk.StreamAggregatesSpotExchangeRateResponseV1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .kaikosdk.Source> sources = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sources_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kaikosdk::Source >::const_iterator
      it = this->_internal_sources().begin();
      it != this->_internal_sources().end(); ++it) {
    total_size += StreamAggregatesSpotExchangeRateResponseV1_SourcesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string aggregate = 1;
  if (!this->_internal_aggregate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aggregate());
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string price = 3;
  if (!this->_internal_price().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_price());
  }

  // string sequence_id = 4;
  if (!this->_internal_sequence_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequence_id());
  }

  // string uid = 7;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // .google.protobuf.Timestamp timestamp = 6;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamAggregatesSpotExchangeRateResponseV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamAggregatesSpotExchangeRateResponseV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamAggregatesSpotExchangeRateResponseV1::GetClassData() const { return &_class_data_; }


void StreamAggregatesSpotExchangeRateResponseV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamAggregatesSpotExchangeRateResponseV1*>(&to_msg);
  auto& from = static_cast<const StreamAggregatesSpotExchangeRateResponseV1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaikosdk.StreamAggregatesSpotExchangeRateResponseV1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sources_.MergeFrom(from._impl_.sources_);
  if (!from._internal_aggregate().empty()) {
    _this->_internal_set_aggregate(from._internal_aggregate());
  }
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (!from._internal_price().empty()) {
    _this->_internal_set_price(from._internal_price());
  }
  if (!from._internal_sequence_id().empty()) {
    _this->_internal_set_sequence_id(from._internal_sequence_id());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (from._internal_has_timestamp()) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamAggregatesSpotExchangeRateResponseV1::CopyFrom(const StreamAggregatesSpotExchangeRateResponseV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaikosdk.StreamAggregatesSpotExchangeRateResponseV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamAggregatesSpotExchangeRateResponseV1::IsInitialized() const {
  return true;
}

void StreamAggregatesSpotExchangeRateResponseV1::InternalSwap(StreamAggregatesSpotExchangeRateResponseV1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.sources_.InternalSwap(&other->_impl_.sources_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.aggregate_, lhs_arena,
      &other->_impl_.aggregate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.price_, lhs_arena,
      &other->_impl_.price_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sequence_id_, lhs_arena,
      &other->_impl_.sequence_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamAggregatesSpotExchangeRateResponseV1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2fstream_2faggregates_5fspot_5fexchange_5frate_5fv1_2fresponse_2eproto_getter, &descriptor_table_sdk_2fstream_2faggregates_5fspot_5fexchange_5frate_5fv1_2fresponse_2eproto_once,
      file_level_metadata_sdk_2fstream_2faggregates_5fspot_5fexchange_5frate_5fv1_2fresponse_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace kaikosdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1_SourcesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1_SourcesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1_SourcesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1*
Arena::CreateMaybeMessage< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
