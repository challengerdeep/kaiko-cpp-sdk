// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk/stream/market_update_v1/response.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "sdk/core/wrappers.pb.h"
#include "sdk/stream/market_update_v1/commodity.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto;
namespace kaikosdk {
class StreamMarketUpdateResponseV1;
struct StreamMarketUpdateResponseV1DefaultTypeInternal;
extern StreamMarketUpdateResponseV1DefaultTypeInternal _StreamMarketUpdateResponseV1_default_instance_;
class StreamMarketUpdateResponseV1_Snapshot;
struct StreamMarketUpdateResponseV1_SnapshotDefaultTypeInternal;
extern StreamMarketUpdateResponseV1_SnapshotDefaultTypeInternal _StreamMarketUpdateResponseV1_Snapshot_default_instance_;
class StreamMarketUpdateResponseV1_Snapshot_Order;
struct StreamMarketUpdateResponseV1_Snapshot_OrderDefaultTypeInternal;
extern StreamMarketUpdateResponseV1_Snapshot_OrderDefaultTypeInternal _StreamMarketUpdateResponseV1_Snapshot_Order_default_instance_;
}  // namespace kaikosdk
PROTOBUF_NAMESPACE_OPEN
template<> ::kaikosdk::StreamMarketUpdateResponseV1* Arena::CreateMaybeMessage<::kaikosdk::StreamMarketUpdateResponseV1>(Arena*);
template<> ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot* Arena::CreateMaybeMessage<::kaikosdk::StreamMarketUpdateResponseV1_Snapshot>(Arena*);
template<> ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order* Arena::CreateMaybeMessage<::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kaikosdk {

enum StreamMarketUpdateResponseV1_StreamMarketUpdateType : int {
  StreamMarketUpdateResponseV1_StreamMarketUpdateType_UNKNOWN = 0,
  StreamMarketUpdateResponseV1_StreamMarketUpdateType_TRADE_BUY = 1,
  StreamMarketUpdateResponseV1_StreamMarketUpdateType_TRADE_SELL = 2,
  StreamMarketUpdateResponseV1_StreamMarketUpdateType_BEST_ASK = 3,
  StreamMarketUpdateResponseV1_StreamMarketUpdateType_BEST_BID = 4,
  StreamMarketUpdateResponseV1_StreamMarketUpdateType_UPDATED_ASK = 5,
  StreamMarketUpdateResponseV1_StreamMarketUpdateType_UPDATED_BID = 6,
  StreamMarketUpdateResponseV1_StreamMarketUpdateType_SNAPSHOT = 7,
  StreamMarketUpdateResponseV1_StreamMarketUpdateType_StreamMarketUpdateResponseV1_StreamMarketUpdateType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StreamMarketUpdateResponseV1_StreamMarketUpdateType_StreamMarketUpdateResponseV1_StreamMarketUpdateType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StreamMarketUpdateResponseV1_StreamMarketUpdateType_IsValid(int value);
constexpr StreamMarketUpdateResponseV1_StreamMarketUpdateType StreamMarketUpdateResponseV1_StreamMarketUpdateType_StreamMarketUpdateType_MIN = StreamMarketUpdateResponseV1_StreamMarketUpdateType_UNKNOWN;
constexpr StreamMarketUpdateResponseV1_StreamMarketUpdateType StreamMarketUpdateResponseV1_StreamMarketUpdateType_StreamMarketUpdateType_MAX = StreamMarketUpdateResponseV1_StreamMarketUpdateType_SNAPSHOT;
constexpr int StreamMarketUpdateResponseV1_StreamMarketUpdateType_StreamMarketUpdateType_ARRAYSIZE = StreamMarketUpdateResponseV1_StreamMarketUpdateType_StreamMarketUpdateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamMarketUpdateResponseV1_StreamMarketUpdateType_descriptor();
template<typename T>
inline const std::string& StreamMarketUpdateResponseV1_StreamMarketUpdateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StreamMarketUpdateResponseV1_StreamMarketUpdateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StreamMarketUpdateResponseV1_StreamMarketUpdateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StreamMarketUpdateResponseV1_StreamMarketUpdateType_descriptor(), enum_t_value);
}
inline bool StreamMarketUpdateResponseV1_StreamMarketUpdateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StreamMarketUpdateResponseV1_StreamMarketUpdateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StreamMarketUpdateResponseV1_StreamMarketUpdateType>(
    StreamMarketUpdateResponseV1_StreamMarketUpdateType_descriptor(), name, value);
}
// ===================================================================

class StreamMarketUpdateResponseV1_Snapshot_Order final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.StreamMarketUpdateResponseV1.Snapshot.Order) */ {
 public:
  inline StreamMarketUpdateResponseV1_Snapshot_Order() : StreamMarketUpdateResponseV1_Snapshot_Order(nullptr) {}
  ~StreamMarketUpdateResponseV1_Snapshot_Order() override;
  explicit constexpr StreamMarketUpdateResponseV1_Snapshot_Order(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamMarketUpdateResponseV1_Snapshot_Order(const StreamMarketUpdateResponseV1_Snapshot_Order& from);
  StreamMarketUpdateResponseV1_Snapshot_Order(StreamMarketUpdateResponseV1_Snapshot_Order&& from) noexcept
    : StreamMarketUpdateResponseV1_Snapshot_Order() {
    *this = ::std::move(from);
  }

  inline StreamMarketUpdateResponseV1_Snapshot_Order& operator=(const StreamMarketUpdateResponseV1_Snapshot_Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamMarketUpdateResponseV1_Snapshot_Order& operator=(StreamMarketUpdateResponseV1_Snapshot_Order&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamMarketUpdateResponseV1_Snapshot_Order& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamMarketUpdateResponseV1_Snapshot_Order* internal_default_instance() {
    return reinterpret_cast<const StreamMarketUpdateResponseV1_Snapshot_Order*>(
               &_StreamMarketUpdateResponseV1_Snapshot_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StreamMarketUpdateResponseV1_Snapshot_Order& a, StreamMarketUpdateResponseV1_Snapshot_Order& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamMarketUpdateResponseV1_Snapshot_Order* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamMarketUpdateResponseV1_Snapshot_Order* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamMarketUpdateResponseV1_Snapshot_Order* New() const final {
    return new StreamMarketUpdateResponseV1_Snapshot_Order();
  }

  StreamMarketUpdateResponseV1_Snapshot_Order* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamMarketUpdateResponseV1_Snapshot_Order>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamMarketUpdateResponseV1_Snapshot_Order& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StreamMarketUpdateResponseV1_Snapshot_Order& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamMarketUpdateResponseV1_Snapshot_Order* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.StreamMarketUpdateResponseV1.Snapshot.Order";
  }
  protected:
  explicit StreamMarketUpdateResponseV1_Snapshot_Order(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
    kPriceFieldNumber = 2,
  };
  // double amount = 1;
  void clear_amount();
  double amount() const;
  void set_amount(double value);
  private:
  double _internal_amount() const;
  void _internal_set_amount(double value);
  public:

  // double price = 2;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // @@protoc_insertion_point(class_scope:kaikosdk.StreamMarketUpdateResponseV1.Snapshot.Order)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double amount_;
  double price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto;
};
// -------------------------------------------------------------------

class StreamMarketUpdateResponseV1_Snapshot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.StreamMarketUpdateResponseV1.Snapshot) */ {
 public:
  inline StreamMarketUpdateResponseV1_Snapshot() : StreamMarketUpdateResponseV1_Snapshot(nullptr) {}
  ~StreamMarketUpdateResponseV1_Snapshot() override;
  explicit constexpr StreamMarketUpdateResponseV1_Snapshot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamMarketUpdateResponseV1_Snapshot(const StreamMarketUpdateResponseV1_Snapshot& from);
  StreamMarketUpdateResponseV1_Snapshot(StreamMarketUpdateResponseV1_Snapshot&& from) noexcept
    : StreamMarketUpdateResponseV1_Snapshot() {
    *this = ::std::move(from);
  }

  inline StreamMarketUpdateResponseV1_Snapshot& operator=(const StreamMarketUpdateResponseV1_Snapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamMarketUpdateResponseV1_Snapshot& operator=(StreamMarketUpdateResponseV1_Snapshot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamMarketUpdateResponseV1_Snapshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamMarketUpdateResponseV1_Snapshot* internal_default_instance() {
    return reinterpret_cast<const StreamMarketUpdateResponseV1_Snapshot*>(
               &_StreamMarketUpdateResponseV1_Snapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StreamMarketUpdateResponseV1_Snapshot& a, StreamMarketUpdateResponseV1_Snapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamMarketUpdateResponseV1_Snapshot* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamMarketUpdateResponseV1_Snapshot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamMarketUpdateResponseV1_Snapshot* New() const final {
    return new StreamMarketUpdateResponseV1_Snapshot();
  }

  StreamMarketUpdateResponseV1_Snapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamMarketUpdateResponseV1_Snapshot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamMarketUpdateResponseV1_Snapshot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StreamMarketUpdateResponseV1_Snapshot& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamMarketUpdateResponseV1_Snapshot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.StreamMarketUpdateResponseV1.Snapshot";
  }
  protected:
  explicit StreamMarketUpdateResponseV1_Snapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StreamMarketUpdateResponseV1_Snapshot_Order Order;

  // accessors -------------------------------------------------------

  enum : int {
    kAsksFieldNumber = 1,
    kBidsFieldNumber = 2,
  };
  // repeated .kaikosdk.StreamMarketUpdateResponseV1.Snapshot.Order asks = 1;
  int asks_size() const;
  private:
  int _internal_asks_size() const;
  public:
  void clear_asks();
  ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order* mutable_asks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order >*
      mutable_asks();
  private:
  const ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order& _internal_asks(int index) const;
  ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order* _internal_add_asks();
  public:
  const ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order& asks(int index) const;
  ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order* add_asks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order >&
      asks() const;

  // repeated .kaikosdk.StreamMarketUpdateResponseV1.Snapshot.Order bids = 2;
  int bids_size() const;
  private:
  int _internal_bids_size() const;
  public:
  void clear_bids();
  ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order* mutable_bids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order >*
      mutable_bids();
  private:
  const ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order& _internal_bids(int index) const;
  ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order* _internal_add_bids();
  public:
  const ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order& bids(int index) const;
  ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order* add_bids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order >&
      bids() const;

  // @@protoc_insertion_point(class_scope:kaikosdk.StreamMarketUpdateResponseV1.Snapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order > asks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order > bids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto;
};
// -------------------------------------------------------------------

class StreamMarketUpdateResponseV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.StreamMarketUpdateResponseV1) */ {
 public:
  inline StreamMarketUpdateResponseV1() : StreamMarketUpdateResponseV1(nullptr) {}
  ~StreamMarketUpdateResponseV1() override;
  explicit constexpr StreamMarketUpdateResponseV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamMarketUpdateResponseV1(const StreamMarketUpdateResponseV1& from);
  StreamMarketUpdateResponseV1(StreamMarketUpdateResponseV1&& from) noexcept
    : StreamMarketUpdateResponseV1() {
    *this = ::std::move(from);
  }

  inline StreamMarketUpdateResponseV1& operator=(const StreamMarketUpdateResponseV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamMarketUpdateResponseV1& operator=(StreamMarketUpdateResponseV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamMarketUpdateResponseV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamMarketUpdateResponseV1* internal_default_instance() {
    return reinterpret_cast<const StreamMarketUpdateResponseV1*>(
               &_StreamMarketUpdateResponseV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StreamMarketUpdateResponseV1& a, StreamMarketUpdateResponseV1& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamMarketUpdateResponseV1* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamMarketUpdateResponseV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamMarketUpdateResponseV1* New() const final {
    return new StreamMarketUpdateResponseV1();
  }

  StreamMarketUpdateResponseV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamMarketUpdateResponseV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamMarketUpdateResponseV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StreamMarketUpdateResponseV1& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamMarketUpdateResponseV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.StreamMarketUpdateResponseV1";
  }
  protected:
  explicit StreamMarketUpdateResponseV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StreamMarketUpdateResponseV1_Snapshot Snapshot;

  typedef StreamMarketUpdateResponseV1_StreamMarketUpdateType StreamMarketUpdateType;
  static constexpr StreamMarketUpdateType UNKNOWN =
    StreamMarketUpdateResponseV1_StreamMarketUpdateType_UNKNOWN;
  static constexpr StreamMarketUpdateType TRADE_BUY =
    StreamMarketUpdateResponseV1_StreamMarketUpdateType_TRADE_BUY;
  static constexpr StreamMarketUpdateType TRADE_SELL =
    StreamMarketUpdateResponseV1_StreamMarketUpdateType_TRADE_SELL;
  static constexpr StreamMarketUpdateType BEST_ASK =
    StreamMarketUpdateResponseV1_StreamMarketUpdateType_BEST_ASK;
  static constexpr StreamMarketUpdateType BEST_BID =
    StreamMarketUpdateResponseV1_StreamMarketUpdateType_BEST_BID;
  static constexpr StreamMarketUpdateType UPDATED_ASK =
    StreamMarketUpdateResponseV1_StreamMarketUpdateType_UPDATED_ASK;
  static constexpr StreamMarketUpdateType UPDATED_BID =
    StreamMarketUpdateResponseV1_StreamMarketUpdateType_UPDATED_BID;
  static constexpr StreamMarketUpdateType SNAPSHOT =
    StreamMarketUpdateResponseV1_StreamMarketUpdateType_SNAPSHOT;
  static inline bool StreamMarketUpdateType_IsValid(int value) {
    return StreamMarketUpdateResponseV1_StreamMarketUpdateType_IsValid(value);
  }
  static constexpr StreamMarketUpdateType StreamMarketUpdateType_MIN =
    StreamMarketUpdateResponseV1_StreamMarketUpdateType_StreamMarketUpdateType_MIN;
  static constexpr StreamMarketUpdateType StreamMarketUpdateType_MAX =
    StreamMarketUpdateResponseV1_StreamMarketUpdateType_StreamMarketUpdateType_MAX;
  static constexpr int StreamMarketUpdateType_ARRAYSIZE =
    StreamMarketUpdateResponseV1_StreamMarketUpdateType_StreamMarketUpdateType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StreamMarketUpdateType_descriptor() {
    return StreamMarketUpdateResponseV1_StreamMarketUpdateType_descriptor();
  }
  template<typename T>
  static inline const std::string& StreamMarketUpdateType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StreamMarketUpdateType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StreamMarketUpdateType_Name.");
    return StreamMarketUpdateResponseV1_StreamMarketUpdateType_Name(enum_t_value);
  }
  static inline bool StreamMarketUpdateType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      StreamMarketUpdateType* value) {
    return StreamMarketUpdateResponseV1_StreamMarketUpdateType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kClassFieldNumber = 3,
    kCodeFieldNumber = 4,
    kExchangeFieldNumber = 5,
    kSequenceIdFieldNumber = 6,
    kIdFieldNumber = 7,
    kTsExchangeFieldNumber = 9,
    kTsCollectionFieldNumber = 10,
    kTsEventFieldNumber = 11,
    kSnapshotFieldNumber = 13,
    kAmountFieldNumber = 2,
    kCommodityFieldNumber = 1,
    kUpdateTypeFieldNumber = 12,
    kPriceFieldNumber = 8,
  };
  // string class = 3;
  void clear_class_();
  const std::string& class_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_class_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_class_();
  PROTOBUF_MUST_USE_RESULT std::string* release_class_();
  void set_allocated_class_(std::string* class_);
  private:
  const std::string& _internal_class_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_(const std::string& value);
  std::string* _internal_mutable_class_();
  public:

  // string code = 4;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_MUST_USE_RESULT std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string exchange = 5;
  void clear_exchange();
  const std::string& exchange() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exchange(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exchange();
  PROTOBUF_MUST_USE_RESULT std::string* release_exchange();
  void set_allocated_exchange(std::string* exchange);
  private:
  const std::string& _internal_exchange() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange(const std::string& value);
  std::string* _internal_mutable_exchange();
  public:

  // string sequence_id = 6;
  void clear_sequence_id();
  const std::string& sequence_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sequence_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sequence_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_sequence_id();
  void set_allocated_sequence_id(std::string* sequence_id);
  private:
  const std::string& _internal_sequence_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sequence_id(const std::string& value);
  std::string* _internal_mutable_sequence_id();
  public:

  // string id = 7;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .kaikosdk.TimestampValue ts_exchange = 9;
  bool has_ts_exchange() const;
  private:
  bool _internal_has_ts_exchange() const;
  public:
  void clear_ts_exchange();
  const ::kaikosdk::TimestampValue& ts_exchange() const;
  PROTOBUF_MUST_USE_RESULT ::kaikosdk::TimestampValue* release_ts_exchange();
  ::kaikosdk::TimestampValue* mutable_ts_exchange();
  void set_allocated_ts_exchange(::kaikosdk::TimestampValue* ts_exchange);
  private:
  const ::kaikosdk::TimestampValue& _internal_ts_exchange() const;
  ::kaikosdk::TimestampValue* _internal_mutable_ts_exchange();
  public:
  void unsafe_arena_set_allocated_ts_exchange(
      ::kaikosdk::TimestampValue* ts_exchange);
  ::kaikosdk::TimestampValue* unsafe_arena_release_ts_exchange();

  // .kaikosdk.TimestampValue ts_collection = 10;
  bool has_ts_collection() const;
  private:
  bool _internal_has_ts_collection() const;
  public:
  void clear_ts_collection();
  const ::kaikosdk::TimestampValue& ts_collection() const;
  PROTOBUF_MUST_USE_RESULT ::kaikosdk::TimestampValue* release_ts_collection();
  ::kaikosdk::TimestampValue* mutable_ts_collection();
  void set_allocated_ts_collection(::kaikosdk::TimestampValue* ts_collection);
  private:
  const ::kaikosdk::TimestampValue& _internal_ts_collection() const;
  ::kaikosdk::TimestampValue* _internal_mutable_ts_collection();
  public:
  void unsafe_arena_set_allocated_ts_collection(
      ::kaikosdk::TimestampValue* ts_collection);
  ::kaikosdk::TimestampValue* unsafe_arena_release_ts_collection();

  // .google.protobuf.Timestamp ts_event = 11;
  bool has_ts_event() const;
  private:
  bool _internal_has_ts_event() const;
  public:
  void clear_ts_event();
  const PROTOBUF_NAMESPACE_ID::Timestamp& ts_event() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_ts_event();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_ts_event();
  void set_allocated_ts_event(PROTOBUF_NAMESPACE_ID::Timestamp* ts_event);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_ts_event() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_ts_event();
  public:
  void unsafe_arena_set_allocated_ts_event(
      PROTOBUF_NAMESPACE_ID::Timestamp* ts_event);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_ts_event();

  // .kaikosdk.StreamMarketUpdateResponseV1.Snapshot snapshot = 13;
  bool has_snapshot() const;
  private:
  bool _internal_has_snapshot() const;
  public:
  void clear_snapshot();
  const ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot& snapshot() const;
  PROTOBUF_MUST_USE_RESULT ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot* release_snapshot();
  ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot* mutable_snapshot();
  void set_allocated_snapshot(::kaikosdk::StreamMarketUpdateResponseV1_Snapshot* snapshot);
  private:
  const ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot& _internal_snapshot() const;
  ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot* _internal_mutable_snapshot();
  public:
  void unsafe_arena_set_allocated_snapshot(
      ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot* snapshot);
  ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot* unsafe_arena_release_snapshot();

  // double amount = 2;
  void clear_amount();
  double amount() const;
  void set_amount(double value);
  private:
  double _internal_amount() const;
  void _internal_set_amount(double value);
  public:

  // .kaikosdk.StreamMarketUpdateCommodity commodity = 1;
  void clear_commodity();
  ::kaikosdk::StreamMarketUpdateCommodity commodity() const;
  void set_commodity(::kaikosdk::StreamMarketUpdateCommodity value);
  private:
  ::kaikosdk::StreamMarketUpdateCommodity _internal_commodity() const;
  void _internal_set_commodity(::kaikosdk::StreamMarketUpdateCommodity value);
  public:

  // .kaikosdk.StreamMarketUpdateResponseV1.StreamMarketUpdateType update_type = 12;
  void clear_update_type();
  ::kaikosdk::StreamMarketUpdateResponseV1_StreamMarketUpdateType update_type() const;
  void set_update_type(::kaikosdk::StreamMarketUpdateResponseV1_StreamMarketUpdateType value);
  private:
  ::kaikosdk::StreamMarketUpdateResponseV1_StreamMarketUpdateType _internal_update_type() const;
  void _internal_set_update_type(::kaikosdk::StreamMarketUpdateResponseV1_StreamMarketUpdateType value);
  public:

  // double price = 8;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // @@protoc_insertion_point(class_scope:kaikosdk.StreamMarketUpdateResponseV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sequence_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::kaikosdk::TimestampValue* ts_exchange_;
  ::kaikosdk::TimestampValue* ts_collection_;
  PROTOBUF_NAMESPACE_ID::Timestamp* ts_event_;
  ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot* snapshot_;
  double amount_;
  int commodity_;
  int update_type_;
  double price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StreamMarketUpdateResponseV1_Snapshot_Order

// double amount = 1;
inline void StreamMarketUpdateResponseV1_Snapshot_Order::clear_amount() {
  amount_ = 0;
}
inline double StreamMarketUpdateResponseV1_Snapshot_Order::_internal_amount() const {
  return amount_;
}
inline double StreamMarketUpdateResponseV1_Snapshot_Order::amount() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamMarketUpdateResponseV1.Snapshot.Order.amount)
  return _internal_amount();
}
inline void StreamMarketUpdateResponseV1_Snapshot_Order::_internal_set_amount(double value) {
  
  amount_ = value;
}
inline void StreamMarketUpdateResponseV1_Snapshot_Order::set_amount(double value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamMarketUpdateResponseV1.Snapshot.Order.amount)
}

// double price = 2;
inline void StreamMarketUpdateResponseV1_Snapshot_Order::clear_price() {
  price_ = 0;
}
inline double StreamMarketUpdateResponseV1_Snapshot_Order::_internal_price() const {
  return price_;
}
inline double StreamMarketUpdateResponseV1_Snapshot_Order::price() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamMarketUpdateResponseV1.Snapshot.Order.price)
  return _internal_price();
}
inline void StreamMarketUpdateResponseV1_Snapshot_Order::_internal_set_price(double value) {
  
  price_ = value;
}
inline void StreamMarketUpdateResponseV1_Snapshot_Order::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamMarketUpdateResponseV1.Snapshot.Order.price)
}

// -------------------------------------------------------------------

// StreamMarketUpdateResponseV1_Snapshot

// repeated .kaikosdk.StreamMarketUpdateResponseV1.Snapshot.Order asks = 1;
inline int StreamMarketUpdateResponseV1_Snapshot::_internal_asks_size() const {
  return asks_.size();
}
inline int StreamMarketUpdateResponseV1_Snapshot::asks_size() const {
  return _internal_asks_size();
}
inline void StreamMarketUpdateResponseV1_Snapshot::clear_asks() {
  asks_.Clear();
}
inline ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order* StreamMarketUpdateResponseV1_Snapshot::mutable_asks(int index) {
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamMarketUpdateResponseV1.Snapshot.asks)
  return asks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order >*
StreamMarketUpdateResponseV1_Snapshot::mutable_asks() {
  // @@protoc_insertion_point(field_mutable_list:kaikosdk.StreamMarketUpdateResponseV1.Snapshot.asks)
  return &asks_;
}
inline const ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order& StreamMarketUpdateResponseV1_Snapshot::_internal_asks(int index) const {
  return asks_.Get(index);
}
inline const ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order& StreamMarketUpdateResponseV1_Snapshot::asks(int index) const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamMarketUpdateResponseV1.Snapshot.asks)
  return _internal_asks(index);
}
inline ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order* StreamMarketUpdateResponseV1_Snapshot::_internal_add_asks() {
  return asks_.Add();
}
inline ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order* StreamMarketUpdateResponseV1_Snapshot::add_asks() {
  ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order* _add = _internal_add_asks();
  // @@protoc_insertion_point(field_add:kaikosdk.StreamMarketUpdateResponseV1.Snapshot.asks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order >&
StreamMarketUpdateResponseV1_Snapshot::asks() const {
  // @@protoc_insertion_point(field_list:kaikosdk.StreamMarketUpdateResponseV1.Snapshot.asks)
  return asks_;
}

// repeated .kaikosdk.StreamMarketUpdateResponseV1.Snapshot.Order bids = 2;
inline int StreamMarketUpdateResponseV1_Snapshot::_internal_bids_size() const {
  return bids_.size();
}
inline int StreamMarketUpdateResponseV1_Snapshot::bids_size() const {
  return _internal_bids_size();
}
inline void StreamMarketUpdateResponseV1_Snapshot::clear_bids() {
  bids_.Clear();
}
inline ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order* StreamMarketUpdateResponseV1_Snapshot::mutable_bids(int index) {
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamMarketUpdateResponseV1.Snapshot.bids)
  return bids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order >*
StreamMarketUpdateResponseV1_Snapshot::mutable_bids() {
  // @@protoc_insertion_point(field_mutable_list:kaikosdk.StreamMarketUpdateResponseV1.Snapshot.bids)
  return &bids_;
}
inline const ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order& StreamMarketUpdateResponseV1_Snapshot::_internal_bids(int index) const {
  return bids_.Get(index);
}
inline const ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order& StreamMarketUpdateResponseV1_Snapshot::bids(int index) const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamMarketUpdateResponseV1.Snapshot.bids)
  return _internal_bids(index);
}
inline ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order* StreamMarketUpdateResponseV1_Snapshot::_internal_add_bids() {
  return bids_.Add();
}
inline ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order* StreamMarketUpdateResponseV1_Snapshot::add_bids() {
  ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order* _add = _internal_add_bids();
  // @@protoc_insertion_point(field_add:kaikosdk.StreamMarketUpdateResponseV1.Snapshot.bids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order >&
StreamMarketUpdateResponseV1_Snapshot::bids() const {
  // @@protoc_insertion_point(field_list:kaikosdk.StreamMarketUpdateResponseV1.Snapshot.bids)
  return bids_;
}

// -------------------------------------------------------------------

// StreamMarketUpdateResponseV1

// .kaikosdk.StreamMarketUpdateCommodity commodity = 1;
inline void StreamMarketUpdateResponseV1::clear_commodity() {
  commodity_ = 0;
}
inline ::kaikosdk::StreamMarketUpdateCommodity StreamMarketUpdateResponseV1::_internal_commodity() const {
  return static_cast< ::kaikosdk::StreamMarketUpdateCommodity >(commodity_);
}
inline ::kaikosdk::StreamMarketUpdateCommodity StreamMarketUpdateResponseV1::commodity() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamMarketUpdateResponseV1.commodity)
  return _internal_commodity();
}
inline void StreamMarketUpdateResponseV1::_internal_set_commodity(::kaikosdk::StreamMarketUpdateCommodity value) {
  
  commodity_ = value;
}
inline void StreamMarketUpdateResponseV1::set_commodity(::kaikosdk::StreamMarketUpdateCommodity value) {
  _internal_set_commodity(value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamMarketUpdateResponseV1.commodity)
}

// double amount = 2;
inline void StreamMarketUpdateResponseV1::clear_amount() {
  amount_ = 0;
}
inline double StreamMarketUpdateResponseV1::_internal_amount() const {
  return amount_;
}
inline double StreamMarketUpdateResponseV1::amount() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamMarketUpdateResponseV1.amount)
  return _internal_amount();
}
inline void StreamMarketUpdateResponseV1::_internal_set_amount(double value) {
  
  amount_ = value;
}
inline void StreamMarketUpdateResponseV1::set_amount(double value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamMarketUpdateResponseV1.amount)
}

// string class = 3;
inline void StreamMarketUpdateResponseV1::clear_class_() {
  class__.ClearToEmpty();
}
inline const std::string& StreamMarketUpdateResponseV1::class_() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamMarketUpdateResponseV1.class)
  return _internal_class_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamMarketUpdateResponseV1::set_class_(ArgT0&& arg0, ArgT... args) {
 
 class__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamMarketUpdateResponseV1.class)
}
inline std::string* StreamMarketUpdateResponseV1::mutable_class_() {
  std::string* _s = _internal_mutable_class_();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamMarketUpdateResponseV1.class)
  return _s;
}
inline const std::string& StreamMarketUpdateResponseV1::_internal_class_() const {
  return class__.Get();
}
inline void StreamMarketUpdateResponseV1::_internal_set_class_(const std::string& value) {
  
  class__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StreamMarketUpdateResponseV1::_internal_mutable_class_() {
  
  return class__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StreamMarketUpdateResponseV1::release_class_() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamMarketUpdateResponseV1.class)
  return class__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StreamMarketUpdateResponseV1::set_allocated_class_(std::string* class_) {
  if (class_ != nullptr) {
    
  } else {
    
  }
  class__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), class_,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamMarketUpdateResponseV1.class)
}

// string code = 4;
inline void StreamMarketUpdateResponseV1::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& StreamMarketUpdateResponseV1::code() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamMarketUpdateResponseV1.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamMarketUpdateResponseV1::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamMarketUpdateResponseV1.code)
}
inline std::string* StreamMarketUpdateResponseV1::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamMarketUpdateResponseV1.code)
  return _s;
}
inline const std::string& StreamMarketUpdateResponseV1::_internal_code() const {
  return code_.Get();
}
inline void StreamMarketUpdateResponseV1::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StreamMarketUpdateResponseV1::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StreamMarketUpdateResponseV1::release_code() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamMarketUpdateResponseV1.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StreamMarketUpdateResponseV1::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamMarketUpdateResponseV1.code)
}

// string exchange = 5;
inline void StreamMarketUpdateResponseV1::clear_exchange() {
  exchange_.ClearToEmpty();
}
inline const std::string& StreamMarketUpdateResponseV1::exchange() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamMarketUpdateResponseV1.exchange)
  return _internal_exchange();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamMarketUpdateResponseV1::set_exchange(ArgT0&& arg0, ArgT... args) {
 
 exchange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamMarketUpdateResponseV1.exchange)
}
inline std::string* StreamMarketUpdateResponseV1::mutable_exchange() {
  std::string* _s = _internal_mutable_exchange();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamMarketUpdateResponseV1.exchange)
  return _s;
}
inline const std::string& StreamMarketUpdateResponseV1::_internal_exchange() const {
  return exchange_.Get();
}
inline void StreamMarketUpdateResponseV1::_internal_set_exchange(const std::string& value) {
  
  exchange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StreamMarketUpdateResponseV1::_internal_mutable_exchange() {
  
  return exchange_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StreamMarketUpdateResponseV1::release_exchange() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamMarketUpdateResponseV1.exchange)
  return exchange_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StreamMarketUpdateResponseV1::set_allocated_exchange(std::string* exchange) {
  if (exchange != nullptr) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamMarketUpdateResponseV1.exchange)
}

// string sequence_id = 6;
inline void StreamMarketUpdateResponseV1::clear_sequence_id() {
  sequence_id_.ClearToEmpty();
}
inline const std::string& StreamMarketUpdateResponseV1::sequence_id() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamMarketUpdateResponseV1.sequence_id)
  return _internal_sequence_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamMarketUpdateResponseV1::set_sequence_id(ArgT0&& arg0, ArgT... args) {
 
 sequence_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamMarketUpdateResponseV1.sequence_id)
}
inline std::string* StreamMarketUpdateResponseV1::mutable_sequence_id() {
  std::string* _s = _internal_mutable_sequence_id();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamMarketUpdateResponseV1.sequence_id)
  return _s;
}
inline const std::string& StreamMarketUpdateResponseV1::_internal_sequence_id() const {
  return sequence_id_.Get();
}
inline void StreamMarketUpdateResponseV1::_internal_set_sequence_id(const std::string& value) {
  
  sequence_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StreamMarketUpdateResponseV1::_internal_mutable_sequence_id() {
  
  return sequence_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StreamMarketUpdateResponseV1::release_sequence_id() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamMarketUpdateResponseV1.sequence_id)
  return sequence_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StreamMarketUpdateResponseV1::set_allocated_sequence_id(std::string* sequence_id) {
  if (sequence_id != nullptr) {
    
  } else {
    
  }
  sequence_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sequence_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamMarketUpdateResponseV1.sequence_id)
}

// string id = 7;
inline void StreamMarketUpdateResponseV1::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& StreamMarketUpdateResponseV1::id() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamMarketUpdateResponseV1.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamMarketUpdateResponseV1::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamMarketUpdateResponseV1.id)
}
inline std::string* StreamMarketUpdateResponseV1::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamMarketUpdateResponseV1.id)
  return _s;
}
inline const std::string& StreamMarketUpdateResponseV1::_internal_id() const {
  return id_.Get();
}
inline void StreamMarketUpdateResponseV1::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StreamMarketUpdateResponseV1::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StreamMarketUpdateResponseV1::release_id() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamMarketUpdateResponseV1.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StreamMarketUpdateResponseV1::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamMarketUpdateResponseV1.id)
}

// double price = 8;
inline void StreamMarketUpdateResponseV1::clear_price() {
  price_ = 0;
}
inline double StreamMarketUpdateResponseV1::_internal_price() const {
  return price_;
}
inline double StreamMarketUpdateResponseV1::price() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamMarketUpdateResponseV1.price)
  return _internal_price();
}
inline void StreamMarketUpdateResponseV1::_internal_set_price(double value) {
  
  price_ = value;
}
inline void StreamMarketUpdateResponseV1::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamMarketUpdateResponseV1.price)
}

// .kaikosdk.TimestampValue ts_exchange = 9;
inline bool StreamMarketUpdateResponseV1::_internal_has_ts_exchange() const {
  return this != internal_default_instance() && ts_exchange_ != nullptr;
}
inline bool StreamMarketUpdateResponseV1::has_ts_exchange() const {
  return _internal_has_ts_exchange();
}
inline const ::kaikosdk::TimestampValue& StreamMarketUpdateResponseV1::_internal_ts_exchange() const {
  const ::kaikosdk::TimestampValue* p = ts_exchange_;
  return p != nullptr ? *p : reinterpret_cast<const ::kaikosdk::TimestampValue&>(
      ::kaikosdk::_TimestampValue_default_instance_);
}
inline const ::kaikosdk::TimestampValue& StreamMarketUpdateResponseV1::ts_exchange() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamMarketUpdateResponseV1.ts_exchange)
  return _internal_ts_exchange();
}
inline void StreamMarketUpdateResponseV1::unsafe_arena_set_allocated_ts_exchange(
    ::kaikosdk::TimestampValue* ts_exchange) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_exchange_);
  }
  ts_exchange_ = ts_exchange;
  if (ts_exchange) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamMarketUpdateResponseV1.ts_exchange)
}
inline ::kaikosdk::TimestampValue* StreamMarketUpdateResponseV1::release_ts_exchange() {
  
  ::kaikosdk::TimestampValue* temp = ts_exchange_;
  ts_exchange_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kaikosdk::TimestampValue* StreamMarketUpdateResponseV1::unsafe_arena_release_ts_exchange() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamMarketUpdateResponseV1.ts_exchange)
  
  ::kaikosdk::TimestampValue* temp = ts_exchange_;
  ts_exchange_ = nullptr;
  return temp;
}
inline ::kaikosdk::TimestampValue* StreamMarketUpdateResponseV1::_internal_mutable_ts_exchange() {
  
  if (ts_exchange_ == nullptr) {
    auto* p = CreateMaybeMessage<::kaikosdk::TimestampValue>(GetArenaForAllocation());
    ts_exchange_ = p;
  }
  return ts_exchange_;
}
inline ::kaikosdk::TimestampValue* StreamMarketUpdateResponseV1::mutable_ts_exchange() {
  ::kaikosdk::TimestampValue* _msg = _internal_mutable_ts_exchange();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamMarketUpdateResponseV1.ts_exchange)
  return _msg;
}
inline void StreamMarketUpdateResponseV1::set_allocated_ts_exchange(::kaikosdk::TimestampValue* ts_exchange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_exchange_);
  }
  if (ts_exchange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_exchange));
    if (message_arena != submessage_arena) {
      ts_exchange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts_exchange, submessage_arena);
    }
    
  } else {
    
  }
  ts_exchange_ = ts_exchange;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamMarketUpdateResponseV1.ts_exchange)
}

// .kaikosdk.TimestampValue ts_collection = 10;
inline bool StreamMarketUpdateResponseV1::_internal_has_ts_collection() const {
  return this != internal_default_instance() && ts_collection_ != nullptr;
}
inline bool StreamMarketUpdateResponseV1::has_ts_collection() const {
  return _internal_has_ts_collection();
}
inline const ::kaikosdk::TimestampValue& StreamMarketUpdateResponseV1::_internal_ts_collection() const {
  const ::kaikosdk::TimestampValue* p = ts_collection_;
  return p != nullptr ? *p : reinterpret_cast<const ::kaikosdk::TimestampValue&>(
      ::kaikosdk::_TimestampValue_default_instance_);
}
inline const ::kaikosdk::TimestampValue& StreamMarketUpdateResponseV1::ts_collection() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamMarketUpdateResponseV1.ts_collection)
  return _internal_ts_collection();
}
inline void StreamMarketUpdateResponseV1::unsafe_arena_set_allocated_ts_collection(
    ::kaikosdk::TimestampValue* ts_collection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_collection_);
  }
  ts_collection_ = ts_collection;
  if (ts_collection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamMarketUpdateResponseV1.ts_collection)
}
inline ::kaikosdk::TimestampValue* StreamMarketUpdateResponseV1::release_ts_collection() {
  
  ::kaikosdk::TimestampValue* temp = ts_collection_;
  ts_collection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kaikosdk::TimestampValue* StreamMarketUpdateResponseV1::unsafe_arena_release_ts_collection() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamMarketUpdateResponseV1.ts_collection)
  
  ::kaikosdk::TimestampValue* temp = ts_collection_;
  ts_collection_ = nullptr;
  return temp;
}
inline ::kaikosdk::TimestampValue* StreamMarketUpdateResponseV1::_internal_mutable_ts_collection() {
  
  if (ts_collection_ == nullptr) {
    auto* p = CreateMaybeMessage<::kaikosdk::TimestampValue>(GetArenaForAllocation());
    ts_collection_ = p;
  }
  return ts_collection_;
}
inline ::kaikosdk::TimestampValue* StreamMarketUpdateResponseV1::mutable_ts_collection() {
  ::kaikosdk::TimestampValue* _msg = _internal_mutable_ts_collection();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamMarketUpdateResponseV1.ts_collection)
  return _msg;
}
inline void StreamMarketUpdateResponseV1::set_allocated_ts_collection(::kaikosdk::TimestampValue* ts_collection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_collection_);
  }
  if (ts_collection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_collection));
    if (message_arena != submessage_arena) {
      ts_collection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts_collection, submessage_arena);
    }
    
  } else {
    
  }
  ts_collection_ = ts_collection;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamMarketUpdateResponseV1.ts_collection)
}

// .google.protobuf.Timestamp ts_event = 11;
inline bool StreamMarketUpdateResponseV1::_internal_has_ts_event() const {
  return this != internal_default_instance() && ts_event_ != nullptr;
}
inline bool StreamMarketUpdateResponseV1::has_ts_event() const {
  return _internal_has_ts_event();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StreamMarketUpdateResponseV1::_internal_ts_event() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = ts_event_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StreamMarketUpdateResponseV1::ts_event() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamMarketUpdateResponseV1.ts_event)
  return _internal_ts_event();
}
inline void StreamMarketUpdateResponseV1::unsafe_arena_set_allocated_ts_event(
    PROTOBUF_NAMESPACE_ID::Timestamp* ts_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_event_);
  }
  ts_event_ = ts_event;
  if (ts_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamMarketUpdateResponseV1.ts_event)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StreamMarketUpdateResponseV1::release_ts_event() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = ts_event_;
  ts_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StreamMarketUpdateResponseV1::unsafe_arena_release_ts_event() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamMarketUpdateResponseV1.ts_event)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = ts_event_;
  ts_event_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StreamMarketUpdateResponseV1::_internal_mutable_ts_event() {
  
  if (ts_event_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    ts_event_ = p;
  }
  return ts_event_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StreamMarketUpdateResponseV1::mutable_ts_event() {
  PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_ts_event();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamMarketUpdateResponseV1.ts_event)
  return _msg;
}
inline void StreamMarketUpdateResponseV1::set_allocated_ts_event(PROTOBUF_NAMESPACE_ID::Timestamp* ts_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_event_);
  }
  if (ts_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_event));
    if (message_arena != submessage_arena) {
      ts_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts_event, submessage_arena);
    }
    
  } else {
    
  }
  ts_event_ = ts_event;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamMarketUpdateResponseV1.ts_event)
}

// .kaikosdk.StreamMarketUpdateResponseV1.StreamMarketUpdateType update_type = 12;
inline void StreamMarketUpdateResponseV1::clear_update_type() {
  update_type_ = 0;
}
inline ::kaikosdk::StreamMarketUpdateResponseV1_StreamMarketUpdateType StreamMarketUpdateResponseV1::_internal_update_type() const {
  return static_cast< ::kaikosdk::StreamMarketUpdateResponseV1_StreamMarketUpdateType >(update_type_);
}
inline ::kaikosdk::StreamMarketUpdateResponseV1_StreamMarketUpdateType StreamMarketUpdateResponseV1::update_type() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamMarketUpdateResponseV1.update_type)
  return _internal_update_type();
}
inline void StreamMarketUpdateResponseV1::_internal_set_update_type(::kaikosdk::StreamMarketUpdateResponseV1_StreamMarketUpdateType value) {
  
  update_type_ = value;
}
inline void StreamMarketUpdateResponseV1::set_update_type(::kaikosdk::StreamMarketUpdateResponseV1_StreamMarketUpdateType value) {
  _internal_set_update_type(value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamMarketUpdateResponseV1.update_type)
}

// .kaikosdk.StreamMarketUpdateResponseV1.Snapshot snapshot = 13;
inline bool StreamMarketUpdateResponseV1::_internal_has_snapshot() const {
  return this != internal_default_instance() && snapshot_ != nullptr;
}
inline bool StreamMarketUpdateResponseV1::has_snapshot() const {
  return _internal_has_snapshot();
}
inline void StreamMarketUpdateResponseV1::clear_snapshot() {
  if (GetArenaForAllocation() == nullptr && snapshot_ != nullptr) {
    delete snapshot_;
  }
  snapshot_ = nullptr;
}
inline const ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot& StreamMarketUpdateResponseV1::_internal_snapshot() const {
  const ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot* p = snapshot_;
  return p != nullptr ? *p : reinterpret_cast<const ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot&>(
      ::kaikosdk::_StreamMarketUpdateResponseV1_Snapshot_default_instance_);
}
inline const ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot& StreamMarketUpdateResponseV1::snapshot() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamMarketUpdateResponseV1.snapshot)
  return _internal_snapshot();
}
inline void StreamMarketUpdateResponseV1::unsafe_arena_set_allocated_snapshot(
    ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot* snapshot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(snapshot_);
  }
  snapshot_ = snapshot;
  if (snapshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamMarketUpdateResponseV1.snapshot)
}
inline ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot* StreamMarketUpdateResponseV1::release_snapshot() {
  
  ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot* temp = snapshot_;
  snapshot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot* StreamMarketUpdateResponseV1::unsafe_arena_release_snapshot() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamMarketUpdateResponseV1.snapshot)
  
  ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot* temp = snapshot_;
  snapshot_ = nullptr;
  return temp;
}
inline ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot* StreamMarketUpdateResponseV1::_internal_mutable_snapshot() {
  
  if (snapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::kaikosdk::StreamMarketUpdateResponseV1_Snapshot>(GetArenaForAllocation());
    snapshot_ = p;
  }
  return snapshot_;
}
inline ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot* StreamMarketUpdateResponseV1::mutable_snapshot() {
  ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot* _msg = _internal_mutable_snapshot();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamMarketUpdateResponseV1.snapshot)
  return _msg;
}
inline void StreamMarketUpdateResponseV1::set_allocated_snapshot(::kaikosdk::StreamMarketUpdateResponseV1_Snapshot* snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete snapshot_;
  }
  if (snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::kaikosdk::StreamMarketUpdateResponseV1_Snapshot>::GetOwningArena(snapshot);
    if (message_arena != submessage_arena) {
      snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snapshot, submessage_arena);
    }
    
  } else {
    
  }
  snapshot_ = snapshot;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamMarketUpdateResponseV1.snapshot)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kaikosdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::kaikosdk::StreamMarketUpdateResponseV1_StreamMarketUpdateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kaikosdk::StreamMarketUpdateResponseV1_StreamMarketUpdateType>() {
  return ::kaikosdk::StreamMarketUpdateResponseV1_StreamMarketUpdateType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto
