// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk/stream/market_update_v1/response.proto

#include "sdk/stream/market_update_v1/response.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace kaikosdk {
PROTOBUF_CONSTEXPR StreamMarketUpdateResponseV1_Snapshot_Order::StreamMarketUpdateResponseV1_Snapshot_Order(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.amount_)*/0
  , /*decltype(_impl_.price_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamMarketUpdateResponseV1_Snapshot_OrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamMarketUpdateResponseV1_Snapshot_OrderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamMarketUpdateResponseV1_Snapshot_OrderDefaultTypeInternal() {}
  union {
    StreamMarketUpdateResponseV1_Snapshot_Order _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamMarketUpdateResponseV1_Snapshot_OrderDefaultTypeInternal _StreamMarketUpdateResponseV1_Snapshot_Order_default_instance_;
PROTOBUF_CONSTEXPR StreamMarketUpdateResponseV1_Snapshot::StreamMarketUpdateResponseV1_Snapshot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.asks_)*/{}
  , /*decltype(_impl_.bids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamMarketUpdateResponseV1_SnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamMarketUpdateResponseV1_SnapshotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamMarketUpdateResponseV1_SnapshotDefaultTypeInternal() {}
  union {
    StreamMarketUpdateResponseV1_Snapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamMarketUpdateResponseV1_SnapshotDefaultTypeInternal _StreamMarketUpdateResponseV1_Snapshot_default_instance_;
PROTOBUF_CONSTEXPR StreamMarketUpdateResponseV1::StreamMarketUpdateResponseV1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.class__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.exchange_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sequence_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ts_exchange_)*/nullptr
  , /*decltype(_impl_.ts_collection_)*/nullptr
  , /*decltype(_impl_.ts_event_)*/nullptr
  , /*decltype(_impl_.snapshot_)*/nullptr
  , /*decltype(_impl_.amount_)*/0
  , /*decltype(_impl_.commodity_)*/0
  , /*decltype(_impl_.update_type_)*/0
  , /*decltype(_impl_.price_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamMarketUpdateResponseV1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamMarketUpdateResponseV1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamMarketUpdateResponseV1DefaultTypeInternal() {}
  union {
    StreamMarketUpdateResponseV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamMarketUpdateResponseV1DefaultTypeInternal _StreamMarketUpdateResponseV1_default_instance_;
}  // namespace kaikosdk
static ::_pb::Metadata file_level_metadata_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto = nullptr;

const uint32_t TableStruct_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order, _impl_.amount_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order, _impl_.price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamMarketUpdateResponseV1_Snapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamMarketUpdateResponseV1_Snapshot, _impl_.asks_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamMarketUpdateResponseV1_Snapshot, _impl_.bids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamMarketUpdateResponseV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamMarketUpdateResponseV1, _impl_.commodity_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamMarketUpdateResponseV1, _impl_.amount_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamMarketUpdateResponseV1, _impl_.class__),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamMarketUpdateResponseV1, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamMarketUpdateResponseV1, _impl_.exchange_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamMarketUpdateResponseV1, _impl_.sequence_id_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamMarketUpdateResponseV1, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamMarketUpdateResponseV1, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamMarketUpdateResponseV1, _impl_.ts_exchange_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamMarketUpdateResponseV1, _impl_.ts_collection_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamMarketUpdateResponseV1, _impl_.ts_event_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamMarketUpdateResponseV1, _impl_.update_type_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamMarketUpdateResponseV1, _impl_.snapshot_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order)},
  { 8, -1, -1, sizeof(::kaikosdk::StreamMarketUpdateResponseV1_Snapshot)},
  { 16, -1, -1, sizeof(::kaikosdk::StreamMarketUpdateResponseV1)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::kaikosdk::_StreamMarketUpdateResponseV1_Snapshot_Order_default_instance_._instance,
  &::kaikosdk::_StreamMarketUpdateResponseV1_Snapshot_default_instance_._instance,
  &::kaikosdk::_StreamMarketUpdateResponseV1_default_instance_._instance,
};

const char descriptor_table_protodef_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*sdk/stream/market_update_v1/response.p"
  "roto\022\010kaikosdk\032\037google/protobuf/timestam"
  "p.proto\032\027sdk/core/wrappers.proto\032+sdk/st"
  "ream/market_update_v1/commodity.proto\"\322\006"
  "\n\034StreamMarketUpdateResponseV1\0228\n\tcommod"
  "ity\030\001 \001(\0162%.kaikosdk.StreamMarketUpdateC"
  "ommodity\022\016\n\006amount\030\002 \001(\001\022\r\n\005class\030\003 \001(\t\022"
  "\014\n\004code\030\004 \001(\t\022\020\n\010exchange\030\005 \001(\t\022\023\n\013seque"
  "nce_id\030\006 \001(\t\022\n\n\002id\030\007 \001(\t\022\r\n\005price\030\010 \001(\001\022"
  "-\n\013ts_exchange\030\t \001(\0132\030.kaikosdk.Timestam"
  "pValue\022/\n\rts_collection\030\n \001(\0132\030.kaikosdk"
  ".TimestampValue\022,\n\010ts_event\030\013 \001(\0132\032.goog"
  "le.protobuf.Timestamp\022R\n\013update_type\030\014 \001"
  "(\0162=.kaikosdk.StreamMarketUpdateResponse"
  "V1.StreamMarketUpdateType\022A\n\010snapshot\030\r "
  "\001(\0132/.kaikosdk.StreamMarketUpdateRespons"
  "eV1.Snapshot\032\274\001\n\010Snapshot\022C\n\004asks\030\001 \003(\0132"
  "5.kaikosdk.StreamMarketUpdateResponseV1."
  "Snapshot.Order\022C\n\004bids\030\002 \003(\01325.kaikosdk."
  "StreamMarketUpdateResponseV1.Snapshot.Or"
  "der\032&\n\005Order\022\016\n\006amount\030\001 \001(\001\022\r\n\005price\030\002 "
  "\001(\001\"\244\001\n\026StreamMarketUpdateType\022\013\n\007UNKNOW"
  "N\020\000\022\r\n\tTRADE_BUY\020\001\022\016\n\nTRADE_SELL\020\002\022\014\n\010BE"
  "ST_ASK\020\003\022\014\n\010BEST_BID\020\004\022\017\n\013UPDATED_ASK\020\005\022"
  "\017\n\013UPDATED_BID\020\006\022\014\n\010SNAPSHOT\020\007\022\022\n\016FORCE_"
  "SNAPSHOT\020\010B\226\001\n%com.kaiko.sdk.stream.mark"
  "et_update_v1P\001ZJgithub.com/kaikodata/kai"
  "ko-go-sdk/stream/market_update_v1;market"
  "_update_v1\252\002\036KaikoSdk.Stream.MarketUpdat"
  "eV1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_sdk_2fcore_2fwrappers_2eproto,
  &::descriptor_table_sdk_2fstream_2fmarket_5fupdate_5fv1_2fcommodity_2eproto,
};
static ::_pbi::once_flag descriptor_table_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto = {
    false, false, 1171, descriptor_table_protodef_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto,
    "sdk/stream/market_update_v1/response.proto",
    &descriptor_table_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto_once, descriptor_table_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto_deps, 3, 3,
    schemas, file_default_instances, TableStruct_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto::offsets,
    file_level_metadata_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto, file_level_enum_descriptors_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto,
    file_level_service_descriptors_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto_getter() {
  return &descriptor_table_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto(&descriptor_table_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto);
namespace kaikosdk {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamMarketUpdateResponseV1_StreamMarketUpdateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto);
  return file_level_enum_descriptors_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto[0];
}
bool StreamMarketUpdateResponseV1_StreamMarketUpdateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StreamMarketUpdateResponseV1_StreamMarketUpdateType StreamMarketUpdateResponseV1::UNKNOWN;
constexpr StreamMarketUpdateResponseV1_StreamMarketUpdateType StreamMarketUpdateResponseV1::TRADE_BUY;
constexpr StreamMarketUpdateResponseV1_StreamMarketUpdateType StreamMarketUpdateResponseV1::TRADE_SELL;
constexpr StreamMarketUpdateResponseV1_StreamMarketUpdateType StreamMarketUpdateResponseV1::BEST_ASK;
constexpr StreamMarketUpdateResponseV1_StreamMarketUpdateType StreamMarketUpdateResponseV1::BEST_BID;
constexpr StreamMarketUpdateResponseV1_StreamMarketUpdateType StreamMarketUpdateResponseV1::UPDATED_ASK;
constexpr StreamMarketUpdateResponseV1_StreamMarketUpdateType StreamMarketUpdateResponseV1::UPDATED_BID;
constexpr StreamMarketUpdateResponseV1_StreamMarketUpdateType StreamMarketUpdateResponseV1::SNAPSHOT;
constexpr StreamMarketUpdateResponseV1_StreamMarketUpdateType StreamMarketUpdateResponseV1::FORCE_SNAPSHOT;
constexpr StreamMarketUpdateResponseV1_StreamMarketUpdateType StreamMarketUpdateResponseV1::StreamMarketUpdateType_MIN;
constexpr StreamMarketUpdateResponseV1_StreamMarketUpdateType StreamMarketUpdateResponseV1::StreamMarketUpdateType_MAX;
constexpr int StreamMarketUpdateResponseV1::StreamMarketUpdateType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class StreamMarketUpdateResponseV1_Snapshot_Order::_Internal {
 public:
};

StreamMarketUpdateResponseV1_Snapshot_Order::StreamMarketUpdateResponseV1_Snapshot_Order(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaikosdk.StreamMarketUpdateResponseV1.Snapshot.Order)
}
StreamMarketUpdateResponseV1_Snapshot_Order::StreamMarketUpdateResponseV1_Snapshot_Order(const StreamMarketUpdateResponseV1_Snapshot_Order& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamMarketUpdateResponseV1_Snapshot_Order* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.amount_){}
    , decltype(_impl_.price_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.amount_, &from._impl_.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.price_) -
    reinterpret_cast<char*>(&_impl_.amount_)) + sizeof(_impl_.price_));
  // @@protoc_insertion_point(copy_constructor:kaikosdk.StreamMarketUpdateResponseV1.Snapshot.Order)
}

inline void StreamMarketUpdateResponseV1_Snapshot_Order::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.amount_){0}
    , decltype(_impl_.price_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StreamMarketUpdateResponseV1_Snapshot_Order::~StreamMarketUpdateResponseV1_Snapshot_Order() {
  // @@protoc_insertion_point(destructor:kaikosdk.StreamMarketUpdateResponseV1.Snapshot.Order)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamMarketUpdateResponseV1_Snapshot_Order::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StreamMarketUpdateResponseV1_Snapshot_Order::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamMarketUpdateResponseV1_Snapshot_Order::Clear() {
// @@protoc_insertion_point(message_clear_start:kaikosdk.StreamMarketUpdateResponseV1.Snapshot.Order)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.price_) -
      reinterpret_cast<char*>(&_impl_.amount_)) + sizeof(_impl_.price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamMarketUpdateResponseV1_Snapshot_Order::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamMarketUpdateResponseV1_Snapshot_Order::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaikosdk.StreamMarketUpdateResponseV1.Snapshot.Order)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double amount = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount = this->_internal_amount();
  uint64_t raw_amount;
  memcpy(&raw_amount, &tmp_amount, sizeof(tmp_amount));
  if (raw_amount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_amount(), target);
  }

  // double price = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = this->_internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaikosdk.StreamMarketUpdateResponseV1.Snapshot.Order)
  return target;
}

size_t StreamMarketUpdateResponseV1_Snapshot_Order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaikosdk.StreamMarketUpdateResponseV1.Snapshot.Order)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double amount = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount = this->_internal_amount();
  uint64_t raw_amount;
  memcpy(&raw_amount, &tmp_amount, sizeof(tmp_amount));
  if (raw_amount != 0) {
    total_size += 1 + 8;
  }

  // double price = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = this->_internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamMarketUpdateResponseV1_Snapshot_Order::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamMarketUpdateResponseV1_Snapshot_Order::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamMarketUpdateResponseV1_Snapshot_Order::GetClassData() const { return &_class_data_; }


void StreamMarketUpdateResponseV1_Snapshot_Order::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamMarketUpdateResponseV1_Snapshot_Order*>(&to_msg);
  auto& from = static_cast<const StreamMarketUpdateResponseV1_Snapshot_Order&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaikosdk.StreamMarketUpdateResponseV1.Snapshot.Order)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount = from._internal_amount();
  uint64_t raw_amount;
  memcpy(&raw_amount, &tmp_amount, sizeof(tmp_amount));
  if (raw_amount != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = from._internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamMarketUpdateResponseV1_Snapshot_Order::CopyFrom(const StreamMarketUpdateResponseV1_Snapshot_Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaikosdk.StreamMarketUpdateResponseV1.Snapshot.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMarketUpdateResponseV1_Snapshot_Order::IsInitialized() const {
  return true;
}

void StreamMarketUpdateResponseV1_Snapshot_Order::InternalSwap(StreamMarketUpdateResponseV1_Snapshot_Order* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamMarketUpdateResponseV1_Snapshot_Order, _impl_.price_)
      + sizeof(StreamMarketUpdateResponseV1_Snapshot_Order::_impl_.price_)
      - PROTOBUF_FIELD_OFFSET(StreamMarketUpdateResponseV1_Snapshot_Order, _impl_.amount_)>(
          reinterpret_cast<char*>(&_impl_.amount_),
          reinterpret_cast<char*>(&other->_impl_.amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamMarketUpdateResponseV1_Snapshot_Order::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto_getter, &descriptor_table_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto_once,
      file_level_metadata_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto[0]);
}

// ===================================================================

class StreamMarketUpdateResponseV1_Snapshot::_Internal {
 public:
};

StreamMarketUpdateResponseV1_Snapshot::StreamMarketUpdateResponseV1_Snapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaikosdk.StreamMarketUpdateResponseV1.Snapshot)
}
StreamMarketUpdateResponseV1_Snapshot::StreamMarketUpdateResponseV1_Snapshot(const StreamMarketUpdateResponseV1_Snapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamMarketUpdateResponseV1_Snapshot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.asks_){from._impl_.asks_}
    , decltype(_impl_.bids_){from._impl_.bids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kaikosdk.StreamMarketUpdateResponseV1.Snapshot)
}

inline void StreamMarketUpdateResponseV1_Snapshot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.asks_){arena}
    , decltype(_impl_.bids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StreamMarketUpdateResponseV1_Snapshot::~StreamMarketUpdateResponseV1_Snapshot() {
  // @@protoc_insertion_point(destructor:kaikosdk.StreamMarketUpdateResponseV1.Snapshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamMarketUpdateResponseV1_Snapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.asks_.~RepeatedPtrField();
  _impl_.bids_.~RepeatedPtrField();
}

void StreamMarketUpdateResponseV1_Snapshot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamMarketUpdateResponseV1_Snapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:kaikosdk.StreamMarketUpdateResponseV1.Snapshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.asks_.Clear();
  _impl_.bids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamMarketUpdateResponseV1_Snapshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .kaikosdk.StreamMarketUpdateResponseV1.Snapshot.Order asks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_asks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .kaikosdk.StreamMarketUpdateResponseV1.Snapshot.Order bids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamMarketUpdateResponseV1_Snapshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaikosdk.StreamMarketUpdateResponseV1.Snapshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kaikosdk.StreamMarketUpdateResponseV1.Snapshot.Order asks = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_asks_size()); i < n; i++) {
    const auto& repfield = this->_internal_asks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .kaikosdk.StreamMarketUpdateResponseV1.Snapshot.Order bids = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bids_size()); i < n; i++) {
    const auto& repfield = this->_internal_bids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaikosdk.StreamMarketUpdateResponseV1.Snapshot)
  return target;
}

size_t StreamMarketUpdateResponseV1_Snapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaikosdk.StreamMarketUpdateResponseV1.Snapshot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kaikosdk.StreamMarketUpdateResponseV1.Snapshot.Order asks = 1;
  total_size += 1UL * this->_internal_asks_size();
  for (const auto& msg : this->_impl_.asks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kaikosdk.StreamMarketUpdateResponseV1.Snapshot.Order bids = 2;
  total_size += 1UL * this->_internal_bids_size();
  for (const auto& msg : this->_impl_.bids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamMarketUpdateResponseV1_Snapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamMarketUpdateResponseV1_Snapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamMarketUpdateResponseV1_Snapshot::GetClassData() const { return &_class_data_; }


void StreamMarketUpdateResponseV1_Snapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamMarketUpdateResponseV1_Snapshot*>(&to_msg);
  auto& from = static_cast<const StreamMarketUpdateResponseV1_Snapshot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaikosdk.StreamMarketUpdateResponseV1.Snapshot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.asks_.MergeFrom(from._impl_.asks_);
  _this->_impl_.bids_.MergeFrom(from._impl_.bids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamMarketUpdateResponseV1_Snapshot::CopyFrom(const StreamMarketUpdateResponseV1_Snapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaikosdk.StreamMarketUpdateResponseV1.Snapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMarketUpdateResponseV1_Snapshot::IsInitialized() const {
  return true;
}

void StreamMarketUpdateResponseV1_Snapshot::InternalSwap(StreamMarketUpdateResponseV1_Snapshot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.asks_.InternalSwap(&other->_impl_.asks_);
  _impl_.bids_.InternalSwap(&other->_impl_.bids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamMarketUpdateResponseV1_Snapshot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto_getter, &descriptor_table_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto_once,
      file_level_metadata_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto[1]);
}

// ===================================================================

class StreamMarketUpdateResponseV1::_Internal {
 public:
  static const ::kaikosdk::TimestampValue& ts_exchange(const StreamMarketUpdateResponseV1* msg);
  static const ::kaikosdk::TimestampValue& ts_collection(const StreamMarketUpdateResponseV1* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts_event(const StreamMarketUpdateResponseV1* msg);
  static const ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot& snapshot(const StreamMarketUpdateResponseV1* msg);
};

const ::kaikosdk::TimestampValue&
StreamMarketUpdateResponseV1::_Internal::ts_exchange(const StreamMarketUpdateResponseV1* msg) {
  return *msg->_impl_.ts_exchange_;
}
const ::kaikosdk::TimestampValue&
StreamMarketUpdateResponseV1::_Internal::ts_collection(const StreamMarketUpdateResponseV1* msg) {
  return *msg->_impl_.ts_collection_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
StreamMarketUpdateResponseV1::_Internal::ts_event(const StreamMarketUpdateResponseV1* msg) {
  return *msg->_impl_.ts_event_;
}
const ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot&
StreamMarketUpdateResponseV1::_Internal::snapshot(const StreamMarketUpdateResponseV1* msg) {
  return *msg->_impl_.snapshot_;
}
void StreamMarketUpdateResponseV1::clear_ts_exchange() {
  if (GetArenaForAllocation() == nullptr && _impl_.ts_exchange_ != nullptr) {
    delete _impl_.ts_exchange_;
  }
  _impl_.ts_exchange_ = nullptr;
}
void StreamMarketUpdateResponseV1::clear_ts_collection() {
  if (GetArenaForAllocation() == nullptr && _impl_.ts_collection_ != nullptr) {
    delete _impl_.ts_collection_;
  }
  _impl_.ts_collection_ = nullptr;
}
void StreamMarketUpdateResponseV1::clear_ts_event() {
  if (GetArenaForAllocation() == nullptr && _impl_.ts_event_ != nullptr) {
    delete _impl_.ts_event_;
  }
  _impl_.ts_event_ = nullptr;
}
StreamMarketUpdateResponseV1::StreamMarketUpdateResponseV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaikosdk.StreamMarketUpdateResponseV1)
}
StreamMarketUpdateResponseV1::StreamMarketUpdateResponseV1(const StreamMarketUpdateResponseV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamMarketUpdateResponseV1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.class__){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.exchange_){}
    , decltype(_impl_.sequence_id_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.ts_exchange_){nullptr}
    , decltype(_impl_.ts_collection_){nullptr}
    , decltype(_impl_.ts_event_){nullptr}
    , decltype(_impl_.snapshot_){nullptr}
    , decltype(_impl_.amount_){}
    , decltype(_impl_.commodity_){}
    , decltype(_impl_.update_type_){}
    , decltype(_impl_.price_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.class__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_().empty()) {
    _this->_impl_.class__.Set(from._internal_class_(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.exchange_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchange_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange().empty()) {
    _this->_impl_.exchange_.Set(from._internal_exchange(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sequence_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sequence_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sequence_id().empty()) {
    _this->_impl_.sequence_id_.Set(from._internal_sequence_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ts_exchange()) {
    _this->_impl_.ts_exchange_ = new ::kaikosdk::TimestampValue(*from._impl_.ts_exchange_);
  }
  if (from._internal_has_ts_collection()) {
    _this->_impl_.ts_collection_ = new ::kaikosdk::TimestampValue(*from._impl_.ts_collection_);
  }
  if (from._internal_has_ts_event()) {
    _this->_impl_.ts_event_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.ts_event_);
  }
  if (from._internal_has_snapshot()) {
    _this->_impl_.snapshot_ = new ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot(*from._impl_.snapshot_);
  }
  ::memcpy(&_impl_.amount_, &from._impl_.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.price_) -
    reinterpret_cast<char*>(&_impl_.amount_)) + sizeof(_impl_.price_));
  // @@protoc_insertion_point(copy_constructor:kaikosdk.StreamMarketUpdateResponseV1)
}

inline void StreamMarketUpdateResponseV1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.class__){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.exchange_){}
    , decltype(_impl_.sequence_id_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.ts_exchange_){nullptr}
    , decltype(_impl_.ts_collection_){nullptr}
    , decltype(_impl_.ts_event_){nullptr}
    , decltype(_impl_.snapshot_){nullptr}
    , decltype(_impl_.amount_){0}
    , decltype(_impl_.commodity_){0}
    , decltype(_impl_.update_type_){0}
    , decltype(_impl_.price_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.class__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exchange_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchange_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sequence_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sequence_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamMarketUpdateResponseV1::~StreamMarketUpdateResponseV1() {
  // @@protoc_insertion_point(destructor:kaikosdk.StreamMarketUpdateResponseV1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamMarketUpdateResponseV1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.class__.Destroy();
  _impl_.code_.Destroy();
  _impl_.exchange_.Destroy();
  _impl_.sequence_id_.Destroy();
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ts_exchange_;
  if (this != internal_default_instance()) delete _impl_.ts_collection_;
  if (this != internal_default_instance()) delete _impl_.ts_event_;
  if (this != internal_default_instance()) delete _impl_.snapshot_;
}

void StreamMarketUpdateResponseV1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamMarketUpdateResponseV1::Clear() {
// @@protoc_insertion_point(message_clear_start:kaikosdk.StreamMarketUpdateResponseV1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.class__.ClearToEmpty();
  _impl_.code_.ClearToEmpty();
  _impl_.exchange_.ClearToEmpty();
  _impl_.sequence_id_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ts_exchange_ != nullptr) {
    delete _impl_.ts_exchange_;
  }
  _impl_.ts_exchange_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ts_collection_ != nullptr) {
    delete _impl_.ts_collection_;
  }
  _impl_.ts_collection_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ts_event_ != nullptr) {
    delete _impl_.ts_event_;
  }
  _impl_.ts_event_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.snapshot_ != nullptr) {
    delete _impl_.snapshot_;
  }
  _impl_.snapshot_ = nullptr;
  ::memset(&_impl_.amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.price_) -
      reinterpret_cast<char*>(&_impl_.amount_)) + sizeof(_impl_.price_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamMarketUpdateResponseV1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kaikosdk.StreamMarketUpdateCommodity commodity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_commodity(static_cast<::kaikosdk::StreamMarketUpdateCommodity>(val));
        } else
          goto handle_unusual;
        continue;
      // double amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string class = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_class_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamMarketUpdateResponseV1.class"));
        } else
          goto handle_unusual;
        continue;
      // string code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamMarketUpdateResponseV1.code"));
        } else
          goto handle_unusual;
        continue;
      // string exchange = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_exchange();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamMarketUpdateResponseV1.exchange"));
        } else
          goto handle_unusual;
        continue;
      // string sequence_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_sequence_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamMarketUpdateResponseV1.sequence_id"));
        } else
          goto handle_unusual;
        continue;
      // string id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamMarketUpdateResponseV1.id"));
        } else
          goto handle_unusual;
        continue;
      // double price = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .kaikosdk.TimestampValue ts_exchange = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ts_exchange(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kaikosdk.TimestampValue ts_collection = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_ts_collection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp ts_event = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ts_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kaikosdk.StreamMarketUpdateResponseV1.StreamMarketUpdateType update_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_update_type(static_cast<::kaikosdk::StreamMarketUpdateResponseV1_StreamMarketUpdateType>(val));
        } else
          goto handle_unusual;
        continue;
      // .kaikosdk.StreamMarketUpdateResponseV1.Snapshot snapshot = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_snapshot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamMarketUpdateResponseV1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaikosdk.StreamMarketUpdateResponseV1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kaikosdk.StreamMarketUpdateCommodity commodity = 1;
  if (this->_internal_commodity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_commodity(), target);
  }

  // double amount = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount = this->_internal_amount();
  uint64_t raw_amount;
  memcpy(&raw_amount, &tmp_amount, sizeof(tmp_amount));
  if (raw_amount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_amount(), target);
  }

  // string class = 3;
  if (!this->_internal_class_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_().data(), static_cast<int>(this->_internal_class_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamMarketUpdateResponseV1.class");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_class_(), target);
  }

  // string code = 4;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamMarketUpdateResponseV1.code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_code(), target);
  }

  // string exchange = 5;
  if (!this->_internal_exchange().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange().data(), static_cast<int>(this->_internal_exchange().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamMarketUpdateResponseV1.exchange");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_exchange(), target);
  }

  // string sequence_id = 6;
  if (!this->_internal_sequence_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequence_id().data(), static_cast<int>(this->_internal_sequence_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamMarketUpdateResponseV1.sequence_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_sequence_id(), target);
  }

  // string id = 7;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamMarketUpdateResponseV1.id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_id(), target);
  }

  // double price = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = this->_internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_price(), target);
  }

  // .kaikosdk.TimestampValue ts_exchange = 9;
  if (this->_internal_has_ts_exchange()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::ts_exchange(this),
        _Internal::ts_exchange(this).GetCachedSize(), target, stream);
  }

  // .kaikosdk.TimestampValue ts_collection = 10;
  if (this->_internal_has_ts_collection()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::ts_collection(this),
        _Internal::ts_collection(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp ts_event = 11;
  if (this->_internal_has_ts_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::ts_event(this),
        _Internal::ts_event(this).GetCachedSize(), target, stream);
  }

  // .kaikosdk.StreamMarketUpdateResponseV1.StreamMarketUpdateType update_type = 12;
  if (this->_internal_update_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_update_type(), target);
  }

  // .kaikosdk.StreamMarketUpdateResponseV1.Snapshot snapshot = 13;
  if (this->_internal_has_snapshot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::snapshot(this),
        _Internal::snapshot(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaikosdk.StreamMarketUpdateResponseV1)
  return target;
}

size_t StreamMarketUpdateResponseV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaikosdk.StreamMarketUpdateResponseV1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string class = 3;
  if (!this->_internal_class_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_());
  }

  // string code = 4;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string exchange = 5;
  if (!this->_internal_exchange().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange());
  }

  // string sequence_id = 6;
  if (!this->_internal_sequence_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequence_id());
  }

  // string id = 7;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .kaikosdk.TimestampValue ts_exchange = 9;
  if (this->_internal_has_ts_exchange()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ts_exchange_);
  }

  // .kaikosdk.TimestampValue ts_collection = 10;
  if (this->_internal_has_ts_collection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ts_collection_);
  }

  // .google.protobuf.Timestamp ts_event = 11;
  if (this->_internal_has_ts_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ts_event_);
  }

  // .kaikosdk.StreamMarketUpdateResponseV1.Snapshot snapshot = 13;
  if (this->_internal_has_snapshot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.snapshot_);
  }

  // double amount = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount = this->_internal_amount();
  uint64_t raw_amount;
  memcpy(&raw_amount, &tmp_amount, sizeof(tmp_amount));
  if (raw_amount != 0) {
    total_size += 1 + 8;
  }

  // .kaikosdk.StreamMarketUpdateCommodity commodity = 1;
  if (this->_internal_commodity() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_commodity());
  }

  // .kaikosdk.StreamMarketUpdateResponseV1.StreamMarketUpdateType update_type = 12;
  if (this->_internal_update_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_update_type());
  }

  // double price = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = this->_internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamMarketUpdateResponseV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamMarketUpdateResponseV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamMarketUpdateResponseV1::GetClassData() const { return &_class_data_; }


void StreamMarketUpdateResponseV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamMarketUpdateResponseV1*>(&to_msg);
  auto& from = static_cast<const StreamMarketUpdateResponseV1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaikosdk.StreamMarketUpdateResponseV1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_class_().empty()) {
    _this->_internal_set_class_(from._internal_class_());
  }
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  if (!from._internal_sequence_id().empty()) {
    _this->_internal_set_sequence_id(from._internal_sequence_id());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_ts_exchange()) {
    _this->_internal_mutable_ts_exchange()->::kaikosdk::TimestampValue::MergeFrom(
        from._internal_ts_exchange());
  }
  if (from._internal_has_ts_collection()) {
    _this->_internal_mutable_ts_collection()->::kaikosdk::TimestampValue::MergeFrom(
        from._internal_ts_collection());
  }
  if (from._internal_has_ts_event()) {
    _this->_internal_mutable_ts_event()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_ts_event());
  }
  if (from._internal_has_snapshot()) {
    _this->_internal_mutable_snapshot()->::kaikosdk::StreamMarketUpdateResponseV1_Snapshot::MergeFrom(
        from._internal_snapshot());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_amount = from._internal_amount();
  uint64_t raw_amount;
  memcpy(&raw_amount, &tmp_amount, sizeof(tmp_amount));
  if (raw_amount != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  if (from._internal_commodity() != 0) {
    _this->_internal_set_commodity(from._internal_commodity());
  }
  if (from._internal_update_type() != 0) {
    _this->_internal_set_update_type(from._internal_update_type());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = from._internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamMarketUpdateResponseV1::CopyFrom(const StreamMarketUpdateResponseV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaikosdk.StreamMarketUpdateResponseV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMarketUpdateResponseV1::IsInitialized() const {
  return true;
}

void StreamMarketUpdateResponseV1::InternalSwap(StreamMarketUpdateResponseV1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.class__, lhs_arena,
      &other->_impl_.class__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.exchange_, lhs_arena,
      &other->_impl_.exchange_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sequence_id_, lhs_arena,
      &other->_impl_.sequence_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamMarketUpdateResponseV1, _impl_.price_)
      + sizeof(StreamMarketUpdateResponseV1::_impl_.price_)
      - PROTOBUF_FIELD_OFFSET(StreamMarketUpdateResponseV1, _impl_.ts_exchange_)>(
          reinterpret_cast<char*>(&_impl_.ts_exchange_),
          reinterpret_cast<char*>(&other->_impl_.ts_exchange_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamMarketUpdateResponseV1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto_getter, &descriptor_table_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto_once,
      file_level_metadata_sdk_2fstream_2fmarket_5fupdate_5fv1_2fresponse_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace kaikosdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order*
Arena::CreateMaybeMessage< ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot_Order >(arena);
}
template<> PROTOBUF_NOINLINE ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot*
Arena::CreateMaybeMessage< ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaikosdk::StreamMarketUpdateResponseV1_Snapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::kaikosdk::StreamMarketUpdateResponseV1*
Arena::CreateMaybeMessage< ::kaikosdk::StreamMarketUpdateResponseV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaikosdk::StreamMarketUpdateResponseV1 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
