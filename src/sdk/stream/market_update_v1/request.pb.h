// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk/stream/market_update_v1/request.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2fmarket_5fupdate_5fv1_2frequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2fmarket_5fupdate_5fv1_2frequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "sdk/core/data_interval.pb.h"
#include "sdk/core/instrument_criteria.pb.h"
#include "sdk/stream/market_update_v1/commodity.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sdk_2fstream_2fmarket_5fupdate_5fv1_2frequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sdk_2fstream_2fmarket_5fupdate_5fv1_2frequest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sdk_2fstream_2fmarket_5fupdate_5fv1_2frequest_2eproto;
namespace kaikosdk {
class StreamMarketUpdateRequestV1;
struct StreamMarketUpdateRequestV1DefaultTypeInternal;
extern StreamMarketUpdateRequestV1DefaultTypeInternal _StreamMarketUpdateRequestV1_default_instance_;
}  // namespace kaikosdk
PROTOBUF_NAMESPACE_OPEN
template<> ::kaikosdk::StreamMarketUpdateRequestV1* Arena::CreateMaybeMessage<::kaikosdk::StreamMarketUpdateRequestV1>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kaikosdk {

enum StreamMarketUpdateRequestV1_OrderbookSnapshotType : int {
  StreamMarketUpdateRequestV1_OrderbookSnapshotType_UNKNOWN = 0,
  StreamMarketUpdateRequestV1_OrderbookSnapshotType_TEN_PERCENT = 1,
  StreamMarketUpdateRequestV1_OrderbookSnapshotType_FULL = 2,
  StreamMarketUpdateRequestV1_OrderbookSnapshotType_StreamMarketUpdateRequestV1_OrderbookSnapshotType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StreamMarketUpdateRequestV1_OrderbookSnapshotType_StreamMarketUpdateRequestV1_OrderbookSnapshotType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StreamMarketUpdateRequestV1_OrderbookSnapshotType_IsValid(int value);
constexpr StreamMarketUpdateRequestV1_OrderbookSnapshotType StreamMarketUpdateRequestV1_OrderbookSnapshotType_OrderbookSnapshotType_MIN = StreamMarketUpdateRequestV1_OrderbookSnapshotType_UNKNOWN;
constexpr StreamMarketUpdateRequestV1_OrderbookSnapshotType StreamMarketUpdateRequestV1_OrderbookSnapshotType_OrderbookSnapshotType_MAX = StreamMarketUpdateRequestV1_OrderbookSnapshotType_FULL;
constexpr int StreamMarketUpdateRequestV1_OrderbookSnapshotType_OrderbookSnapshotType_ARRAYSIZE = StreamMarketUpdateRequestV1_OrderbookSnapshotType_OrderbookSnapshotType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamMarketUpdateRequestV1_OrderbookSnapshotType_descriptor();
template<typename T>
inline const std::string& StreamMarketUpdateRequestV1_OrderbookSnapshotType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StreamMarketUpdateRequestV1_OrderbookSnapshotType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StreamMarketUpdateRequestV1_OrderbookSnapshotType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StreamMarketUpdateRequestV1_OrderbookSnapshotType_descriptor(), enum_t_value);
}
inline bool StreamMarketUpdateRequestV1_OrderbookSnapshotType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StreamMarketUpdateRequestV1_OrderbookSnapshotType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StreamMarketUpdateRequestV1_OrderbookSnapshotType>(
    StreamMarketUpdateRequestV1_OrderbookSnapshotType_descriptor(), name, value);
}
// ===================================================================

class StreamMarketUpdateRequestV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.StreamMarketUpdateRequestV1) */ {
 public:
  inline StreamMarketUpdateRequestV1() : StreamMarketUpdateRequestV1(nullptr) {}
  ~StreamMarketUpdateRequestV1() override;
  explicit constexpr StreamMarketUpdateRequestV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamMarketUpdateRequestV1(const StreamMarketUpdateRequestV1& from);
  StreamMarketUpdateRequestV1(StreamMarketUpdateRequestV1&& from) noexcept
    : StreamMarketUpdateRequestV1() {
    *this = ::std::move(from);
  }

  inline StreamMarketUpdateRequestV1& operator=(const StreamMarketUpdateRequestV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamMarketUpdateRequestV1& operator=(StreamMarketUpdateRequestV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamMarketUpdateRequestV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamMarketUpdateRequestV1* internal_default_instance() {
    return reinterpret_cast<const StreamMarketUpdateRequestV1*>(
               &_StreamMarketUpdateRequestV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StreamMarketUpdateRequestV1& a, StreamMarketUpdateRequestV1& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamMarketUpdateRequestV1* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamMarketUpdateRequestV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamMarketUpdateRequestV1* New() const final {
    return new StreamMarketUpdateRequestV1();
  }

  StreamMarketUpdateRequestV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamMarketUpdateRequestV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamMarketUpdateRequestV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StreamMarketUpdateRequestV1& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamMarketUpdateRequestV1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.StreamMarketUpdateRequestV1";
  }
  protected:
  explicit StreamMarketUpdateRequestV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StreamMarketUpdateRequestV1_OrderbookSnapshotType OrderbookSnapshotType;
  static constexpr OrderbookSnapshotType UNKNOWN =
    StreamMarketUpdateRequestV1_OrderbookSnapshotType_UNKNOWN;
  static constexpr OrderbookSnapshotType TEN_PERCENT =
    StreamMarketUpdateRequestV1_OrderbookSnapshotType_TEN_PERCENT;
  static constexpr OrderbookSnapshotType FULL =
    StreamMarketUpdateRequestV1_OrderbookSnapshotType_FULL;
  static inline bool OrderbookSnapshotType_IsValid(int value) {
    return StreamMarketUpdateRequestV1_OrderbookSnapshotType_IsValid(value);
  }
  static constexpr OrderbookSnapshotType OrderbookSnapshotType_MIN =
    StreamMarketUpdateRequestV1_OrderbookSnapshotType_OrderbookSnapshotType_MIN;
  static constexpr OrderbookSnapshotType OrderbookSnapshotType_MAX =
    StreamMarketUpdateRequestV1_OrderbookSnapshotType_OrderbookSnapshotType_MAX;
  static constexpr int OrderbookSnapshotType_ARRAYSIZE =
    StreamMarketUpdateRequestV1_OrderbookSnapshotType_OrderbookSnapshotType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OrderbookSnapshotType_descriptor() {
    return StreamMarketUpdateRequestV1_OrderbookSnapshotType_descriptor();
  }
  template<typename T>
  static inline const std::string& OrderbookSnapshotType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OrderbookSnapshotType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OrderbookSnapshotType_Name.");
    return StreamMarketUpdateRequestV1_OrderbookSnapshotType_Name(enum_t_value);
  }
  static inline bool OrderbookSnapshotType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OrderbookSnapshotType* value) {
    return StreamMarketUpdateRequestV1_OrderbookSnapshotType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCommoditiesFieldNumber = 2,
    kInstrumentCriteriaFieldNumber = 1,
    kIntervalFieldNumber = 3,
    kSnapshotTypeFieldNumber = 4,
  };
  // repeated .kaikosdk.StreamMarketUpdateCommodity commodities = 2;
  int commodities_size() const;
  private:
  int _internal_commodities_size() const;
  public:
  void clear_commodities();
  private:
  ::kaikosdk::StreamMarketUpdateCommodity _internal_commodities(int index) const;
  void _internal_add_commodities(::kaikosdk::StreamMarketUpdateCommodity value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_commodities();
  public:
  ::kaikosdk::StreamMarketUpdateCommodity commodities(int index) const;
  void set_commodities(int index, ::kaikosdk::StreamMarketUpdateCommodity value);
  void add_commodities(::kaikosdk::StreamMarketUpdateCommodity value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& commodities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_commodities();

  // .kaikosdk.InstrumentCriteria instrument_criteria = 1;
  bool has_instrument_criteria() const;
  private:
  bool _internal_has_instrument_criteria() const;
  public:
  void clear_instrument_criteria();
  const ::kaikosdk::InstrumentCriteria& instrument_criteria() const;
  PROTOBUF_MUST_USE_RESULT ::kaikosdk::InstrumentCriteria* release_instrument_criteria();
  ::kaikosdk::InstrumentCriteria* mutable_instrument_criteria();
  void set_allocated_instrument_criteria(::kaikosdk::InstrumentCriteria* instrument_criteria);
  private:
  const ::kaikosdk::InstrumentCriteria& _internal_instrument_criteria() const;
  ::kaikosdk::InstrumentCriteria* _internal_mutable_instrument_criteria();
  public:
  void unsafe_arena_set_allocated_instrument_criteria(
      ::kaikosdk::InstrumentCriteria* instrument_criteria);
  ::kaikosdk::InstrumentCriteria* unsafe_arena_release_instrument_criteria();

  // .kaikosdk.DataInterval interval = 3;
  bool has_interval() const;
  private:
  bool _internal_has_interval() const;
  public:
  void clear_interval();
  const ::kaikosdk::DataInterval& interval() const;
  PROTOBUF_MUST_USE_RESULT ::kaikosdk::DataInterval* release_interval();
  ::kaikosdk::DataInterval* mutable_interval();
  void set_allocated_interval(::kaikosdk::DataInterval* interval);
  private:
  const ::kaikosdk::DataInterval& _internal_interval() const;
  ::kaikosdk::DataInterval* _internal_mutable_interval();
  public:
  void unsafe_arena_set_allocated_interval(
      ::kaikosdk::DataInterval* interval);
  ::kaikosdk::DataInterval* unsafe_arena_release_interval();

  // .kaikosdk.StreamMarketUpdateRequestV1.OrderbookSnapshotType snapshot_type = 4;
  void clear_snapshot_type();
  ::kaikosdk::StreamMarketUpdateRequestV1_OrderbookSnapshotType snapshot_type() const;
  void set_snapshot_type(::kaikosdk::StreamMarketUpdateRequestV1_OrderbookSnapshotType value);
  private:
  ::kaikosdk::StreamMarketUpdateRequestV1_OrderbookSnapshotType _internal_snapshot_type() const;
  void _internal_set_snapshot_type(::kaikosdk::StreamMarketUpdateRequestV1_OrderbookSnapshotType value);
  public:

  // @@protoc_insertion_point(class_scope:kaikosdk.StreamMarketUpdateRequestV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> commodities_;
  mutable std::atomic<int> _commodities_cached_byte_size_;
  ::kaikosdk::InstrumentCriteria* instrument_criteria_;
  ::kaikosdk::DataInterval* interval_;
  int snapshot_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2fstream_2fmarket_5fupdate_5fv1_2frequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StreamMarketUpdateRequestV1

// .kaikosdk.InstrumentCriteria instrument_criteria = 1;
inline bool StreamMarketUpdateRequestV1::_internal_has_instrument_criteria() const {
  return this != internal_default_instance() && instrument_criteria_ != nullptr;
}
inline bool StreamMarketUpdateRequestV1::has_instrument_criteria() const {
  return _internal_has_instrument_criteria();
}
inline const ::kaikosdk::InstrumentCriteria& StreamMarketUpdateRequestV1::_internal_instrument_criteria() const {
  const ::kaikosdk::InstrumentCriteria* p = instrument_criteria_;
  return p != nullptr ? *p : reinterpret_cast<const ::kaikosdk::InstrumentCriteria&>(
      ::kaikosdk::_InstrumentCriteria_default_instance_);
}
inline const ::kaikosdk::InstrumentCriteria& StreamMarketUpdateRequestV1::instrument_criteria() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamMarketUpdateRequestV1.instrument_criteria)
  return _internal_instrument_criteria();
}
inline void StreamMarketUpdateRequestV1::unsafe_arena_set_allocated_instrument_criteria(
    ::kaikosdk::InstrumentCriteria* instrument_criteria) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(instrument_criteria_);
  }
  instrument_criteria_ = instrument_criteria;
  if (instrument_criteria) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamMarketUpdateRequestV1.instrument_criteria)
}
inline ::kaikosdk::InstrumentCriteria* StreamMarketUpdateRequestV1::release_instrument_criteria() {
  
  ::kaikosdk::InstrumentCriteria* temp = instrument_criteria_;
  instrument_criteria_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kaikosdk::InstrumentCriteria* StreamMarketUpdateRequestV1::unsafe_arena_release_instrument_criteria() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamMarketUpdateRequestV1.instrument_criteria)
  
  ::kaikosdk::InstrumentCriteria* temp = instrument_criteria_;
  instrument_criteria_ = nullptr;
  return temp;
}
inline ::kaikosdk::InstrumentCriteria* StreamMarketUpdateRequestV1::_internal_mutable_instrument_criteria() {
  
  if (instrument_criteria_ == nullptr) {
    auto* p = CreateMaybeMessage<::kaikosdk::InstrumentCriteria>(GetArenaForAllocation());
    instrument_criteria_ = p;
  }
  return instrument_criteria_;
}
inline ::kaikosdk::InstrumentCriteria* StreamMarketUpdateRequestV1::mutable_instrument_criteria() {
  ::kaikosdk::InstrumentCriteria* _msg = _internal_mutable_instrument_criteria();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamMarketUpdateRequestV1.instrument_criteria)
  return _msg;
}
inline void StreamMarketUpdateRequestV1::set_allocated_instrument_criteria(::kaikosdk::InstrumentCriteria* instrument_criteria) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(instrument_criteria_);
  }
  if (instrument_criteria) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(instrument_criteria));
    if (message_arena != submessage_arena) {
      instrument_criteria = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instrument_criteria, submessage_arena);
    }
    
  } else {
    
  }
  instrument_criteria_ = instrument_criteria;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamMarketUpdateRequestV1.instrument_criteria)
}

// repeated .kaikosdk.StreamMarketUpdateCommodity commodities = 2;
inline int StreamMarketUpdateRequestV1::_internal_commodities_size() const {
  return commodities_.size();
}
inline int StreamMarketUpdateRequestV1::commodities_size() const {
  return _internal_commodities_size();
}
inline void StreamMarketUpdateRequestV1::clear_commodities() {
  commodities_.Clear();
}
inline ::kaikosdk::StreamMarketUpdateCommodity StreamMarketUpdateRequestV1::_internal_commodities(int index) const {
  return static_cast< ::kaikosdk::StreamMarketUpdateCommodity >(commodities_.Get(index));
}
inline ::kaikosdk::StreamMarketUpdateCommodity StreamMarketUpdateRequestV1::commodities(int index) const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamMarketUpdateRequestV1.commodities)
  return _internal_commodities(index);
}
inline void StreamMarketUpdateRequestV1::set_commodities(int index, ::kaikosdk::StreamMarketUpdateCommodity value) {
  commodities_.Set(index, value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamMarketUpdateRequestV1.commodities)
}
inline void StreamMarketUpdateRequestV1::_internal_add_commodities(::kaikosdk::StreamMarketUpdateCommodity value) {
  commodities_.Add(value);
}
inline void StreamMarketUpdateRequestV1::add_commodities(::kaikosdk::StreamMarketUpdateCommodity value) {
  _internal_add_commodities(value);
  // @@protoc_insertion_point(field_add:kaikosdk.StreamMarketUpdateRequestV1.commodities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
StreamMarketUpdateRequestV1::commodities() const {
  // @@protoc_insertion_point(field_list:kaikosdk.StreamMarketUpdateRequestV1.commodities)
  return commodities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
StreamMarketUpdateRequestV1::_internal_mutable_commodities() {
  return &commodities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
StreamMarketUpdateRequestV1::mutable_commodities() {
  // @@protoc_insertion_point(field_mutable_list:kaikosdk.StreamMarketUpdateRequestV1.commodities)
  return _internal_mutable_commodities();
}

// .kaikosdk.DataInterval interval = 3;
inline bool StreamMarketUpdateRequestV1::_internal_has_interval() const {
  return this != internal_default_instance() && interval_ != nullptr;
}
inline bool StreamMarketUpdateRequestV1::has_interval() const {
  return _internal_has_interval();
}
inline const ::kaikosdk::DataInterval& StreamMarketUpdateRequestV1::_internal_interval() const {
  const ::kaikosdk::DataInterval* p = interval_;
  return p != nullptr ? *p : reinterpret_cast<const ::kaikosdk::DataInterval&>(
      ::kaikosdk::_DataInterval_default_instance_);
}
inline const ::kaikosdk::DataInterval& StreamMarketUpdateRequestV1::interval() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamMarketUpdateRequestV1.interval)
  return _internal_interval();
}
inline void StreamMarketUpdateRequestV1::unsafe_arena_set_allocated_interval(
    ::kaikosdk::DataInterval* interval) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval_);
  }
  interval_ = interval;
  if (interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamMarketUpdateRequestV1.interval)
}
inline ::kaikosdk::DataInterval* StreamMarketUpdateRequestV1::release_interval() {
  
  ::kaikosdk::DataInterval* temp = interval_;
  interval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kaikosdk::DataInterval* StreamMarketUpdateRequestV1::unsafe_arena_release_interval() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamMarketUpdateRequestV1.interval)
  
  ::kaikosdk::DataInterval* temp = interval_;
  interval_ = nullptr;
  return temp;
}
inline ::kaikosdk::DataInterval* StreamMarketUpdateRequestV1::_internal_mutable_interval() {
  
  if (interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::kaikosdk::DataInterval>(GetArenaForAllocation());
    interval_ = p;
  }
  return interval_;
}
inline ::kaikosdk::DataInterval* StreamMarketUpdateRequestV1::mutable_interval() {
  ::kaikosdk::DataInterval* _msg = _internal_mutable_interval();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamMarketUpdateRequestV1.interval)
  return _msg;
}
inline void StreamMarketUpdateRequestV1::set_allocated_interval(::kaikosdk::DataInterval* interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval_);
  }
  if (interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval));
    if (message_arena != submessage_arena) {
      interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval, submessage_arena);
    }
    
  } else {
    
  }
  interval_ = interval;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamMarketUpdateRequestV1.interval)
}

// .kaikosdk.StreamMarketUpdateRequestV1.OrderbookSnapshotType snapshot_type = 4;
inline void StreamMarketUpdateRequestV1::clear_snapshot_type() {
  snapshot_type_ = 0;
}
inline ::kaikosdk::StreamMarketUpdateRequestV1_OrderbookSnapshotType StreamMarketUpdateRequestV1::_internal_snapshot_type() const {
  return static_cast< ::kaikosdk::StreamMarketUpdateRequestV1_OrderbookSnapshotType >(snapshot_type_);
}
inline ::kaikosdk::StreamMarketUpdateRequestV1_OrderbookSnapshotType StreamMarketUpdateRequestV1::snapshot_type() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamMarketUpdateRequestV1.snapshot_type)
  return _internal_snapshot_type();
}
inline void StreamMarketUpdateRequestV1::_internal_set_snapshot_type(::kaikosdk::StreamMarketUpdateRequestV1_OrderbookSnapshotType value) {
  
  snapshot_type_ = value;
}
inline void StreamMarketUpdateRequestV1::set_snapshot_type(::kaikosdk::StreamMarketUpdateRequestV1_OrderbookSnapshotType value) {
  _internal_set_snapshot_type(value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamMarketUpdateRequestV1.snapshot_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace kaikosdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::kaikosdk::StreamMarketUpdateRequestV1_OrderbookSnapshotType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kaikosdk::StreamMarketUpdateRequestV1_OrderbookSnapshotType>() {
  return ::kaikosdk::StreamMarketUpdateRequestV1_OrderbookSnapshotType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2fmarket_5fupdate_5fv1_2frequest_2eproto
