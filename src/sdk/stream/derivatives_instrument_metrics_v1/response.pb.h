// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk/stream/derivatives_instrument_metrics_v1/response.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2fderivatives_5finstrument_5fmetrics_5fv1_2fresponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2fderivatives_5finstrument_5fmetrics_5fv1_2fresponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "sdk/stream/derivatives_instrument_metrics_v1/commodity_kind.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sdk_2fstream_2fderivatives_5finstrument_5fmetrics_5fv1_2fresponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sdk_2fstream_2fderivatives_5finstrument_5fmetrics_5fv1_2fresponse_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sdk_2fstream_2fderivatives_5finstrument_5fmetrics_5fv1_2fresponse_2eproto;
namespace kaikosdk {
class StreamDerivativesInstrumentMetricsResponseV1;
struct StreamDerivativesInstrumentMetricsResponseV1DefaultTypeInternal;
extern StreamDerivativesInstrumentMetricsResponseV1DefaultTypeInternal _StreamDerivativesInstrumentMetricsResponseV1_default_instance_;
}  // namespace kaikosdk
PROTOBUF_NAMESPACE_OPEN
template<> ::kaikosdk::StreamDerivativesInstrumentMetricsResponseV1* Arena::CreateMaybeMessage<::kaikosdk::StreamDerivativesInstrumentMetricsResponseV1>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kaikosdk {

// ===================================================================

class StreamDerivativesInstrumentMetricsResponseV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1) */ {
 public:
  inline StreamDerivativesInstrumentMetricsResponseV1() : StreamDerivativesInstrumentMetricsResponseV1(nullptr) {}
  ~StreamDerivativesInstrumentMetricsResponseV1() override;
  explicit PROTOBUF_CONSTEXPR StreamDerivativesInstrumentMetricsResponseV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamDerivativesInstrumentMetricsResponseV1(const StreamDerivativesInstrumentMetricsResponseV1& from);
  StreamDerivativesInstrumentMetricsResponseV1(StreamDerivativesInstrumentMetricsResponseV1&& from) noexcept
    : StreamDerivativesInstrumentMetricsResponseV1() {
    *this = ::std::move(from);
  }

  inline StreamDerivativesInstrumentMetricsResponseV1& operator=(const StreamDerivativesInstrumentMetricsResponseV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamDerivativesInstrumentMetricsResponseV1& operator=(StreamDerivativesInstrumentMetricsResponseV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamDerivativesInstrumentMetricsResponseV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamDerivativesInstrumentMetricsResponseV1* internal_default_instance() {
    return reinterpret_cast<const StreamDerivativesInstrumentMetricsResponseV1*>(
               &_StreamDerivativesInstrumentMetricsResponseV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StreamDerivativesInstrumentMetricsResponseV1& a, StreamDerivativesInstrumentMetricsResponseV1& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamDerivativesInstrumentMetricsResponseV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamDerivativesInstrumentMetricsResponseV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamDerivativesInstrumentMetricsResponseV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamDerivativesInstrumentMetricsResponseV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamDerivativesInstrumentMetricsResponseV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamDerivativesInstrumentMetricsResponseV1& from) {
    StreamDerivativesInstrumentMetricsResponseV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamDerivativesInstrumentMetricsResponseV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.StreamDerivativesInstrumentMetricsResponseV1";
  }
  protected:
  explicit StreamDerivativesInstrumentMetricsResponseV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kLegacySymbolFieldNumber = 2,
    kExchangeFieldNumber = 3,
    kCommodityFieldNumber = 4,
    kTsCollectionFieldNumber = 6,
    kTsEventFieldNumber = 7,
    kCommodityKindFieldNumber = 5,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string legacy_symbol = 2;
  void clear_legacy_symbol();
  const std::string& legacy_symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_legacy_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_legacy_symbol();
  PROTOBUF_NODISCARD std::string* release_legacy_symbol();
  void set_allocated_legacy_symbol(std::string* legacy_symbol);
  private:
  const std::string& _internal_legacy_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_legacy_symbol(const std::string& value);
  std::string* _internal_mutable_legacy_symbol();
  public:

  // string exchange = 3;
  void clear_exchange();
  const std::string& exchange() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exchange(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exchange();
  PROTOBUF_NODISCARD std::string* release_exchange();
  void set_allocated_exchange(std::string* exchange);
  private:
  const std::string& _internal_exchange() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange(const std::string& value);
  std::string* _internal_mutable_exchange();
  public:

  // string commodity = 4;
  void clear_commodity();
  const std::string& commodity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_commodity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_commodity();
  PROTOBUF_NODISCARD std::string* release_commodity();
  void set_allocated_commodity(std::string* commodity);
  private:
  const std::string& _internal_commodity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_commodity(const std::string& value);
  std::string* _internal_mutable_commodity();
  public:

  // .google.protobuf.Timestamp ts_collection = 6;
  bool has_ts_collection() const;
  private:
  bool _internal_has_ts_collection() const;
  public:
  void clear_ts_collection();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts_collection() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_ts_collection();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_ts_collection();
  void set_allocated_ts_collection(::PROTOBUF_NAMESPACE_ID::Timestamp* ts_collection);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_ts_collection() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_ts_collection();
  public:
  void unsafe_arena_set_allocated_ts_collection(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_collection);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_ts_collection();

  // .google.protobuf.Timestamp ts_event = 7;
  bool has_ts_event() const;
  private:
  bool _internal_has_ts_event() const;
  public:
  void clear_ts_event();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts_event() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_ts_event();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_ts_event();
  void set_allocated_ts_event(::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_ts_event() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_ts_event();
  public:
  void unsafe_arena_set_allocated_ts_event(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_ts_event();

  // .kaikosdk.StreamDerivativesInstrumentCommodityKindV1 commodity_kind = 5;
  void clear_commodity_kind();
  ::kaikosdk::StreamDerivativesInstrumentCommodityKindV1 commodity_kind() const;
  void set_commodity_kind(::kaikosdk::StreamDerivativesInstrumentCommodityKindV1 value);
  private:
  ::kaikosdk::StreamDerivativesInstrumentCommodityKindV1 _internal_commodity_kind() const;
  void _internal_set_commodity_kind(::kaikosdk::StreamDerivativesInstrumentCommodityKindV1 value);
  public:

  // @@protoc_insertion_point(class_scope:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr legacy_symbol_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commodity_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_collection_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event_;
    int commodity_kind_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2fstream_2fderivatives_5finstrument_5fmetrics_5fv1_2fresponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StreamDerivativesInstrumentMetricsResponseV1

// string value = 1;
inline void StreamDerivativesInstrumentMetricsResponseV1::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& StreamDerivativesInstrumentMetricsResponseV1::value() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamDerivativesInstrumentMetricsResponseV1::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.value)
}
inline std::string* StreamDerivativesInstrumentMetricsResponseV1::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.value)
  return _s;
}
inline const std::string& StreamDerivativesInstrumentMetricsResponseV1::_internal_value() const {
  return _impl_.value_.Get();
}
inline void StreamDerivativesInstrumentMetricsResponseV1::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamDerivativesInstrumentMetricsResponseV1::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamDerivativesInstrumentMetricsResponseV1::release_value() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.value)
  return _impl_.value_.Release();
}
inline void StreamDerivativesInstrumentMetricsResponseV1::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.value)
}

// string legacy_symbol = 2;
inline void StreamDerivativesInstrumentMetricsResponseV1::clear_legacy_symbol() {
  _impl_.legacy_symbol_.ClearToEmpty();
}
inline const std::string& StreamDerivativesInstrumentMetricsResponseV1::legacy_symbol() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.legacy_symbol)
  return _internal_legacy_symbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamDerivativesInstrumentMetricsResponseV1::set_legacy_symbol(ArgT0&& arg0, ArgT... args) {
 
 _impl_.legacy_symbol_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.legacy_symbol)
}
inline std::string* StreamDerivativesInstrumentMetricsResponseV1::mutable_legacy_symbol() {
  std::string* _s = _internal_mutable_legacy_symbol();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.legacy_symbol)
  return _s;
}
inline const std::string& StreamDerivativesInstrumentMetricsResponseV1::_internal_legacy_symbol() const {
  return _impl_.legacy_symbol_.Get();
}
inline void StreamDerivativesInstrumentMetricsResponseV1::_internal_set_legacy_symbol(const std::string& value) {
  
  _impl_.legacy_symbol_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamDerivativesInstrumentMetricsResponseV1::_internal_mutable_legacy_symbol() {
  
  return _impl_.legacy_symbol_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamDerivativesInstrumentMetricsResponseV1::release_legacy_symbol() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.legacy_symbol)
  return _impl_.legacy_symbol_.Release();
}
inline void StreamDerivativesInstrumentMetricsResponseV1::set_allocated_legacy_symbol(std::string* legacy_symbol) {
  if (legacy_symbol != nullptr) {
    
  } else {
    
  }
  _impl_.legacy_symbol_.SetAllocated(legacy_symbol, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.legacy_symbol_.IsDefault()) {
    _impl_.legacy_symbol_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.legacy_symbol)
}

// string exchange = 3;
inline void StreamDerivativesInstrumentMetricsResponseV1::clear_exchange() {
  _impl_.exchange_.ClearToEmpty();
}
inline const std::string& StreamDerivativesInstrumentMetricsResponseV1::exchange() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.exchange)
  return _internal_exchange();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamDerivativesInstrumentMetricsResponseV1::set_exchange(ArgT0&& arg0, ArgT... args) {
 
 _impl_.exchange_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.exchange)
}
inline std::string* StreamDerivativesInstrumentMetricsResponseV1::mutable_exchange() {
  std::string* _s = _internal_mutable_exchange();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.exchange)
  return _s;
}
inline const std::string& StreamDerivativesInstrumentMetricsResponseV1::_internal_exchange() const {
  return _impl_.exchange_.Get();
}
inline void StreamDerivativesInstrumentMetricsResponseV1::_internal_set_exchange(const std::string& value) {
  
  _impl_.exchange_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamDerivativesInstrumentMetricsResponseV1::_internal_mutable_exchange() {
  
  return _impl_.exchange_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamDerivativesInstrumentMetricsResponseV1::release_exchange() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.exchange)
  return _impl_.exchange_.Release();
}
inline void StreamDerivativesInstrumentMetricsResponseV1::set_allocated_exchange(std::string* exchange) {
  if (exchange != nullptr) {
    
  } else {
    
  }
  _impl_.exchange_.SetAllocated(exchange, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.exchange_.IsDefault()) {
    _impl_.exchange_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.exchange)
}

// string commodity = 4;
inline void StreamDerivativesInstrumentMetricsResponseV1::clear_commodity() {
  _impl_.commodity_.ClearToEmpty();
}
inline const std::string& StreamDerivativesInstrumentMetricsResponseV1::commodity() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.commodity)
  return _internal_commodity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamDerivativesInstrumentMetricsResponseV1::set_commodity(ArgT0&& arg0, ArgT... args) {
 
 _impl_.commodity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.commodity)
}
inline std::string* StreamDerivativesInstrumentMetricsResponseV1::mutable_commodity() {
  std::string* _s = _internal_mutable_commodity();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.commodity)
  return _s;
}
inline const std::string& StreamDerivativesInstrumentMetricsResponseV1::_internal_commodity() const {
  return _impl_.commodity_.Get();
}
inline void StreamDerivativesInstrumentMetricsResponseV1::_internal_set_commodity(const std::string& value) {
  
  _impl_.commodity_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamDerivativesInstrumentMetricsResponseV1::_internal_mutable_commodity() {
  
  return _impl_.commodity_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamDerivativesInstrumentMetricsResponseV1::release_commodity() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.commodity)
  return _impl_.commodity_.Release();
}
inline void StreamDerivativesInstrumentMetricsResponseV1::set_allocated_commodity(std::string* commodity) {
  if (commodity != nullptr) {
    
  } else {
    
  }
  _impl_.commodity_.SetAllocated(commodity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.commodity_.IsDefault()) {
    _impl_.commodity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.commodity)
}

// .kaikosdk.StreamDerivativesInstrumentCommodityKindV1 commodity_kind = 5;
inline void StreamDerivativesInstrumentMetricsResponseV1::clear_commodity_kind() {
  _impl_.commodity_kind_ = 0;
}
inline ::kaikosdk::StreamDerivativesInstrumentCommodityKindV1 StreamDerivativesInstrumentMetricsResponseV1::_internal_commodity_kind() const {
  return static_cast< ::kaikosdk::StreamDerivativesInstrumentCommodityKindV1 >(_impl_.commodity_kind_);
}
inline ::kaikosdk::StreamDerivativesInstrumentCommodityKindV1 StreamDerivativesInstrumentMetricsResponseV1::commodity_kind() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.commodity_kind)
  return _internal_commodity_kind();
}
inline void StreamDerivativesInstrumentMetricsResponseV1::_internal_set_commodity_kind(::kaikosdk::StreamDerivativesInstrumentCommodityKindV1 value) {
  
  _impl_.commodity_kind_ = value;
}
inline void StreamDerivativesInstrumentMetricsResponseV1::set_commodity_kind(::kaikosdk::StreamDerivativesInstrumentCommodityKindV1 value) {
  _internal_set_commodity_kind(value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.commodity_kind)
}

// .google.protobuf.Timestamp ts_collection = 6;
inline bool StreamDerivativesInstrumentMetricsResponseV1::_internal_has_ts_collection() const {
  return this != internal_default_instance() && _impl_.ts_collection_ != nullptr;
}
inline bool StreamDerivativesInstrumentMetricsResponseV1::has_ts_collection() const {
  return _internal_has_ts_collection();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamDerivativesInstrumentMetricsResponseV1::_internal_ts_collection() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.ts_collection_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamDerivativesInstrumentMetricsResponseV1::ts_collection() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.ts_collection)
  return _internal_ts_collection();
}
inline void StreamDerivativesInstrumentMetricsResponseV1::unsafe_arena_set_allocated_ts_collection(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_collection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_collection_);
  }
  _impl_.ts_collection_ = ts_collection;
  if (ts_collection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.ts_collection)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamDerivativesInstrumentMetricsResponseV1::release_ts_collection() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_collection_;
  _impl_.ts_collection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamDerivativesInstrumentMetricsResponseV1::unsafe_arena_release_ts_collection() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.ts_collection)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_collection_;
  _impl_.ts_collection_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamDerivativesInstrumentMetricsResponseV1::_internal_mutable_ts_collection() {
  
  if (_impl_.ts_collection_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.ts_collection_ = p;
  }
  return _impl_.ts_collection_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamDerivativesInstrumentMetricsResponseV1::mutable_ts_collection() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_ts_collection();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.ts_collection)
  return _msg;
}
inline void StreamDerivativesInstrumentMetricsResponseV1::set_allocated_ts_collection(::PROTOBUF_NAMESPACE_ID::Timestamp* ts_collection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_collection_);
  }
  if (ts_collection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_collection));
    if (message_arena != submessage_arena) {
      ts_collection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts_collection, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ts_collection_ = ts_collection;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.ts_collection)
}

// .google.protobuf.Timestamp ts_event = 7;
inline bool StreamDerivativesInstrumentMetricsResponseV1::_internal_has_ts_event() const {
  return this != internal_default_instance() && _impl_.ts_event_ != nullptr;
}
inline bool StreamDerivativesInstrumentMetricsResponseV1::has_ts_event() const {
  return _internal_has_ts_event();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamDerivativesInstrumentMetricsResponseV1::_internal_ts_event() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.ts_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamDerivativesInstrumentMetricsResponseV1::ts_event() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.ts_event)
  return _internal_ts_event();
}
inline void StreamDerivativesInstrumentMetricsResponseV1::unsafe_arena_set_allocated_ts_event(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_event_);
  }
  _impl_.ts_event_ = ts_event;
  if (ts_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.ts_event)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamDerivativesInstrumentMetricsResponseV1::release_ts_event() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_event_;
  _impl_.ts_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamDerivativesInstrumentMetricsResponseV1::unsafe_arena_release_ts_event() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.ts_event)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_event_;
  _impl_.ts_event_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamDerivativesInstrumentMetricsResponseV1::_internal_mutable_ts_event() {
  
  if (_impl_.ts_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.ts_event_ = p;
  }
  return _impl_.ts_event_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamDerivativesInstrumentMetricsResponseV1::mutable_ts_event() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_ts_event();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.ts_event)
  return _msg;
}
inline void StreamDerivativesInstrumentMetricsResponseV1::set_allocated_ts_event(::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_event_);
  }
  if (ts_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_event));
    if (message_arena != submessage_arena) {
      ts_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts_event, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ts_event_ = ts_event;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamDerivativesInstrumentMetricsResponseV1.ts_event)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace kaikosdk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2fderivatives_5finstrument_5fmetrics_5fv1_2fresponse_2eproto
