// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk/stream/trades_v1/request.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2ftrades_5fv1_2frequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2ftrades_5fv1_2frequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "sdk/core/instrument_criteria.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sdk_2fstream_2ftrades_5fv1_2frequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sdk_2fstream_2ftrades_5fv1_2frequest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sdk_2fstream_2ftrades_5fv1_2frequest_2eproto;
namespace kaikosdk {
class StreamTradesRequestV1;
struct StreamTradesRequestV1DefaultTypeInternal;
extern StreamTradesRequestV1DefaultTypeInternal _StreamTradesRequestV1_default_instance_;
}  // namespace kaikosdk
PROTOBUF_NAMESPACE_OPEN
template<> ::kaikosdk::StreamTradesRequestV1* Arena::CreateMaybeMessage<::kaikosdk::StreamTradesRequestV1>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kaikosdk {

// ===================================================================

class StreamTradesRequestV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.StreamTradesRequestV1) */ {
 public:
  inline StreamTradesRequestV1() : StreamTradesRequestV1(nullptr) {}
  ~StreamTradesRequestV1() override;
  explicit constexpr StreamTradesRequestV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamTradesRequestV1(const StreamTradesRequestV1& from);
  StreamTradesRequestV1(StreamTradesRequestV1&& from) noexcept
    : StreamTradesRequestV1() {
    *this = ::std::move(from);
  }

  inline StreamTradesRequestV1& operator=(const StreamTradesRequestV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamTradesRequestV1& operator=(StreamTradesRequestV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamTradesRequestV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamTradesRequestV1* internal_default_instance() {
    return reinterpret_cast<const StreamTradesRequestV1*>(
               &_StreamTradesRequestV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StreamTradesRequestV1& a, StreamTradesRequestV1& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamTradesRequestV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamTradesRequestV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamTradesRequestV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamTradesRequestV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamTradesRequestV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StreamTradesRequestV1& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamTradesRequestV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.StreamTradesRequestV1";
  }
  protected:
  explicit StreamTradesRequestV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentCriteriaFieldNumber = 1,
  };
  // .kaikosdk.InstrumentCriteria instrument_criteria = 1;
  bool has_instrument_criteria() const;
  private:
  bool _internal_has_instrument_criteria() const;
  public:
  void clear_instrument_criteria();
  const ::kaikosdk::InstrumentCriteria& instrument_criteria() const;
  PROTOBUF_NODISCARD ::kaikosdk::InstrumentCriteria* release_instrument_criteria();
  ::kaikosdk::InstrumentCriteria* mutable_instrument_criteria();
  void set_allocated_instrument_criteria(::kaikosdk::InstrumentCriteria* instrument_criteria);
  private:
  const ::kaikosdk::InstrumentCriteria& _internal_instrument_criteria() const;
  ::kaikosdk::InstrumentCriteria* _internal_mutable_instrument_criteria();
  public:
  void unsafe_arena_set_allocated_instrument_criteria(
      ::kaikosdk::InstrumentCriteria* instrument_criteria);
  ::kaikosdk::InstrumentCriteria* unsafe_arena_release_instrument_criteria();

  // @@protoc_insertion_point(class_scope:kaikosdk.StreamTradesRequestV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kaikosdk::InstrumentCriteria* instrument_criteria_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2fstream_2ftrades_5fv1_2frequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StreamTradesRequestV1

// .kaikosdk.InstrumentCriteria instrument_criteria = 1;
inline bool StreamTradesRequestV1::_internal_has_instrument_criteria() const {
  return this != internal_default_instance() && instrument_criteria_ != nullptr;
}
inline bool StreamTradesRequestV1::has_instrument_criteria() const {
  return _internal_has_instrument_criteria();
}
inline const ::kaikosdk::InstrumentCriteria& StreamTradesRequestV1::_internal_instrument_criteria() const {
  const ::kaikosdk::InstrumentCriteria* p = instrument_criteria_;
  return p != nullptr ? *p : reinterpret_cast<const ::kaikosdk::InstrumentCriteria&>(
      ::kaikosdk::_InstrumentCriteria_default_instance_);
}
inline const ::kaikosdk::InstrumentCriteria& StreamTradesRequestV1::instrument_criteria() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamTradesRequestV1.instrument_criteria)
  return _internal_instrument_criteria();
}
inline void StreamTradesRequestV1::unsafe_arena_set_allocated_instrument_criteria(
    ::kaikosdk::InstrumentCriteria* instrument_criteria) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(instrument_criteria_);
  }
  instrument_criteria_ = instrument_criteria;
  if (instrument_criteria) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamTradesRequestV1.instrument_criteria)
}
inline ::kaikosdk::InstrumentCriteria* StreamTradesRequestV1::release_instrument_criteria() {
  
  ::kaikosdk::InstrumentCriteria* temp = instrument_criteria_;
  instrument_criteria_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kaikosdk::InstrumentCriteria* StreamTradesRequestV1::unsafe_arena_release_instrument_criteria() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamTradesRequestV1.instrument_criteria)
  
  ::kaikosdk::InstrumentCriteria* temp = instrument_criteria_;
  instrument_criteria_ = nullptr;
  return temp;
}
inline ::kaikosdk::InstrumentCriteria* StreamTradesRequestV1::_internal_mutable_instrument_criteria() {
  
  if (instrument_criteria_ == nullptr) {
    auto* p = CreateMaybeMessage<::kaikosdk::InstrumentCriteria>(GetArenaForAllocation());
    instrument_criteria_ = p;
  }
  return instrument_criteria_;
}
inline ::kaikosdk::InstrumentCriteria* StreamTradesRequestV1::mutable_instrument_criteria() {
  ::kaikosdk::InstrumentCriteria* _msg = _internal_mutable_instrument_criteria();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamTradesRequestV1.instrument_criteria)
  return _msg;
}
inline void StreamTradesRequestV1::set_allocated_instrument_criteria(::kaikosdk::InstrumentCriteria* instrument_criteria) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(instrument_criteria_);
  }
  if (instrument_criteria) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(instrument_criteria));
    if (message_arena != submessage_arena) {
      instrument_criteria = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instrument_criteria, submessage_arena);
    }
    
  } else {
    
  }
  instrument_criteria_ = instrument_criteria;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamTradesRequestV1.instrument_criteria)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace kaikosdk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2ftrades_5fv1_2frequest_2eproto
