// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk/stream/derivatives_price_v2/response.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2fderivatives_5fprice_5fv2_2fresponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2fderivatives_5fprice_5fv2_2fresponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "sdk/core/wrappers.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sdk_2fstream_2fderivatives_5fprice_5fv2_2fresponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sdk_2fstream_2fderivatives_5fprice_5fv2_2fresponse_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sdk_2fstream_2fderivatives_5fprice_5fv2_2fresponse_2eproto;
namespace kaikosdk {
class StreamDerivativesPriceResponseV2;
struct StreamDerivativesPriceResponseV2DefaultTypeInternal;
extern StreamDerivativesPriceResponseV2DefaultTypeInternal _StreamDerivativesPriceResponseV2_default_instance_;
class StreamDerivativesPriceResponseV2_ValuesEntry_DoNotUse;
struct StreamDerivativesPriceResponseV2_ValuesEntry_DoNotUseDefaultTypeInternal;
extern StreamDerivativesPriceResponseV2_ValuesEntry_DoNotUseDefaultTypeInternal _StreamDerivativesPriceResponseV2_ValuesEntry_DoNotUse_default_instance_;
}  // namespace kaikosdk
PROTOBUF_NAMESPACE_OPEN
template<> ::kaikosdk::StreamDerivativesPriceResponseV2* Arena::CreateMaybeMessage<::kaikosdk::StreamDerivativesPriceResponseV2>(Arena*);
template<> ::kaikosdk::StreamDerivativesPriceResponseV2_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::kaikosdk::StreamDerivativesPriceResponseV2_ValuesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kaikosdk {

// ===================================================================

class StreamDerivativesPriceResponseV2_ValuesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StreamDerivativesPriceResponseV2_ValuesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StreamDerivativesPriceResponseV2_ValuesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  StreamDerivativesPriceResponseV2_ValuesEntry_DoNotUse();
  explicit constexpr StreamDerivativesPriceResponseV2_ValuesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit StreamDerivativesPriceResponseV2_ValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StreamDerivativesPriceResponseV2_ValuesEntry_DoNotUse& other);
  static const StreamDerivativesPriceResponseV2_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StreamDerivativesPriceResponseV2_ValuesEntry_DoNotUse*>(&_StreamDerivativesPriceResponseV2_ValuesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "kaikosdk.StreamDerivativesPriceResponseV2.ValuesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "kaikosdk.StreamDerivativesPriceResponseV2.ValuesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class StreamDerivativesPriceResponseV2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.StreamDerivativesPriceResponseV2) */ {
 public:
  inline StreamDerivativesPriceResponseV2() : StreamDerivativesPriceResponseV2(nullptr) {}
  ~StreamDerivativesPriceResponseV2() override;
  explicit constexpr StreamDerivativesPriceResponseV2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamDerivativesPriceResponseV2(const StreamDerivativesPriceResponseV2& from);
  StreamDerivativesPriceResponseV2(StreamDerivativesPriceResponseV2&& from) noexcept
    : StreamDerivativesPriceResponseV2() {
    *this = ::std::move(from);
  }

  inline StreamDerivativesPriceResponseV2& operator=(const StreamDerivativesPriceResponseV2& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamDerivativesPriceResponseV2& operator=(StreamDerivativesPriceResponseV2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamDerivativesPriceResponseV2& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamDerivativesPriceResponseV2* internal_default_instance() {
    return reinterpret_cast<const StreamDerivativesPriceResponseV2*>(
               &_StreamDerivativesPriceResponseV2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StreamDerivativesPriceResponseV2& a, StreamDerivativesPriceResponseV2& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamDerivativesPriceResponseV2* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamDerivativesPriceResponseV2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamDerivativesPriceResponseV2* New() const final {
    return new StreamDerivativesPriceResponseV2();
  }

  StreamDerivativesPriceResponseV2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamDerivativesPriceResponseV2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamDerivativesPriceResponseV2& from);
  void MergeFrom(const StreamDerivativesPriceResponseV2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamDerivativesPriceResponseV2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.StreamDerivativesPriceResponseV2";
  }
  protected:
  explicit StreamDerivativesPriceResponseV2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 4,
    kClassFieldNumber = 1,
    kCodeFieldNumber = 2,
    kExchangeFieldNumber = 3,
    kTsExchangeFieldNumber = 5,
    kTsCollectionFieldNumber = 6,
    kTsEventFieldNumber = 7,
  };
  // map<string, string> values = 4;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_values();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_values();

  // string class = 1;
  void clear_class_();
  const std::string& class_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_class_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_class_();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_class_();
  void set_allocated_class_(std::string* class_);
  private:
  const std::string& _internal_class_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_(const std::string& value);
  std::string* _internal_mutable_class_();
  public:

  // string code = 2;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string exchange = 3;
  void clear_exchange();
  const std::string& exchange() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exchange(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exchange();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_exchange();
  void set_allocated_exchange(std::string* exchange);
  private:
  const std::string& _internal_exchange() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange(const std::string& value);
  std::string* _internal_mutable_exchange();
  public:

  // .kaikosdk.TimestampValue ts_exchange = 5;
  bool has_ts_exchange() const;
  private:
  bool _internal_has_ts_exchange() const;
  public:
  void clear_ts_exchange();
  const ::kaikosdk::TimestampValue& ts_exchange() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::kaikosdk::TimestampValue* release_ts_exchange();
  ::kaikosdk::TimestampValue* mutable_ts_exchange();
  void set_allocated_ts_exchange(::kaikosdk::TimestampValue* ts_exchange);
  private:
  const ::kaikosdk::TimestampValue& _internal_ts_exchange() const;
  ::kaikosdk::TimestampValue* _internal_mutable_ts_exchange();
  public:
  void unsafe_arena_set_allocated_ts_exchange(
      ::kaikosdk::TimestampValue* ts_exchange);
  ::kaikosdk::TimestampValue* unsafe_arena_release_ts_exchange();

  // .kaikosdk.TimestampValue ts_collection = 6;
  bool has_ts_collection() const;
  private:
  bool _internal_has_ts_collection() const;
  public:
  void clear_ts_collection();
  const ::kaikosdk::TimestampValue& ts_collection() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::kaikosdk::TimestampValue* release_ts_collection();
  ::kaikosdk::TimestampValue* mutable_ts_collection();
  void set_allocated_ts_collection(::kaikosdk::TimestampValue* ts_collection);
  private:
  const ::kaikosdk::TimestampValue& _internal_ts_collection() const;
  ::kaikosdk::TimestampValue* _internal_mutable_ts_collection();
  public:
  void unsafe_arena_set_allocated_ts_collection(
      ::kaikosdk::TimestampValue* ts_collection);
  ::kaikosdk::TimestampValue* unsafe_arena_release_ts_collection();

  // .google.protobuf.Timestamp ts_event = 7;
  bool has_ts_event() const;
  private:
  bool _internal_has_ts_event() const;
  public:
  void clear_ts_event();
  const PROTOBUF_NAMESPACE_ID::Timestamp& ts_event() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_ts_event();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_ts_event();
  void set_allocated_ts_event(PROTOBUF_NAMESPACE_ID::Timestamp* ts_event);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_ts_event() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_ts_event();
  public:
  void unsafe_arena_set_allocated_ts_event(
      PROTOBUF_NAMESPACE_ID::Timestamp* ts_event);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_ts_event();

  // @@protoc_insertion_point(class_scope:kaikosdk.StreamDerivativesPriceResponseV2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      StreamDerivativesPriceResponseV2_ValuesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_;
  ::kaikosdk::TimestampValue* ts_exchange_;
  ::kaikosdk::TimestampValue* ts_collection_;
  PROTOBUF_NAMESPACE_ID::Timestamp* ts_event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2fstream_2fderivatives_5fprice_5fv2_2fresponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// StreamDerivativesPriceResponseV2

// string class = 1;
inline void StreamDerivativesPriceResponseV2::clear_class_() {
  class__.ClearToEmpty();
}
inline const std::string& StreamDerivativesPriceResponseV2::class_() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamDerivativesPriceResponseV2.class)
  return _internal_class_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamDerivativesPriceResponseV2::set_class_(ArgT0&& arg0, ArgT... args) {
 
 class__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamDerivativesPriceResponseV2.class)
}
inline std::string* StreamDerivativesPriceResponseV2::mutable_class_() {
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamDerivativesPriceResponseV2.class)
  return _internal_mutable_class_();
}
inline const std::string& StreamDerivativesPriceResponseV2::_internal_class_() const {
  return class__.Get();
}
inline void StreamDerivativesPriceResponseV2::_internal_set_class_(const std::string& value) {
  
  class__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StreamDerivativesPriceResponseV2::_internal_mutable_class_() {
  
  return class__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StreamDerivativesPriceResponseV2::release_class_() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamDerivativesPriceResponseV2.class)
  return class__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StreamDerivativesPriceResponseV2::set_allocated_class_(std::string* class_) {
  if (class_ != nullptr) {
    
  } else {
    
  }
  class__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), class_,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamDerivativesPriceResponseV2.class)
}

// string code = 2;
inline void StreamDerivativesPriceResponseV2::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& StreamDerivativesPriceResponseV2::code() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamDerivativesPriceResponseV2.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamDerivativesPriceResponseV2::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamDerivativesPriceResponseV2.code)
}
inline std::string* StreamDerivativesPriceResponseV2::mutable_code() {
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamDerivativesPriceResponseV2.code)
  return _internal_mutable_code();
}
inline const std::string& StreamDerivativesPriceResponseV2::_internal_code() const {
  return code_.Get();
}
inline void StreamDerivativesPriceResponseV2::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StreamDerivativesPriceResponseV2::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StreamDerivativesPriceResponseV2::release_code() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamDerivativesPriceResponseV2.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StreamDerivativesPriceResponseV2::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamDerivativesPriceResponseV2.code)
}

// string exchange = 3;
inline void StreamDerivativesPriceResponseV2::clear_exchange() {
  exchange_.ClearToEmpty();
}
inline const std::string& StreamDerivativesPriceResponseV2::exchange() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamDerivativesPriceResponseV2.exchange)
  return _internal_exchange();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamDerivativesPriceResponseV2::set_exchange(ArgT0&& arg0, ArgT... args) {
 
 exchange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamDerivativesPriceResponseV2.exchange)
}
inline std::string* StreamDerivativesPriceResponseV2::mutable_exchange() {
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamDerivativesPriceResponseV2.exchange)
  return _internal_mutable_exchange();
}
inline const std::string& StreamDerivativesPriceResponseV2::_internal_exchange() const {
  return exchange_.Get();
}
inline void StreamDerivativesPriceResponseV2::_internal_set_exchange(const std::string& value) {
  
  exchange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StreamDerivativesPriceResponseV2::_internal_mutable_exchange() {
  
  return exchange_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StreamDerivativesPriceResponseV2::release_exchange() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamDerivativesPriceResponseV2.exchange)
  return exchange_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StreamDerivativesPriceResponseV2::set_allocated_exchange(std::string* exchange) {
  if (exchange != nullptr) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamDerivativesPriceResponseV2.exchange)
}

// map<string, string> values = 4;
inline int StreamDerivativesPriceResponseV2::_internal_values_size() const {
  return values_.size();
}
inline int StreamDerivativesPriceResponseV2::values_size() const {
  return _internal_values_size();
}
inline void StreamDerivativesPriceResponseV2::clear_values() {
  values_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
StreamDerivativesPriceResponseV2::_internal_values() const {
  return values_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
StreamDerivativesPriceResponseV2::values() const {
  // @@protoc_insertion_point(field_map:kaikosdk.StreamDerivativesPriceResponseV2.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
StreamDerivativesPriceResponseV2::_internal_mutable_values() {
  return values_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
StreamDerivativesPriceResponseV2::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:kaikosdk.StreamDerivativesPriceResponseV2.values)
  return _internal_mutable_values();
}

// .kaikosdk.TimestampValue ts_exchange = 5;
inline bool StreamDerivativesPriceResponseV2::_internal_has_ts_exchange() const {
  return this != internal_default_instance() && ts_exchange_ != nullptr;
}
inline bool StreamDerivativesPriceResponseV2::has_ts_exchange() const {
  return _internal_has_ts_exchange();
}
inline const ::kaikosdk::TimestampValue& StreamDerivativesPriceResponseV2::_internal_ts_exchange() const {
  const ::kaikosdk::TimestampValue* p = ts_exchange_;
  return p != nullptr ? *p : reinterpret_cast<const ::kaikosdk::TimestampValue&>(
      ::kaikosdk::_TimestampValue_default_instance_);
}
inline const ::kaikosdk::TimestampValue& StreamDerivativesPriceResponseV2::ts_exchange() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamDerivativesPriceResponseV2.ts_exchange)
  return _internal_ts_exchange();
}
inline void StreamDerivativesPriceResponseV2::unsafe_arena_set_allocated_ts_exchange(
    ::kaikosdk::TimestampValue* ts_exchange) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_exchange_);
  }
  ts_exchange_ = ts_exchange;
  if (ts_exchange) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamDerivativesPriceResponseV2.ts_exchange)
}
inline ::kaikosdk::TimestampValue* StreamDerivativesPriceResponseV2::release_ts_exchange() {
  
  ::kaikosdk::TimestampValue* temp = ts_exchange_;
  ts_exchange_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kaikosdk::TimestampValue* StreamDerivativesPriceResponseV2::unsafe_arena_release_ts_exchange() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamDerivativesPriceResponseV2.ts_exchange)
  
  ::kaikosdk::TimestampValue* temp = ts_exchange_;
  ts_exchange_ = nullptr;
  return temp;
}
inline ::kaikosdk::TimestampValue* StreamDerivativesPriceResponseV2::_internal_mutable_ts_exchange() {
  
  if (ts_exchange_ == nullptr) {
    auto* p = CreateMaybeMessage<::kaikosdk::TimestampValue>(GetArenaForAllocation());
    ts_exchange_ = p;
  }
  return ts_exchange_;
}
inline ::kaikosdk::TimestampValue* StreamDerivativesPriceResponseV2::mutable_ts_exchange() {
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamDerivativesPriceResponseV2.ts_exchange)
  return _internal_mutable_ts_exchange();
}
inline void StreamDerivativesPriceResponseV2::set_allocated_ts_exchange(::kaikosdk::TimestampValue* ts_exchange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_exchange_);
  }
  if (ts_exchange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_exchange));
    if (message_arena != submessage_arena) {
      ts_exchange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts_exchange, submessage_arena);
    }
    
  } else {
    
  }
  ts_exchange_ = ts_exchange;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamDerivativesPriceResponseV2.ts_exchange)
}

// .kaikosdk.TimestampValue ts_collection = 6;
inline bool StreamDerivativesPriceResponseV2::_internal_has_ts_collection() const {
  return this != internal_default_instance() && ts_collection_ != nullptr;
}
inline bool StreamDerivativesPriceResponseV2::has_ts_collection() const {
  return _internal_has_ts_collection();
}
inline const ::kaikosdk::TimestampValue& StreamDerivativesPriceResponseV2::_internal_ts_collection() const {
  const ::kaikosdk::TimestampValue* p = ts_collection_;
  return p != nullptr ? *p : reinterpret_cast<const ::kaikosdk::TimestampValue&>(
      ::kaikosdk::_TimestampValue_default_instance_);
}
inline const ::kaikosdk::TimestampValue& StreamDerivativesPriceResponseV2::ts_collection() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamDerivativesPriceResponseV2.ts_collection)
  return _internal_ts_collection();
}
inline void StreamDerivativesPriceResponseV2::unsafe_arena_set_allocated_ts_collection(
    ::kaikosdk::TimestampValue* ts_collection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_collection_);
  }
  ts_collection_ = ts_collection;
  if (ts_collection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamDerivativesPriceResponseV2.ts_collection)
}
inline ::kaikosdk::TimestampValue* StreamDerivativesPriceResponseV2::release_ts_collection() {
  
  ::kaikosdk::TimestampValue* temp = ts_collection_;
  ts_collection_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kaikosdk::TimestampValue* StreamDerivativesPriceResponseV2::unsafe_arena_release_ts_collection() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamDerivativesPriceResponseV2.ts_collection)
  
  ::kaikosdk::TimestampValue* temp = ts_collection_;
  ts_collection_ = nullptr;
  return temp;
}
inline ::kaikosdk::TimestampValue* StreamDerivativesPriceResponseV2::_internal_mutable_ts_collection() {
  
  if (ts_collection_ == nullptr) {
    auto* p = CreateMaybeMessage<::kaikosdk::TimestampValue>(GetArenaForAllocation());
    ts_collection_ = p;
  }
  return ts_collection_;
}
inline ::kaikosdk::TimestampValue* StreamDerivativesPriceResponseV2::mutable_ts_collection() {
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamDerivativesPriceResponseV2.ts_collection)
  return _internal_mutable_ts_collection();
}
inline void StreamDerivativesPriceResponseV2::set_allocated_ts_collection(::kaikosdk::TimestampValue* ts_collection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_collection_);
  }
  if (ts_collection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_collection));
    if (message_arena != submessage_arena) {
      ts_collection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts_collection, submessage_arena);
    }
    
  } else {
    
  }
  ts_collection_ = ts_collection;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamDerivativesPriceResponseV2.ts_collection)
}

// .google.protobuf.Timestamp ts_event = 7;
inline bool StreamDerivativesPriceResponseV2::_internal_has_ts_event() const {
  return this != internal_default_instance() && ts_event_ != nullptr;
}
inline bool StreamDerivativesPriceResponseV2::has_ts_event() const {
  return _internal_has_ts_event();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StreamDerivativesPriceResponseV2::_internal_ts_event() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = ts_event_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& StreamDerivativesPriceResponseV2::ts_event() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamDerivativesPriceResponseV2.ts_event)
  return _internal_ts_event();
}
inline void StreamDerivativesPriceResponseV2::unsafe_arena_set_allocated_ts_event(
    PROTOBUF_NAMESPACE_ID::Timestamp* ts_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_event_);
  }
  ts_event_ = ts_event;
  if (ts_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamDerivativesPriceResponseV2.ts_event)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StreamDerivativesPriceResponseV2::release_ts_event() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = ts_event_;
  ts_event_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StreamDerivativesPriceResponseV2::unsafe_arena_release_ts_event() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamDerivativesPriceResponseV2.ts_event)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = ts_event_;
  ts_event_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StreamDerivativesPriceResponseV2::_internal_mutable_ts_event() {
  
  if (ts_event_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    ts_event_ = p;
  }
  return ts_event_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* StreamDerivativesPriceResponseV2::mutable_ts_event() {
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamDerivativesPriceResponseV2.ts_event)
  return _internal_mutable_ts_event();
}
inline void StreamDerivativesPriceResponseV2::set_allocated_ts_event(PROTOBUF_NAMESPACE_ID::Timestamp* ts_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_event_);
  }
  if (ts_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_event));
    if (message_arena != submessage_arena) {
      ts_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts_event, submessage_arena);
    }
    
  } else {
    
  }
  ts_event_ = ts_event;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamDerivativesPriceResponseV2.ts_event)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kaikosdk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2fderivatives_5fprice_5fv2_2fresponse_2eproto
