// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk/stream/aggregated_quote_v2/response.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2faggregated_5fquote_5fv2_2fresponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2faggregated_5fquote_5fv2_2fresponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sdk_2fstream_2faggregated_5fquote_5fv2_2fresponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sdk_2fstream_2faggregated_5fquote_5fv2_2fresponse_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sdk_2fstream_2faggregated_5fquote_5fv2_2fresponse_2eproto;
namespace kaikosdk {
class StreamAggregatedQuoteResponseV2;
struct StreamAggregatedQuoteResponseV2DefaultTypeInternal;
extern StreamAggregatedQuoteResponseV2DefaultTypeInternal _StreamAggregatedQuoteResponseV2_default_instance_;
class StreamAggregatedQuoteValue;
struct StreamAggregatedQuoteValueDefaultTypeInternal;
extern StreamAggregatedQuoteValueDefaultTypeInternal _StreamAggregatedQuoteValue_default_instance_;
}  // namespace kaikosdk
PROTOBUF_NAMESPACE_OPEN
template<> ::kaikosdk::StreamAggregatedQuoteResponseV2* Arena::CreateMaybeMessage<::kaikosdk::StreamAggregatedQuoteResponseV2>(Arena*);
template<> ::kaikosdk::StreamAggregatedQuoteValue* Arena::CreateMaybeMessage<::kaikosdk::StreamAggregatedQuoteValue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kaikosdk {

enum StreamAggregatedQuoteResponseV2_EventType : int {
  StreamAggregatedQuoteResponseV2_EventType_UNKNOWN = 0,
  StreamAggregatedQuoteResponseV2_EventType_BEST_ASK = 1,
  StreamAggregatedQuoteResponseV2_EventType_BEST_BID = 2,
  StreamAggregatedQuoteResponseV2_EventType_StreamAggregatedQuoteResponseV2_EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StreamAggregatedQuoteResponseV2_EventType_StreamAggregatedQuoteResponseV2_EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StreamAggregatedQuoteResponseV2_EventType_IsValid(int value);
constexpr StreamAggregatedQuoteResponseV2_EventType StreamAggregatedQuoteResponseV2_EventType_EventType_MIN = StreamAggregatedQuoteResponseV2_EventType_UNKNOWN;
constexpr StreamAggregatedQuoteResponseV2_EventType StreamAggregatedQuoteResponseV2_EventType_EventType_MAX = StreamAggregatedQuoteResponseV2_EventType_BEST_BID;
constexpr int StreamAggregatedQuoteResponseV2_EventType_EventType_ARRAYSIZE = StreamAggregatedQuoteResponseV2_EventType_EventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamAggregatedQuoteResponseV2_EventType_descriptor();
template<typename T>
inline const std::string& StreamAggregatedQuoteResponseV2_EventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StreamAggregatedQuoteResponseV2_EventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StreamAggregatedQuoteResponseV2_EventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StreamAggregatedQuoteResponseV2_EventType_descriptor(), enum_t_value);
}
inline bool StreamAggregatedQuoteResponseV2_EventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StreamAggregatedQuoteResponseV2_EventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StreamAggregatedQuoteResponseV2_EventType>(
    StreamAggregatedQuoteResponseV2_EventType_descriptor(), name, value);
}
// ===================================================================

class StreamAggregatedQuoteValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.StreamAggregatedQuoteValue) */ {
 public:
  inline StreamAggregatedQuoteValue() : StreamAggregatedQuoteValue(nullptr) {}
  ~StreamAggregatedQuoteValue() override;
  explicit PROTOBUF_CONSTEXPR StreamAggregatedQuoteValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamAggregatedQuoteValue(const StreamAggregatedQuoteValue& from);
  StreamAggregatedQuoteValue(StreamAggregatedQuoteValue&& from) noexcept
    : StreamAggregatedQuoteValue() {
    *this = ::std::move(from);
  }

  inline StreamAggregatedQuoteValue& operator=(const StreamAggregatedQuoteValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamAggregatedQuoteValue& operator=(StreamAggregatedQuoteValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamAggregatedQuoteValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamAggregatedQuoteValue* internal_default_instance() {
    return reinterpret_cast<const StreamAggregatedQuoteValue*>(
               &_StreamAggregatedQuoteValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StreamAggregatedQuoteValue& a, StreamAggregatedQuoteValue& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamAggregatedQuoteValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamAggregatedQuoteValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamAggregatedQuoteValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamAggregatedQuoteValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamAggregatedQuoteValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamAggregatedQuoteValue& from) {
    StreamAggregatedQuoteValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamAggregatedQuoteValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.StreamAggregatedQuoteValue";
  }
  protected:
  explicit StreamAggregatedQuoteValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
    kVolumeFieldNumber = 2,
  };
  // string price = 1;
  void clear_price();
  const std::string& price() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_price(ArgT0&& arg0, ArgT... args);
  std::string* mutable_price();
  PROTOBUF_NODISCARD std::string* release_price();
  void set_allocated_price(std::string* price);
  private:
  const std::string& _internal_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_price(const std::string& value);
  std::string* _internal_mutable_price();
  public:

  // string volume = 2;
  void clear_volume();
  const std::string& volume() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_volume(ArgT0&& arg0, ArgT... args);
  std::string* mutable_volume();
  PROTOBUF_NODISCARD std::string* release_volume();
  void set_allocated_volume(std::string* volume);
  private:
  const std::string& _internal_volume() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_volume(const std::string& value);
  std::string* _internal_mutable_volume();
  public:

  // @@protoc_insertion_point(class_scope:kaikosdk.StreamAggregatedQuoteValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2fstream_2faggregated_5fquote_5fv2_2fresponse_2eproto;
};
// -------------------------------------------------------------------

class StreamAggregatedQuoteResponseV2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.StreamAggregatedQuoteResponseV2) */ {
 public:
  inline StreamAggregatedQuoteResponseV2() : StreamAggregatedQuoteResponseV2(nullptr) {}
  ~StreamAggregatedQuoteResponseV2() override;
  explicit PROTOBUF_CONSTEXPR StreamAggregatedQuoteResponseV2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamAggregatedQuoteResponseV2(const StreamAggregatedQuoteResponseV2& from);
  StreamAggregatedQuoteResponseV2(StreamAggregatedQuoteResponseV2&& from) noexcept
    : StreamAggregatedQuoteResponseV2() {
    *this = ::std::move(from);
  }

  inline StreamAggregatedQuoteResponseV2& operator=(const StreamAggregatedQuoteResponseV2& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamAggregatedQuoteResponseV2& operator=(StreamAggregatedQuoteResponseV2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamAggregatedQuoteResponseV2& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamAggregatedQuoteResponseV2* internal_default_instance() {
    return reinterpret_cast<const StreamAggregatedQuoteResponseV2*>(
               &_StreamAggregatedQuoteResponseV2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StreamAggregatedQuoteResponseV2& a, StreamAggregatedQuoteResponseV2& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamAggregatedQuoteResponseV2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamAggregatedQuoteResponseV2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamAggregatedQuoteResponseV2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamAggregatedQuoteResponseV2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamAggregatedQuoteResponseV2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamAggregatedQuoteResponseV2& from) {
    StreamAggregatedQuoteResponseV2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamAggregatedQuoteResponseV2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.StreamAggregatedQuoteResponseV2";
  }
  protected:
  explicit StreamAggregatedQuoteResponseV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StreamAggregatedQuoteResponseV2_EventType EventType;
  static constexpr EventType UNKNOWN =
    StreamAggregatedQuoteResponseV2_EventType_UNKNOWN;
  static constexpr EventType BEST_ASK =
    StreamAggregatedQuoteResponseV2_EventType_BEST_ASK;
  static constexpr EventType BEST_BID =
    StreamAggregatedQuoteResponseV2_EventType_BEST_BID;
  static inline bool EventType_IsValid(int value) {
    return StreamAggregatedQuoteResponseV2_EventType_IsValid(value);
  }
  static constexpr EventType EventType_MIN =
    StreamAggregatedQuoteResponseV2_EventType_EventType_MIN;
  static constexpr EventType EventType_MAX =
    StreamAggregatedQuoteResponseV2_EventType_EventType_MAX;
  static constexpr int EventType_ARRAYSIZE =
    StreamAggregatedQuoteResponseV2_EventType_EventType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EventType_descriptor() {
    return StreamAggregatedQuoteResponseV2_EventType_descriptor();
  }
  template<typename T>
  static inline const std::string& EventType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EventType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EventType_Name.");
    return StreamAggregatedQuoteResponseV2_EventType_Name(enum_t_value);
  }
  static inline bool EventType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EventType* value) {
    return StreamAggregatedQuoteResponseV2_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAggregateFieldNumber = 1,
    kInstrumentClassFieldNumber = 2,
    kCodeFieldNumber = 3,
    kTsEventFieldNumber = 5,
    kVettedFieldNumber = 6,
    kUnvettedFieldNumber = 7,
    kEventTypeFieldNumber = 4,
  };
  // string aggregate = 1;
  void clear_aggregate();
  const std::string& aggregate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_aggregate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_aggregate();
  PROTOBUF_NODISCARD std::string* release_aggregate();
  void set_allocated_aggregate(std::string* aggregate);
  private:
  const std::string& _internal_aggregate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_aggregate(const std::string& value);
  std::string* _internal_mutable_aggregate();
  public:

  // string instrument_class = 2;
  void clear_instrument_class();
  const std::string& instrument_class() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_class(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_class();
  PROTOBUF_NODISCARD std::string* release_instrument_class();
  void set_allocated_instrument_class(std::string* instrument_class);
  private:
  const std::string& _internal_instrument_class() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_class(const std::string& value);
  std::string* _internal_mutable_instrument_class();
  public:

  // string code = 3;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // .google.protobuf.Timestamp ts_event = 5;
  bool has_ts_event() const;
  private:
  bool _internal_has_ts_event() const;
  public:
  void clear_ts_event();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts_event() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_ts_event();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_ts_event();
  void set_allocated_ts_event(::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_ts_event() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_ts_event();
  public:
  void unsafe_arena_set_allocated_ts_event(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_ts_event();

  // .kaikosdk.StreamAggregatedQuoteValue vetted = 6;
  bool has_vetted() const;
  private:
  bool _internal_has_vetted() const;
  public:
  void clear_vetted();
  const ::kaikosdk::StreamAggregatedQuoteValue& vetted() const;
  PROTOBUF_NODISCARD ::kaikosdk::StreamAggregatedQuoteValue* release_vetted();
  ::kaikosdk::StreamAggregatedQuoteValue* mutable_vetted();
  void set_allocated_vetted(::kaikosdk::StreamAggregatedQuoteValue* vetted);
  private:
  const ::kaikosdk::StreamAggregatedQuoteValue& _internal_vetted() const;
  ::kaikosdk::StreamAggregatedQuoteValue* _internal_mutable_vetted();
  public:
  void unsafe_arena_set_allocated_vetted(
      ::kaikosdk::StreamAggregatedQuoteValue* vetted);
  ::kaikosdk::StreamAggregatedQuoteValue* unsafe_arena_release_vetted();

  // .kaikosdk.StreamAggregatedQuoteValue unvetted = 7;
  bool has_unvetted() const;
  private:
  bool _internal_has_unvetted() const;
  public:
  void clear_unvetted();
  const ::kaikosdk::StreamAggregatedQuoteValue& unvetted() const;
  PROTOBUF_NODISCARD ::kaikosdk::StreamAggregatedQuoteValue* release_unvetted();
  ::kaikosdk::StreamAggregatedQuoteValue* mutable_unvetted();
  void set_allocated_unvetted(::kaikosdk::StreamAggregatedQuoteValue* unvetted);
  private:
  const ::kaikosdk::StreamAggregatedQuoteValue& _internal_unvetted() const;
  ::kaikosdk::StreamAggregatedQuoteValue* _internal_mutable_unvetted();
  public:
  void unsafe_arena_set_allocated_unvetted(
      ::kaikosdk::StreamAggregatedQuoteValue* unvetted);
  ::kaikosdk::StreamAggregatedQuoteValue* unsafe_arena_release_unvetted();

  // .kaikosdk.StreamAggregatedQuoteResponseV2.EventType event_type = 4;
  void clear_event_type();
  ::kaikosdk::StreamAggregatedQuoteResponseV2_EventType event_type() const;
  void set_event_type(::kaikosdk::StreamAggregatedQuoteResponseV2_EventType value);
  private:
  ::kaikosdk::StreamAggregatedQuoteResponseV2_EventType _internal_event_type() const;
  void _internal_set_event_type(::kaikosdk::StreamAggregatedQuoteResponseV2_EventType value);
  public:

  // @@protoc_insertion_point(class_scope:kaikosdk.StreamAggregatedQuoteResponseV2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aggregate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_class_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event_;
    ::kaikosdk::StreamAggregatedQuoteValue* vetted_;
    ::kaikosdk::StreamAggregatedQuoteValue* unvetted_;
    int event_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2fstream_2faggregated_5fquote_5fv2_2fresponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StreamAggregatedQuoteValue

// string price = 1;
inline void StreamAggregatedQuoteValue::clear_price() {
  _impl_.price_.ClearToEmpty();
}
inline const std::string& StreamAggregatedQuoteValue::price() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamAggregatedQuoteValue.price)
  return _internal_price();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamAggregatedQuoteValue::set_price(ArgT0&& arg0, ArgT... args) {
 
 _impl_.price_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamAggregatedQuoteValue.price)
}
inline std::string* StreamAggregatedQuoteValue::mutable_price() {
  std::string* _s = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamAggregatedQuoteValue.price)
  return _s;
}
inline const std::string& StreamAggregatedQuoteValue::_internal_price() const {
  return _impl_.price_.Get();
}
inline void StreamAggregatedQuoteValue::_internal_set_price(const std::string& value) {
  
  _impl_.price_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamAggregatedQuoteValue::_internal_mutable_price() {
  
  return _impl_.price_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamAggregatedQuoteValue::release_price() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamAggregatedQuoteValue.price)
  return _impl_.price_.Release();
}
inline void StreamAggregatedQuoteValue::set_allocated_price(std::string* price) {
  if (price != nullptr) {
    
  } else {
    
  }
  _impl_.price_.SetAllocated(price, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.price_.IsDefault()) {
    _impl_.price_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamAggregatedQuoteValue.price)
}

// string volume = 2;
inline void StreamAggregatedQuoteValue::clear_volume() {
  _impl_.volume_.ClearToEmpty();
}
inline const std::string& StreamAggregatedQuoteValue::volume() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamAggregatedQuoteValue.volume)
  return _internal_volume();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamAggregatedQuoteValue::set_volume(ArgT0&& arg0, ArgT... args) {
 
 _impl_.volume_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamAggregatedQuoteValue.volume)
}
inline std::string* StreamAggregatedQuoteValue::mutable_volume() {
  std::string* _s = _internal_mutable_volume();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamAggregatedQuoteValue.volume)
  return _s;
}
inline const std::string& StreamAggregatedQuoteValue::_internal_volume() const {
  return _impl_.volume_.Get();
}
inline void StreamAggregatedQuoteValue::_internal_set_volume(const std::string& value) {
  
  _impl_.volume_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamAggregatedQuoteValue::_internal_mutable_volume() {
  
  return _impl_.volume_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamAggregatedQuoteValue::release_volume() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamAggregatedQuoteValue.volume)
  return _impl_.volume_.Release();
}
inline void StreamAggregatedQuoteValue::set_allocated_volume(std::string* volume) {
  if (volume != nullptr) {
    
  } else {
    
  }
  _impl_.volume_.SetAllocated(volume, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.volume_.IsDefault()) {
    _impl_.volume_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamAggregatedQuoteValue.volume)
}

// -------------------------------------------------------------------

// StreamAggregatedQuoteResponseV2

// string aggregate = 1;
inline void StreamAggregatedQuoteResponseV2::clear_aggregate() {
  _impl_.aggregate_.ClearToEmpty();
}
inline const std::string& StreamAggregatedQuoteResponseV2::aggregate() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamAggregatedQuoteResponseV2.aggregate)
  return _internal_aggregate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamAggregatedQuoteResponseV2::set_aggregate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.aggregate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamAggregatedQuoteResponseV2.aggregate)
}
inline std::string* StreamAggregatedQuoteResponseV2::mutable_aggregate() {
  std::string* _s = _internal_mutable_aggregate();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamAggregatedQuoteResponseV2.aggregate)
  return _s;
}
inline const std::string& StreamAggregatedQuoteResponseV2::_internal_aggregate() const {
  return _impl_.aggregate_.Get();
}
inline void StreamAggregatedQuoteResponseV2::_internal_set_aggregate(const std::string& value) {
  
  _impl_.aggregate_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamAggregatedQuoteResponseV2::_internal_mutable_aggregate() {
  
  return _impl_.aggregate_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamAggregatedQuoteResponseV2::release_aggregate() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamAggregatedQuoteResponseV2.aggregate)
  return _impl_.aggregate_.Release();
}
inline void StreamAggregatedQuoteResponseV2::set_allocated_aggregate(std::string* aggregate) {
  if (aggregate != nullptr) {
    
  } else {
    
  }
  _impl_.aggregate_.SetAllocated(aggregate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.aggregate_.IsDefault()) {
    _impl_.aggregate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamAggregatedQuoteResponseV2.aggregate)
}

// string instrument_class = 2;
inline void StreamAggregatedQuoteResponseV2::clear_instrument_class() {
  _impl_.instrument_class_.ClearToEmpty();
}
inline const std::string& StreamAggregatedQuoteResponseV2::instrument_class() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamAggregatedQuoteResponseV2.instrument_class)
  return _internal_instrument_class();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamAggregatedQuoteResponseV2::set_instrument_class(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instrument_class_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamAggregatedQuoteResponseV2.instrument_class)
}
inline std::string* StreamAggregatedQuoteResponseV2::mutable_instrument_class() {
  std::string* _s = _internal_mutable_instrument_class();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamAggregatedQuoteResponseV2.instrument_class)
  return _s;
}
inline const std::string& StreamAggregatedQuoteResponseV2::_internal_instrument_class() const {
  return _impl_.instrument_class_.Get();
}
inline void StreamAggregatedQuoteResponseV2::_internal_set_instrument_class(const std::string& value) {
  
  _impl_.instrument_class_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamAggregatedQuoteResponseV2::_internal_mutable_instrument_class() {
  
  return _impl_.instrument_class_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamAggregatedQuoteResponseV2::release_instrument_class() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamAggregatedQuoteResponseV2.instrument_class)
  return _impl_.instrument_class_.Release();
}
inline void StreamAggregatedQuoteResponseV2::set_allocated_instrument_class(std::string* instrument_class) {
  if (instrument_class != nullptr) {
    
  } else {
    
  }
  _impl_.instrument_class_.SetAllocated(instrument_class, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instrument_class_.IsDefault()) {
    _impl_.instrument_class_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamAggregatedQuoteResponseV2.instrument_class)
}

// string code = 3;
inline void StreamAggregatedQuoteResponseV2::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& StreamAggregatedQuoteResponseV2::code() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamAggregatedQuoteResponseV2.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamAggregatedQuoteResponseV2::set_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamAggregatedQuoteResponseV2.code)
}
inline std::string* StreamAggregatedQuoteResponseV2::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamAggregatedQuoteResponseV2.code)
  return _s;
}
inline const std::string& StreamAggregatedQuoteResponseV2::_internal_code() const {
  return _impl_.code_.Get();
}
inline void StreamAggregatedQuoteResponseV2::_internal_set_code(const std::string& value) {
  
  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamAggregatedQuoteResponseV2::_internal_mutable_code() {
  
  return _impl_.code_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamAggregatedQuoteResponseV2::release_code() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamAggregatedQuoteResponseV2.code)
  return _impl_.code_.Release();
}
inline void StreamAggregatedQuoteResponseV2::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  _impl_.code_.SetAllocated(code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.code_.IsDefault()) {
    _impl_.code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamAggregatedQuoteResponseV2.code)
}

// .kaikosdk.StreamAggregatedQuoteResponseV2.EventType event_type = 4;
inline void StreamAggregatedQuoteResponseV2::clear_event_type() {
  _impl_.event_type_ = 0;
}
inline ::kaikosdk::StreamAggregatedQuoteResponseV2_EventType StreamAggregatedQuoteResponseV2::_internal_event_type() const {
  return static_cast< ::kaikosdk::StreamAggregatedQuoteResponseV2_EventType >(_impl_.event_type_);
}
inline ::kaikosdk::StreamAggregatedQuoteResponseV2_EventType StreamAggregatedQuoteResponseV2::event_type() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamAggregatedQuoteResponseV2.event_type)
  return _internal_event_type();
}
inline void StreamAggregatedQuoteResponseV2::_internal_set_event_type(::kaikosdk::StreamAggregatedQuoteResponseV2_EventType value) {
  
  _impl_.event_type_ = value;
}
inline void StreamAggregatedQuoteResponseV2::set_event_type(::kaikosdk::StreamAggregatedQuoteResponseV2_EventType value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamAggregatedQuoteResponseV2.event_type)
}

// .google.protobuf.Timestamp ts_event = 5;
inline bool StreamAggregatedQuoteResponseV2::_internal_has_ts_event() const {
  return this != internal_default_instance() && _impl_.ts_event_ != nullptr;
}
inline bool StreamAggregatedQuoteResponseV2::has_ts_event() const {
  return _internal_has_ts_event();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamAggregatedQuoteResponseV2::_internal_ts_event() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.ts_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamAggregatedQuoteResponseV2::ts_event() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamAggregatedQuoteResponseV2.ts_event)
  return _internal_ts_event();
}
inline void StreamAggregatedQuoteResponseV2::unsafe_arena_set_allocated_ts_event(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_event_);
  }
  _impl_.ts_event_ = ts_event;
  if (ts_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamAggregatedQuoteResponseV2.ts_event)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamAggregatedQuoteResponseV2::release_ts_event() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_event_;
  _impl_.ts_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamAggregatedQuoteResponseV2::unsafe_arena_release_ts_event() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamAggregatedQuoteResponseV2.ts_event)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_event_;
  _impl_.ts_event_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamAggregatedQuoteResponseV2::_internal_mutable_ts_event() {
  
  if (_impl_.ts_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.ts_event_ = p;
  }
  return _impl_.ts_event_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamAggregatedQuoteResponseV2::mutable_ts_event() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_ts_event();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamAggregatedQuoteResponseV2.ts_event)
  return _msg;
}
inline void StreamAggregatedQuoteResponseV2::set_allocated_ts_event(::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_event_);
  }
  if (ts_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_event));
    if (message_arena != submessage_arena) {
      ts_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts_event, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ts_event_ = ts_event;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamAggregatedQuoteResponseV2.ts_event)
}

// .kaikosdk.StreamAggregatedQuoteValue vetted = 6;
inline bool StreamAggregatedQuoteResponseV2::_internal_has_vetted() const {
  return this != internal_default_instance() && _impl_.vetted_ != nullptr;
}
inline bool StreamAggregatedQuoteResponseV2::has_vetted() const {
  return _internal_has_vetted();
}
inline void StreamAggregatedQuoteResponseV2::clear_vetted() {
  if (GetArenaForAllocation() == nullptr && _impl_.vetted_ != nullptr) {
    delete _impl_.vetted_;
  }
  _impl_.vetted_ = nullptr;
}
inline const ::kaikosdk::StreamAggregatedQuoteValue& StreamAggregatedQuoteResponseV2::_internal_vetted() const {
  const ::kaikosdk::StreamAggregatedQuoteValue* p = _impl_.vetted_;
  return p != nullptr ? *p : reinterpret_cast<const ::kaikosdk::StreamAggregatedQuoteValue&>(
      ::kaikosdk::_StreamAggregatedQuoteValue_default_instance_);
}
inline const ::kaikosdk::StreamAggregatedQuoteValue& StreamAggregatedQuoteResponseV2::vetted() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamAggregatedQuoteResponseV2.vetted)
  return _internal_vetted();
}
inline void StreamAggregatedQuoteResponseV2::unsafe_arena_set_allocated_vetted(
    ::kaikosdk::StreamAggregatedQuoteValue* vetted) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vetted_);
  }
  _impl_.vetted_ = vetted;
  if (vetted) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamAggregatedQuoteResponseV2.vetted)
}
inline ::kaikosdk::StreamAggregatedQuoteValue* StreamAggregatedQuoteResponseV2::release_vetted() {
  
  ::kaikosdk::StreamAggregatedQuoteValue* temp = _impl_.vetted_;
  _impl_.vetted_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kaikosdk::StreamAggregatedQuoteValue* StreamAggregatedQuoteResponseV2::unsafe_arena_release_vetted() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamAggregatedQuoteResponseV2.vetted)
  
  ::kaikosdk::StreamAggregatedQuoteValue* temp = _impl_.vetted_;
  _impl_.vetted_ = nullptr;
  return temp;
}
inline ::kaikosdk::StreamAggregatedQuoteValue* StreamAggregatedQuoteResponseV2::_internal_mutable_vetted() {
  
  if (_impl_.vetted_ == nullptr) {
    auto* p = CreateMaybeMessage<::kaikosdk::StreamAggregatedQuoteValue>(GetArenaForAllocation());
    _impl_.vetted_ = p;
  }
  return _impl_.vetted_;
}
inline ::kaikosdk::StreamAggregatedQuoteValue* StreamAggregatedQuoteResponseV2::mutable_vetted() {
  ::kaikosdk::StreamAggregatedQuoteValue* _msg = _internal_mutable_vetted();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamAggregatedQuoteResponseV2.vetted)
  return _msg;
}
inline void StreamAggregatedQuoteResponseV2::set_allocated_vetted(::kaikosdk::StreamAggregatedQuoteValue* vetted) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vetted_;
  }
  if (vetted) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vetted);
    if (message_arena != submessage_arena) {
      vetted = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vetted, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vetted_ = vetted;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamAggregatedQuoteResponseV2.vetted)
}

// .kaikosdk.StreamAggregatedQuoteValue unvetted = 7;
inline bool StreamAggregatedQuoteResponseV2::_internal_has_unvetted() const {
  return this != internal_default_instance() && _impl_.unvetted_ != nullptr;
}
inline bool StreamAggregatedQuoteResponseV2::has_unvetted() const {
  return _internal_has_unvetted();
}
inline void StreamAggregatedQuoteResponseV2::clear_unvetted() {
  if (GetArenaForAllocation() == nullptr && _impl_.unvetted_ != nullptr) {
    delete _impl_.unvetted_;
  }
  _impl_.unvetted_ = nullptr;
}
inline const ::kaikosdk::StreamAggregatedQuoteValue& StreamAggregatedQuoteResponseV2::_internal_unvetted() const {
  const ::kaikosdk::StreamAggregatedQuoteValue* p = _impl_.unvetted_;
  return p != nullptr ? *p : reinterpret_cast<const ::kaikosdk::StreamAggregatedQuoteValue&>(
      ::kaikosdk::_StreamAggregatedQuoteValue_default_instance_);
}
inline const ::kaikosdk::StreamAggregatedQuoteValue& StreamAggregatedQuoteResponseV2::unvetted() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamAggregatedQuoteResponseV2.unvetted)
  return _internal_unvetted();
}
inline void StreamAggregatedQuoteResponseV2::unsafe_arena_set_allocated_unvetted(
    ::kaikosdk::StreamAggregatedQuoteValue* unvetted) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unvetted_);
  }
  _impl_.unvetted_ = unvetted;
  if (unvetted) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamAggregatedQuoteResponseV2.unvetted)
}
inline ::kaikosdk::StreamAggregatedQuoteValue* StreamAggregatedQuoteResponseV2::release_unvetted() {
  
  ::kaikosdk::StreamAggregatedQuoteValue* temp = _impl_.unvetted_;
  _impl_.unvetted_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kaikosdk::StreamAggregatedQuoteValue* StreamAggregatedQuoteResponseV2::unsafe_arena_release_unvetted() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamAggregatedQuoteResponseV2.unvetted)
  
  ::kaikosdk::StreamAggregatedQuoteValue* temp = _impl_.unvetted_;
  _impl_.unvetted_ = nullptr;
  return temp;
}
inline ::kaikosdk::StreamAggregatedQuoteValue* StreamAggregatedQuoteResponseV2::_internal_mutable_unvetted() {
  
  if (_impl_.unvetted_ == nullptr) {
    auto* p = CreateMaybeMessage<::kaikosdk::StreamAggregatedQuoteValue>(GetArenaForAllocation());
    _impl_.unvetted_ = p;
  }
  return _impl_.unvetted_;
}
inline ::kaikosdk::StreamAggregatedQuoteValue* StreamAggregatedQuoteResponseV2::mutable_unvetted() {
  ::kaikosdk::StreamAggregatedQuoteValue* _msg = _internal_mutable_unvetted();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamAggregatedQuoteResponseV2.unvetted)
  return _msg;
}
inline void StreamAggregatedQuoteResponseV2::set_allocated_unvetted(::kaikosdk::StreamAggregatedQuoteValue* unvetted) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.unvetted_;
  }
  if (unvetted) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(unvetted);
    if (message_arena != submessage_arena) {
      unvetted = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unvetted, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.unvetted_ = unvetted;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamAggregatedQuoteResponseV2.unvetted)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kaikosdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::kaikosdk::StreamAggregatedQuoteResponseV2_EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kaikosdk::StreamAggregatedQuoteResponseV2_EventType>() {
  return ::kaikosdk::StreamAggregatedQuoteResponseV2_EventType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2faggregated_5fquote_5fv2_2fresponse_2eproto
