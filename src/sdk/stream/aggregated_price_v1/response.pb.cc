// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk/stream/aggregated_price_v1/response.proto

#include "sdk/stream/aggregated_price_v1/response.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace kaikosdk {
constexpr StreamAggregatedPriceValue::StreamAggregatedPriceValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : price_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , volume_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct StreamAggregatedPriceValueDefaultTypeInternal {
  constexpr StreamAggregatedPriceValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamAggregatedPriceValueDefaultTypeInternal() {}
  union {
    StreamAggregatedPriceValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamAggregatedPriceValueDefaultTypeInternal _StreamAggregatedPriceValue_default_instance_;
constexpr StreamAggregatedPriceResponseV1::StreamAggregatedPriceResponseV1(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : aggregate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , instrument_class_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr)
  , ts_event_(nullptr)
  , event_type_(0)
{}
struct StreamAggregatedPriceResponseV1DefaultTypeInternal {
  constexpr StreamAggregatedPriceResponseV1DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamAggregatedPriceResponseV1DefaultTypeInternal() {}
  union {
    StreamAggregatedPriceResponseV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamAggregatedPriceResponseV1DefaultTypeInternal _StreamAggregatedPriceResponseV1_default_instance_;
}  // namespace kaikosdk
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto = nullptr;

const uint32_t TableStruct_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamAggregatedPriceValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamAggregatedPriceValue, price_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamAggregatedPriceValue, volume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamAggregatedPriceResponseV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamAggregatedPriceResponseV1, aggregate_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamAggregatedPriceResponseV1, instrument_class_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamAggregatedPriceResponseV1, code_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamAggregatedPriceResponseV1, value_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamAggregatedPriceResponseV1, event_type_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamAggregatedPriceResponseV1, ts_event_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::kaikosdk::StreamAggregatedPriceValue)},
  { 8, -1, -1, sizeof(::kaikosdk::StreamAggregatedPriceResponseV1)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaikosdk::_StreamAggregatedPriceValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaikosdk::_StreamAggregatedPriceResponseV1_default_instance_),
};

const char descriptor_table_protodef_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-sdk/stream/aggregated_price_v1/respons"
  "e.proto\022\010kaikosdk\032\037google/protobuf/times"
  "tamp.proto\";\n\032StreamAggregatedPriceValue"
  "\022\r\n\005price\030\001 \001(\t\022\016\n\006volume\030\002 \001(\t\"\276\002\n\037Stre"
  "amAggregatedPriceResponseV1\022\021\n\taggregate"
  "\030\001 \001(\t\022\030\n\020instrument_class\030\002 \001(\t\022\014\n\004code"
  "\030\003 \001(\t\0223\n\005value\030\004 \001(\0132$.kaikosdk.StreamA"
  "ggregatedPriceValue\022G\n\nevent_type\030\005 \001(\0162"
  "3.kaikosdk.StreamAggregatedPriceResponse"
  "V1.EventType\022,\n\010ts_event\030\006 \001(\0132\032.google."
  "protobuf.Timestamp\"4\n\tEventType\022\013\n\007UNKNO"
  "WN\020\000\022\014\n\010BEST_ASK\020\001\022\014\n\010BEST_BID\020\002B\247\001\n(com"
  ".kaiko.sdk.stream.aggregated_price_v1P\001Z"
  "Ugithub.com/challengerdeep/kaiko-go-sdk/"
  "stream/aggregated_price_v1;aggregated_pr"
  "ice_v1\252\002!KaikoSdk.Stream.AggregatedPrice"
  "V1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto = {
  false, false, 650, descriptor_table_protodef_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto, "sdk/stream/aggregated_price_v1/response.proto", 
  &descriptor_table_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto_once, descriptor_table_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto::offsets,
  file_level_metadata_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto, file_level_enum_descriptors_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto, file_level_service_descriptors_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto_getter() {
  return &descriptor_table_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto(&descriptor_table_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto);
namespace kaikosdk {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamAggregatedPriceResponseV1_EventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto);
  return file_level_enum_descriptors_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto[0];
}
bool StreamAggregatedPriceResponseV1_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr StreamAggregatedPriceResponseV1_EventType StreamAggregatedPriceResponseV1::UNKNOWN;
constexpr StreamAggregatedPriceResponseV1_EventType StreamAggregatedPriceResponseV1::BEST_ASK;
constexpr StreamAggregatedPriceResponseV1_EventType StreamAggregatedPriceResponseV1::BEST_BID;
constexpr StreamAggregatedPriceResponseV1_EventType StreamAggregatedPriceResponseV1::EventType_MIN;
constexpr StreamAggregatedPriceResponseV1_EventType StreamAggregatedPriceResponseV1::EventType_MAX;
constexpr int StreamAggregatedPriceResponseV1::EventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class StreamAggregatedPriceValue::_Internal {
 public:
};

StreamAggregatedPriceValue::StreamAggregatedPriceValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kaikosdk.StreamAggregatedPriceValue)
}
StreamAggregatedPriceValue::StreamAggregatedPriceValue(const StreamAggregatedPriceValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    price_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_price().empty()) {
    price_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_price(), 
      GetArenaForAllocation());
  }
  volume_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    volume_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_volume().empty()) {
    volume_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_volume(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:kaikosdk.StreamAggregatedPriceValue)
}

inline void StreamAggregatedPriceValue::SharedCtor() {
price_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  price_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
volume_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  volume_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamAggregatedPriceValue::~StreamAggregatedPriceValue() {
  // @@protoc_insertion_point(destructor:kaikosdk.StreamAggregatedPriceValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamAggregatedPriceValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  price_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  volume_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StreamAggregatedPriceValue::ArenaDtor(void* object) {
  StreamAggregatedPriceValue* _this = reinterpret_cast< StreamAggregatedPriceValue* >(object);
  (void)_this;
}
void StreamAggregatedPriceValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamAggregatedPriceValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamAggregatedPriceValue::Clear() {
// @@protoc_insertion_point(message_clear_start:kaikosdk.StreamAggregatedPriceValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  price_.ClearToEmpty();
  volume_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamAggregatedPriceValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_price();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaikosdk.StreamAggregatedPriceValue.price"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string volume = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_volume();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaikosdk.StreamAggregatedPriceValue.volume"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamAggregatedPriceValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaikosdk.StreamAggregatedPriceValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string price = 1;
  if (!this->_internal_price().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_price().data(), static_cast<int>(this->_internal_price().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamAggregatedPriceValue.price");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_price(), target);
  }

  // string volume = 2;
  if (!this->_internal_volume().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_volume().data(), static_cast<int>(this->_internal_volume().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamAggregatedPriceValue.volume");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_volume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaikosdk.StreamAggregatedPriceValue)
  return target;
}

size_t StreamAggregatedPriceValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaikosdk.StreamAggregatedPriceValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string price = 1;
  if (!this->_internal_price().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_price());
  }

  // string volume = 2;
  if (!this->_internal_volume().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_volume());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamAggregatedPriceValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamAggregatedPriceValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamAggregatedPriceValue::GetClassData() const { return &_class_data_; }

void StreamAggregatedPriceValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamAggregatedPriceValue *>(to)->MergeFrom(
      static_cast<const StreamAggregatedPriceValue &>(from));
}


void StreamAggregatedPriceValue::MergeFrom(const StreamAggregatedPriceValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kaikosdk.StreamAggregatedPriceValue)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_price().empty()) {
    _internal_set_price(from._internal_price());
  }
  if (!from._internal_volume().empty()) {
    _internal_set_volume(from._internal_volume());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamAggregatedPriceValue::CopyFrom(const StreamAggregatedPriceValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaikosdk.StreamAggregatedPriceValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamAggregatedPriceValue::IsInitialized() const {
  return true;
}

void StreamAggregatedPriceValue::InternalSwap(StreamAggregatedPriceValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &price_, lhs_arena,
      &other->price_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &volume_, lhs_arena,
      &other->volume_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamAggregatedPriceValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto_getter, &descriptor_table_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto_once,
      file_level_metadata_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto[0]);
}

// ===================================================================

class StreamAggregatedPriceResponseV1::_Internal {
 public:
  static const ::kaikosdk::StreamAggregatedPriceValue& value(const StreamAggregatedPriceResponseV1* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts_event(const StreamAggregatedPriceResponseV1* msg);
};

const ::kaikosdk::StreamAggregatedPriceValue&
StreamAggregatedPriceResponseV1::_Internal::value(const StreamAggregatedPriceResponseV1* msg) {
  return *msg->value_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
StreamAggregatedPriceResponseV1::_Internal::ts_event(const StreamAggregatedPriceResponseV1* msg) {
  return *msg->ts_event_;
}
void StreamAggregatedPriceResponseV1::clear_ts_event() {
  if (GetArenaForAllocation() == nullptr && ts_event_ != nullptr) {
    delete ts_event_;
  }
  ts_event_ = nullptr;
}
StreamAggregatedPriceResponseV1::StreamAggregatedPriceResponseV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:kaikosdk.StreamAggregatedPriceResponseV1)
}
StreamAggregatedPriceResponseV1::StreamAggregatedPriceResponseV1(const StreamAggregatedPriceResponseV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  aggregate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    aggregate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_aggregate().empty()) {
    aggregate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_aggregate(), 
      GetArenaForAllocation());
  }
  instrument_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    instrument_class_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrument_class().empty()) {
    instrument_class_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_instrument_class(), 
      GetArenaForAllocation());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    value_ = new ::kaikosdk::StreamAggregatedPriceValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  if (from._internal_has_ts_event()) {
    ts_event_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.ts_event_);
  } else {
    ts_event_ = nullptr;
  }
  event_type_ = from.event_type_;
  // @@protoc_insertion_point(copy_constructor:kaikosdk.StreamAggregatedPriceResponseV1)
}

inline void StreamAggregatedPriceResponseV1::SharedCtor() {
aggregate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  aggregate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
instrument_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  instrument_class_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_type_) -
    reinterpret_cast<char*>(&value_)) + sizeof(event_type_));
}

StreamAggregatedPriceResponseV1::~StreamAggregatedPriceResponseV1() {
  // @@protoc_insertion_point(destructor:kaikosdk.StreamAggregatedPriceResponseV1)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamAggregatedPriceResponseV1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  aggregate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_class_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
  if (this != internal_default_instance()) delete ts_event_;
}

void StreamAggregatedPriceResponseV1::ArenaDtor(void* object) {
  StreamAggregatedPriceResponseV1* _this = reinterpret_cast< StreamAggregatedPriceResponseV1* >(object);
  (void)_this;
}
void StreamAggregatedPriceResponseV1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamAggregatedPriceResponseV1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamAggregatedPriceResponseV1::Clear() {
// @@protoc_insertion_point(message_clear_start:kaikosdk.StreamAggregatedPriceResponseV1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aggregate_.ClearToEmpty();
  instrument_class_.ClearToEmpty();
  code_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ts_event_ != nullptr) {
    delete ts_event_;
  }
  ts_event_ = nullptr;
  event_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamAggregatedPriceResponseV1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string aggregate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_aggregate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaikosdk.StreamAggregatedPriceResponseV1.aggregate"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string instrument_class = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instrument_class();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaikosdk.StreamAggregatedPriceResponseV1.instrument_class"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaikosdk.StreamAggregatedPriceResponseV1.code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kaikosdk.StreamAggregatedPriceValue value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kaikosdk.StreamAggregatedPriceResponseV1.EventType event_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_type(static_cast<::kaikosdk::StreamAggregatedPriceResponseV1_EventType>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp ts_event = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ts_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamAggregatedPriceResponseV1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaikosdk.StreamAggregatedPriceResponseV1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string aggregate = 1;
  if (!this->_internal_aggregate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_aggregate().data(), static_cast<int>(this->_internal_aggregate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamAggregatedPriceResponseV1.aggregate");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_aggregate(), target);
  }

  // string instrument_class = 2;
  if (!this->_internal_instrument_class().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_class().data(), static_cast<int>(this->_internal_instrument_class().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamAggregatedPriceResponseV1.instrument_class");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instrument_class(), target);
  }

  // string code = 3;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamAggregatedPriceResponseV1.code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_code(), target);
  }

  // .kaikosdk.StreamAggregatedPriceValue value = 4;
  if (this->_internal_has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::value(this), target, stream);
  }

  // .kaikosdk.StreamAggregatedPriceResponseV1.EventType event_type = 5;
  if (this->_internal_event_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_event_type(), target);
  }

  // .google.protobuf.Timestamp ts_event = 6;
  if (this->_internal_has_ts_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::ts_event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaikosdk.StreamAggregatedPriceResponseV1)
  return target;
}

size_t StreamAggregatedPriceResponseV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaikosdk.StreamAggregatedPriceResponseV1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string aggregate = 1;
  if (!this->_internal_aggregate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_aggregate());
  }

  // string instrument_class = 2;
  if (!this->_internal_instrument_class().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_class());
  }

  // string code = 3;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // .kaikosdk.StreamAggregatedPriceValue value = 4;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .google.protobuf.Timestamp ts_event = 6;
  if (this->_internal_has_ts_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ts_event_);
  }

  // .kaikosdk.StreamAggregatedPriceResponseV1.EventType event_type = 5;
  if (this->_internal_event_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamAggregatedPriceResponseV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamAggregatedPriceResponseV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamAggregatedPriceResponseV1::GetClassData() const { return &_class_data_; }

void StreamAggregatedPriceResponseV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamAggregatedPriceResponseV1 *>(to)->MergeFrom(
      static_cast<const StreamAggregatedPriceResponseV1 &>(from));
}


void StreamAggregatedPriceResponseV1::MergeFrom(const StreamAggregatedPriceResponseV1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kaikosdk.StreamAggregatedPriceResponseV1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_aggregate().empty()) {
    _internal_set_aggregate(from._internal_aggregate());
  }
  if (!from._internal_instrument_class().empty()) {
    _internal_set_instrument_class(from._internal_instrument_class());
  }
  if (!from._internal_code().empty()) {
    _internal_set_code(from._internal_code());
  }
  if (from._internal_has_value()) {
    _internal_mutable_value()->::kaikosdk::StreamAggregatedPriceValue::MergeFrom(from._internal_value());
  }
  if (from._internal_has_ts_event()) {
    _internal_mutable_ts_event()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_ts_event());
  }
  if (from._internal_event_type() != 0) {
    _internal_set_event_type(from._internal_event_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamAggregatedPriceResponseV1::CopyFrom(const StreamAggregatedPriceResponseV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaikosdk.StreamAggregatedPriceResponseV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamAggregatedPriceResponseV1::IsInitialized() const {
  return true;
}

void StreamAggregatedPriceResponseV1::InternalSwap(StreamAggregatedPriceResponseV1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &aggregate_, lhs_arena,
      &other->aggregate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &instrument_class_, lhs_arena,
      &other->instrument_class_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, lhs_arena,
      &other->code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamAggregatedPriceResponseV1, event_type_)
      + sizeof(StreamAggregatedPriceResponseV1::event_type_)
      - PROTOBUF_FIELD_OFFSET(StreamAggregatedPriceResponseV1, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamAggregatedPriceResponseV1::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto_getter, &descriptor_table_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto_once,
      file_level_metadata_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace kaikosdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kaikosdk::StreamAggregatedPriceValue* Arena::CreateMaybeMessage< ::kaikosdk::StreamAggregatedPriceValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaikosdk::StreamAggregatedPriceValue >(arena);
}
template<> PROTOBUF_NOINLINE ::kaikosdk::StreamAggregatedPriceResponseV1* Arena::CreateMaybeMessage< ::kaikosdk::StreamAggregatedPriceResponseV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaikosdk::StreamAggregatedPriceResponseV1 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
