// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk/stream/aggregated_price_v1/response.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto;
namespace kaikosdk {
class StreamAggregatedPriceResponseV1;
struct StreamAggregatedPriceResponseV1DefaultTypeInternal;
extern StreamAggregatedPriceResponseV1DefaultTypeInternal _StreamAggregatedPriceResponseV1_default_instance_;
class StreamAggregatedPriceValue;
struct StreamAggregatedPriceValueDefaultTypeInternal;
extern StreamAggregatedPriceValueDefaultTypeInternal _StreamAggregatedPriceValue_default_instance_;
}  // namespace kaikosdk
PROTOBUF_NAMESPACE_OPEN
template<> ::kaikosdk::StreamAggregatedPriceResponseV1* Arena::CreateMaybeMessage<::kaikosdk::StreamAggregatedPriceResponseV1>(Arena*);
template<> ::kaikosdk::StreamAggregatedPriceValue* Arena::CreateMaybeMessage<::kaikosdk::StreamAggregatedPriceValue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kaikosdk {

enum StreamAggregatedPriceResponseV1_EventType : int {
  StreamAggregatedPriceResponseV1_EventType_UNKNOWN = 0,
  StreamAggregatedPriceResponseV1_EventType_BEST_ASK = 1,
  StreamAggregatedPriceResponseV1_EventType_BEST_BID = 2,
  StreamAggregatedPriceResponseV1_EventType_StreamAggregatedPriceResponseV1_EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StreamAggregatedPriceResponseV1_EventType_StreamAggregatedPriceResponseV1_EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StreamAggregatedPriceResponseV1_EventType_IsValid(int value);
constexpr StreamAggregatedPriceResponseV1_EventType StreamAggregatedPriceResponseV1_EventType_EventType_MIN = StreamAggregatedPriceResponseV1_EventType_UNKNOWN;
constexpr StreamAggregatedPriceResponseV1_EventType StreamAggregatedPriceResponseV1_EventType_EventType_MAX = StreamAggregatedPriceResponseV1_EventType_BEST_BID;
constexpr int StreamAggregatedPriceResponseV1_EventType_EventType_ARRAYSIZE = StreamAggregatedPriceResponseV1_EventType_EventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamAggregatedPriceResponseV1_EventType_descriptor();
template<typename T>
inline const std::string& StreamAggregatedPriceResponseV1_EventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StreamAggregatedPriceResponseV1_EventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StreamAggregatedPriceResponseV1_EventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StreamAggregatedPriceResponseV1_EventType_descriptor(), enum_t_value);
}
inline bool StreamAggregatedPriceResponseV1_EventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StreamAggregatedPriceResponseV1_EventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StreamAggregatedPriceResponseV1_EventType>(
    StreamAggregatedPriceResponseV1_EventType_descriptor(), name, value);
}
// ===================================================================

class StreamAggregatedPriceValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.StreamAggregatedPriceValue) */ {
 public:
  inline StreamAggregatedPriceValue() : StreamAggregatedPriceValue(nullptr) {}
  ~StreamAggregatedPriceValue() override;
  explicit PROTOBUF_CONSTEXPR StreamAggregatedPriceValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamAggregatedPriceValue(const StreamAggregatedPriceValue& from);
  StreamAggregatedPriceValue(StreamAggregatedPriceValue&& from) noexcept
    : StreamAggregatedPriceValue() {
    *this = ::std::move(from);
  }

  inline StreamAggregatedPriceValue& operator=(const StreamAggregatedPriceValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamAggregatedPriceValue& operator=(StreamAggregatedPriceValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamAggregatedPriceValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamAggregatedPriceValue* internal_default_instance() {
    return reinterpret_cast<const StreamAggregatedPriceValue*>(
               &_StreamAggregatedPriceValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StreamAggregatedPriceValue& a, StreamAggregatedPriceValue& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamAggregatedPriceValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamAggregatedPriceValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamAggregatedPriceValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamAggregatedPriceValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamAggregatedPriceValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamAggregatedPriceValue& from) {
    StreamAggregatedPriceValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamAggregatedPriceValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.StreamAggregatedPriceValue";
  }
  protected:
  explicit StreamAggregatedPriceValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
    kVolumeFieldNumber = 2,
  };
  // string price = 1;
  void clear_price();
  const std::string& price() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_price(ArgT0&& arg0, ArgT... args);
  std::string* mutable_price();
  PROTOBUF_NODISCARD std::string* release_price();
  void set_allocated_price(std::string* price);
  private:
  const std::string& _internal_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_price(const std::string& value);
  std::string* _internal_mutable_price();
  public:

  // string volume = 2;
  void clear_volume();
  const std::string& volume() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_volume(ArgT0&& arg0, ArgT... args);
  std::string* mutable_volume();
  PROTOBUF_NODISCARD std::string* release_volume();
  void set_allocated_volume(std::string* volume);
  private:
  const std::string& _internal_volume() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_volume(const std::string& value);
  std::string* _internal_mutable_volume();
  public:

  // @@protoc_insertion_point(class_scope:kaikosdk.StreamAggregatedPriceValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volume_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto;
};
// -------------------------------------------------------------------

class StreamAggregatedPriceResponseV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.StreamAggregatedPriceResponseV1) */ {
 public:
  inline StreamAggregatedPriceResponseV1() : StreamAggregatedPriceResponseV1(nullptr) {}
  ~StreamAggregatedPriceResponseV1() override;
  explicit PROTOBUF_CONSTEXPR StreamAggregatedPriceResponseV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamAggregatedPriceResponseV1(const StreamAggregatedPriceResponseV1& from);
  StreamAggregatedPriceResponseV1(StreamAggregatedPriceResponseV1&& from) noexcept
    : StreamAggregatedPriceResponseV1() {
    *this = ::std::move(from);
  }

  inline StreamAggregatedPriceResponseV1& operator=(const StreamAggregatedPriceResponseV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamAggregatedPriceResponseV1& operator=(StreamAggregatedPriceResponseV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamAggregatedPriceResponseV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamAggregatedPriceResponseV1* internal_default_instance() {
    return reinterpret_cast<const StreamAggregatedPriceResponseV1*>(
               &_StreamAggregatedPriceResponseV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StreamAggregatedPriceResponseV1& a, StreamAggregatedPriceResponseV1& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamAggregatedPriceResponseV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamAggregatedPriceResponseV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamAggregatedPriceResponseV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamAggregatedPriceResponseV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamAggregatedPriceResponseV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamAggregatedPriceResponseV1& from) {
    StreamAggregatedPriceResponseV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamAggregatedPriceResponseV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.StreamAggregatedPriceResponseV1";
  }
  protected:
  explicit StreamAggregatedPriceResponseV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StreamAggregatedPriceResponseV1_EventType EventType;
  static constexpr EventType UNKNOWN =
    StreamAggregatedPriceResponseV1_EventType_UNKNOWN;
  static constexpr EventType BEST_ASK =
    StreamAggregatedPriceResponseV1_EventType_BEST_ASK;
  static constexpr EventType BEST_BID =
    StreamAggregatedPriceResponseV1_EventType_BEST_BID;
  static inline bool EventType_IsValid(int value) {
    return StreamAggregatedPriceResponseV1_EventType_IsValid(value);
  }
  static constexpr EventType EventType_MIN =
    StreamAggregatedPriceResponseV1_EventType_EventType_MIN;
  static constexpr EventType EventType_MAX =
    StreamAggregatedPriceResponseV1_EventType_EventType_MAX;
  static constexpr int EventType_ARRAYSIZE =
    StreamAggregatedPriceResponseV1_EventType_EventType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EventType_descriptor() {
    return StreamAggregatedPriceResponseV1_EventType_descriptor();
  }
  template<typename T>
  static inline const std::string& EventType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EventType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EventType_Name.");
    return StreamAggregatedPriceResponseV1_EventType_Name(enum_t_value);
  }
  static inline bool EventType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EventType* value) {
    return StreamAggregatedPriceResponseV1_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAggregateFieldNumber = 1,
    kInstrumentClassFieldNumber = 2,
    kCodeFieldNumber = 3,
    kValueFieldNumber = 4,
    kTsEventFieldNumber = 6,
    kEventTypeFieldNumber = 5,
  };
  // string aggregate = 1;
  void clear_aggregate();
  const std::string& aggregate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_aggregate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_aggregate();
  PROTOBUF_NODISCARD std::string* release_aggregate();
  void set_allocated_aggregate(std::string* aggregate);
  private:
  const std::string& _internal_aggregate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_aggregate(const std::string& value);
  std::string* _internal_mutable_aggregate();
  public:

  // string instrument_class = 2;
  void clear_instrument_class();
  const std::string& instrument_class() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_class(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_class();
  PROTOBUF_NODISCARD std::string* release_instrument_class();
  void set_allocated_instrument_class(std::string* instrument_class);
  private:
  const std::string& _internal_instrument_class() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_class(const std::string& value);
  std::string* _internal_mutable_instrument_class();
  public:

  // string code = 3;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // .kaikosdk.StreamAggregatedPriceValue value = 4;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::kaikosdk::StreamAggregatedPriceValue& value() const;
  PROTOBUF_NODISCARD ::kaikosdk::StreamAggregatedPriceValue* release_value();
  ::kaikosdk::StreamAggregatedPriceValue* mutable_value();
  void set_allocated_value(::kaikosdk::StreamAggregatedPriceValue* value);
  private:
  const ::kaikosdk::StreamAggregatedPriceValue& _internal_value() const;
  ::kaikosdk::StreamAggregatedPriceValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::kaikosdk::StreamAggregatedPriceValue* value);
  ::kaikosdk::StreamAggregatedPriceValue* unsafe_arena_release_value();

  // .google.protobuf.Timestamp ts_event = 6;
  bool has_ts_event() const;
  private:
  bool _internal_has_ts_event() const;
  public:
  void clear_ts_event();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts_event() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_ts_event();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_ts_event();
  void set_allocated_ts_event(::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_ts_event() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_ts_event();
  public:
  void unsafe_arena_set_allocated_ts_event(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_ts_event();

  // .kaikosdk.StreamAggregatedPriceResponseV1.EventType event_type = 5;
  void clear_event_type();
  ::kaikosdk::StreamAggregatedPriceResponseV1_EventType event_type() const;
  void set_event_type(::kaikosdk::StreamAggregatedPriceResponseV1_EventType value);
  private:
  ::kaikosdk::StreamAggregatedPriceResponseV1_EventType _internal_event_type() const;
  void _internal_set_event_type(::kaikosdk::StreamAggregatedPriceResponseV1_EventType value);
  public:

  // @@protoc_insertion_point(class_scope:kaikosdk.StreamAggregatedPriceResponseV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aggregate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_class_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    ::kaikosdk::StreamAggregatedPriceValue* value_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event_;
    int event_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StreamAggregatedPriceValue

// string price = 1;
inline void StreamAggregatedPriceValue::clear_price() {
  _impl_.price_.ClearToEmpty();
}
inline const std::string& StreamAggregatedPriceValue::price() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamAggregatedPriceValue.price)
  return _internal_price();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamAggregatedPriceValue::set_price(ArgT0&& arg0, ArgT... args) {
 
 _impl_.price_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamAggregatedPriceValue.price)
}
inline std::string* StreamAggregatedPriceValue::mutable_price() {
  std::string* _s = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamAggregatedPriceValue.price)
  return _s;
}
inline const std::string& StreamAggregatedPriceValue::_internal_price() const {
  return _impl_.price_.Get();
}
inline void StreamAggregatedPriceValue::_internal_set_price(const std::string& value) {
  
  _impl_.price_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamAggregatedPriceValue::_internal_mutable_price() {
  
  return _impl_.price_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamAggregatedPriceValue::release_price() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamAggregatedPriceValue.price)
  return _impl_.price_.Release();
}
inline void StreamAggregatedPriceValue::set_allocated_price(std::string* price) {
  if (price != nullptr) {
    
  } else {
    
  }
  _impl_.price_.SetAllocated(price, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.price_.IsDefault()) {
    _impl_.price_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamAggregatedPriceValue.price)
}

// string volume = 2;
inline void StreamAggregatedPriceValue::clear_volume() {
  _impl_.volume_.ClearToEmpty();
}
inline const std::string& StreamAggregatedPriceValue::volume() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamAggregatedPriceValue.volume)
  return _internal_volume();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamAggregatedPriceValue::set_volume(ArgT0&& arg0, ArgT... args) {
 
 _impl_.volume_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamAggregatedPriceValue.volume)
}
inline std::string* StreamAggregatedPriceValue::mutable_volume() {
  std::string* _s = _internal_mutable_volume();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamAggregatedPriceValue.volume)
  return _s;
}
inline const std::string& StreamAggregatedPriceValue::_internal_volume() const {
  return _impl_.volume_.Get();
}
inline void StreamAggregatedPriceValue::_internal_set_volume(const std::string& value) {
  
  _impl_.volume_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamAggregatedPriceValue::_internal_mutable_volume() {
  
  return _impl_.volume_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamAggregatedPriceValue::release_volume() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamAggregatedPriceValue.volume)
  return _impl_.volume_.Release();
}
inline void StreamAggregatedPriceValue::set_allocated_volume(std::string* volume) {
  if (volume != nullptr) {
    
  } else {
    
  }
  _impl_.volume_.SetAllocated(volume, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.volume_.IsDefault()) {
    _impl_.volume_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamAggregatedPriceValue.volume)
}

// -------------------------------------------------------------------

// StreamAggregatedPriceResponseV1

// string aggregate = 1;
inline void StreamAggregatedPriceResponseV1::clear_aggregate() {
  _impl_.aggregate_.ClearToEmpty();
}
inline const std::string& StreamAggregatedPriceResponseV1::aggregate() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamAggregatedPriceResponseV1.aggregate)
  return _internal_aggregate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamAggregatedPriceResponseV1::set_aggregate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.aggregate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamAggregatedPriceResponseV1.aggregate)
}
inline std::string* StreamAggregatedPriceResponseV1::mutable_aggregate() {
  std::string* _s = _internal_mutable_aggregate();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamAggregatedPriceResponseV1.aggregate)
  return _s;
}
inline const std::string& StreamAggregatedPriceResponseV1::_internal_aggregate() const {
  return _impl_.aggregate_.Get();
}
inline void StreamAggregatedPriceResponseV1::_internal_set_aggregate(const std::string& value) {
  
  _impl_.aggregate_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamAggregatedPriceResponseV1::_internal_mutable_aggregate() {
  
  return _impl_.aggregate_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamAggregatedPriceResponseV1::release_aggregate() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamAggregatedPriceResponseV1.aggregate)
  return _impl_.aggregate_.Release();
}
inline void StreamAggregatedPriceResponseV1::set_allocated_aggregate(std::string* aggregate) {
  if (aggregate != nullptr) {
    
  } else {
    
  }
  _impl_.aggregate_.SetAllocated(aggregate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.aggregate_.IsDefault()) {
    _impl_.aggregate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamAggregatedPriceResponseV1.aggregate)
}

// string instrument_class = 2;
inline void StreamAggregatedPriceResponseV1::clear_instrument_class() {
  _impl_.instrument_class_.ClearToEmpty();
}
inline const std::string& StreamAggregatedPriceResponseV1::instrument_class() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamAggregatedPriceResponseV1.instrument_class)
  return _internal_instrument_class();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamAggregatedPriceResponseV1::set_instrument_class(ArgT0&& arg0, ArgT... args) {
 
 _impl_.instrument_class_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamAggregatedPriceResponseV1.instrument_class)
}
inline std::string* StreamAggregatedPriceResponseV1::mutable_instrument_class() {
  std::string* _s = _internal_mutable_instrument_class();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamAggregatedPriceResponseV1.instrument_class)
  return _s;
}
inline const std::string& StreamAggregatedPriceResponseV1::_internal_instrument_class() const {
  return _impl_.instrument_class_.Get();
}
inline void StreamAggregatedPriceResponseV1::_internal_set_instrument_class(const std::string& value) {
  
  _impl_.instrument_class_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamAggregatedPriceResponseV1::_internal_mutable_instrument_class() {
  
  return _impl_.instrument_class_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamAggregatedPriceResponseV1::release_instrument_class() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamAggregatedPriceResponseV1.instrument_class)
  return _impl_.instrument_class_.Release();
}
inline void StreamAggregatedPriceResponseV1::set_allocated_instrument_class(std::string* instrument_class) {
  if (instrument_class != nullptr) {
    
  } else {
    
  }
  _impl_.instrument_class_.SetAllocated(instrument_class, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instrument_class_.IsDefault()) {
    _impl_.instrument_class_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamAggregatedPriceResponseV1.instrument_class)
}

// string code = 3;
inline void StreamAggregatedPriceResponseV1::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& StreamAggregatedPriceResponseV1::code() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamAggregatedPriceResponseV1.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamAggregatedPriceResponseV1::set_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamAggregatedPriceResponseV1.code)
}
inline std::string* StreamAggregatedPriceResponseV1::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamAggregatedPriceResponseV1.code)
  return _s;
}
inline const std::string& StreamAggregatedPriceResponseV1::_internal_code() const {
  return _impl_.code_.Get();
}
inline void StreamAggregatedPriceResponseV1::_internal_set_code(const std::string& value) {
  
  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamAggregatedPriceResponseV1::_internal_mutable_code() {
  
  return _impl_.code_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamAggregatedPriceResponseV1::release_code() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamAggregatedPriceResponseV1.code)
  return _impl_.code_.Release();
}
inline void StreamAggregatedPriceResponseV1::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  _impl_.code_.SetAllocated(code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.code_.IsDefault()) {
    _impl_.code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamAggregatedPriceResponseV1.code)
}

// .kaikosdk.StreamAggregatedPriceValue value = 4;
inline bool StreamAggregatedPriceResponseV1::_internal_has_value() const {
  return this != internal_default_instance() && _impl_.value_ != nullptr;
}
inline bool StreamAggregatedPriceResponseV1::has_value() const {
  return _internal_has_value();
}
inline void StreamAggregatedPriceResponseV1::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
inline const ::kaikosdk::StreamAggregatedPriceValue& StreamAggregatedPriceResponseV1::_internal_value() const {
  const ::kaikosdk::StreamAggregatedPriceValue* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::kaikosdk::StreamAggregatedPriceValue&>(
      ::kaikosdk::_StreamAggregatedPriceValue_default_instance_);
}
inline const ::kaikosdk::StreamAggregatedPriceValue& StreamAggregatedPriceResponseV1::value() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamAggregatedPriceResponseV1.value)
  return _internal_value();
}
inline void StreamAggregatedPriceResponseV1::unsafe_arena_set_allocated_value(
    ::kaikosdk::StreamAggregatedPriceValue* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamAggregatedPriceResponseV1.value)
}
inline ::kaikosdk::StreamAggregatedPriceValue* StreamAggregatedPriceResponseV1::release_value() {
  
  ::kaikosdk::StreamAggregatedPriceValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kaikosdk::StreamAggregatedPriceValue* StreamAggregatedPriceResponseV1::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamAggregatedPriceResponseV1.value)
  
  ::kaikosdk::StreamAggregatedPriceValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::kaikosdk::StreamAggregatedPriceValue* StreamAggregatedPriceResponseV1::_internal_mutable_value() {
  
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::kaikosdk::StreamAggregatedPriceValue>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::kaikosdk::StreamAggregatedPriceValue* StreamAggregatedPriceResponseV1::mutable_value() {
  ::kaikosdk::StreamAggregatedPriceValue* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamAggregatedPriceResponseV1.value)
  return _msg;
}
inline void StreamAggregatedPriceResponseV1::set_allocated_value(::kaikosdk::StreamAggregatedPriceValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamAggregatedPriceResponseV1.value)
}

// .kaikosdk.StreamAggregatedPriceResponseV1.EventType event_type = 5;
inline void StreamAggregatedPriceResponseV1::clear_event_type() {
  _impl_.event_type_ = 0;
}
inline ::kaikosdk::StreamAggregatedPriceResponseV1_EventType StreamAggregatedPriceResponseV1::_internal_event_type() const {
  return static_cast< ::kaikosdk::StreamAggregatedPriceResponseV1_EventType >(_impl_.event_type_);
}
inline ::kaikosdk::StreamAggregatedPriceResponseV1_EventType StreamAggregatedPriceResponseV1::event_type() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamAggregatedPriceResponseV1.event_type)
  return _internal_event_type();
}
inline void StreamAggregatedPriceResponseV1::_internal_set_event_type(::kaikosdk::StreamAggregatedPriceResponseV1_EventType value) {
  
  _impl_.event_type_ = value;
}
inline void StreamAggregatedPriceResponseV1::set_event_type(::kaikosdk::StreamAggregatedPriceResponseV1_EventType value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamAggregatedPriceResponseV1.event_type)
}

// .google.protobuf.Timestamp ts_event = 6;
inline bool StreamAggregatedPriceResponseV1::_internal_has_ts_event() const {
  return this != internal_default_instance() && _impl_.ts_event_ != nullptr;
}
inline bool StreamAggregatedPriceResponseV1::has_ts_event() const {
  return _internal_has_ts_event();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamAggregatedPriceResponseV1::_internal_ts_event() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.ts_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamAggregatedPriceResponseV1::ts_event() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamAggregatedPriceResponseV1.ts_event)
  return _internal_ts_event();
}
inline void StreamAggregatedPriceResponseV1::unsafe_arena_set_allocated_ts_event(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_event_);
  }
  _impl_.ts_event_ = ts_event;
  if (ts_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamAggregatedPriceResponseV1.ts_event)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamAggregatedPriceResponseV1::release_ts_event() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_event_;
  _impl_.ts_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamAggregatedPriceResponseV1::unsafe_arena_release_ts_event() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamAggregatedPriceResponseV1.ts_event)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_event_;
  _impl_.ts_event_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamAggregatedPriceResponseV1::_internal_mutable_ts_event() {
  
  if (_impl_.ts_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.ts_event_ = p;
  }
  return _impl_.ts_event_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamAggregatedPriceResponseV1::mutable_ts_event() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_ts_event();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamAggregatedPriceResponseV1.ts_event)
  return _msg;
}
inline void StreamAggregatedPriceResponseV1::set_allocated_ts_event(::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_event_);
  }
  if (ts_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_event));
    if (message_arena != submessage_arena) {
      ts_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts_event, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ts_event_ = ts_event;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamAggregatedPriceResponseV1.ts_event)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kaikosdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::kaikosdk::StreamAggregatedPriceResponseV1_EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kaikosdk::StreamAggregatedPriceResponseV1_EventType>() {
  return ::kaikosdk::StreamAggregatedPriceResponseV1_EventType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2faggregated_5fprice_5fv1_2fresponse_2eproto
