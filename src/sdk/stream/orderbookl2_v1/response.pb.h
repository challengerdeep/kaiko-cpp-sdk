// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk/stream/orderbookl2_v1/response.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "sdk/core/wrappers.pb.h"
#include "sdk/stream/orderbookl2_v1/order.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto;
namespace kaikosdk {
class StreamOrderBookL2ResponseV1;
struct StreamOrderBookL2ResponseV1DefaultTypeInternal;
extern StreamOrderBookL2ResponseV1DefaultTypeInternal _StreamOrderBookL2ResponseV1_default_instance_;
class StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse;
struct StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUseDefaultTypeInternal;
extern StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUseDefaultTypeInternal _StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse_default_instance_;
}  // namespace kaikosdk
PROTOBUF_NAMESPACE_OPEN
template<> ::kaikosdk::StreamOrderBookL2ResponseV1* Arena::CreateMaybeMessage<::kaikosdk::StreamOrderBookL2ResponseV1>(Arena*);
template<> ::kaikosdk::StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::kaikosdk::StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kaikosdk {

enum StreamOrderBookL2UpdateType : int {
  UNKNOWN = 0,
  SNAPSHOT = 1,
  UPDATE = 2,
  StreamOrderBookL2UpdateType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StreamOrderBookL2UpdateType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StreamOrderBookL2UpdateType_IsValid(int value);
constexpr StreamOrderBookL2UpdateType StreamOrderBookL2UpdateType_MIN = UNKNOWN;
constexpr StreamOrderBookL2UpdateType StreamOrderBookL2UpdateType_MAX = UPDATE;
constexpr int StreamOrderBookL2UpdateType_ARRAYSIZE = StreamOrderBookL2UpdateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamOrderBookL2UpdateType_descriptor();
template<typename T>
inline const std::string& StreamOrderBookL2UpdateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StreamOrderBookL2UpdateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StreamOrderBookL2UpdateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StreamOrderBookL2UpdateType_descriptor(), enum_t_value);
}
inline bool StreamOrderBookL2UpdateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StreamOrderBookL2UpdateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StreamOrderBookL2UpdateType>(
    StreamOrderBookL2UpdateType_descriptor(), name, value);
}
// ===================================================================

class StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse& other);
  static const StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse*>(&_StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "kaikosdk.StreamOrderBookL2ResponseV1.AdditionalPropertiesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "kaikosdk.StreamOrderBookL2ResponseV1.AdditionalPropertiesEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto;
};

// -------------------------------------------------------------------

class StreamOrderBookL2ResponseV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.StreamOrderBookL2ResponseV1) */ {
 public:
  inline StreamOrderBookL2ResponseV1() : StreamOrderBookL2ResponseV1(nullptr) {}
  ~StreamOrderBookL2ResponseV1() override;
  explicit PROTOBUF_CONSTEXPR StreamOrderBookL2ResponseV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamOrderBookL2ResponseV1(const StreamOrderBookL2ResponseV1& from);
  StreamOrderBookL2ResponseV1(StreamOrderBookL2ResponseV1&& from) noexcept
    : StreamOrderBookL2ResponseV1() {
    *this = ::std::move(from);
  }

  inline StreamOrderBookL2ResponseV1& operator=(const StreamOrderBookL2ResponseV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamOrderBookL2ResponseV1& operator=(StreamOrderBookL2ResponseV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamOrderBookL2ResponseV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamOrderBookL2ResponseV1* internal_default_instance() {
    return reinterpret_cast<const StreamOrderBookL2ResponseV1*>(
               &_StreamOrderBookL2ResponseV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StreamOrderBookL2ResponseV1& a, StreamOrderBookL2ResponseV1& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamOrderBookL2ResponseV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamOrderBookL2ResponseV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamOrderBookL2ResponseV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamOrderBookL2ResponseV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamOrderBookL2ResponseV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamOrderBookL2ResponseV1& from) {
    StreamOrderBookL2ResponseV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamOrderBookL2ResponseV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.StreamOrderBookL2ResponseV1";
  }
  protected:
  explicit StreamOrderBookL2ResponseV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAsksFieldNumber = 6,
    kBidsFieldNumber = 7,
    kAdditionalPropertiesFieldNumber = 11,
    kClassFieldNumber = 1,
    kCodeFieldNumber = 2,
    kExchangeFieldNumber = 3,
    kSequenceIdFieldNumber = 4,
    kTsExchangeFieldNumber = 8,
    kTsCollectionFieldNumber = 9,
    kTsEventFieldNumber = 10,
    kUpdateTypeFieldNumber = 5,
  };
  // repeated .kaikosdk.Order asks = 6;
  int asks_size() const;
  private:
  int _internal_asks_size() const;
  public:
  void clear_asks();
  ::kaikosdk::Order* mutable_asks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::Order >*
      mutable_asks();
  private:
  const ::kaikosdk::Order& _internal_asks(int index) const;
  ::kaikosdk::Order* _internal_add_asks();
  public:
  const ::kaikosdk::Order& asks(int index) const;
  ::kaikosdk::Order* add_asks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::Order >&
      asks() const;

  // repeated .kaikosdk.Order bids = 7;
  int bids_size() const;
  private:
  int _internal_bids_size() const;
  public:
  void clear_bids();
  ::kaikosdk::Order* mutable_bids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::Order >*
      mutable_bids();
  private:
  const ::kaikosdk::Order& _internal_bids(int index) const;
  ::kaikosdk::Order* _internal_add_bids();
  public:
  const ::kaikosdk::Order& bids(int index) const;
  ::kaikosdk::Order* add_bids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::Order >&
      bids() const;

  // map<string, string> additional_properties = 11;
  int additional_properties_size() const;
  private:
  int _internal_additional_properties_size() const;
  public:
  void clear_additional_properties();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_additional_properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_additional_properties();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      additional_properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_additional_properties();

  // string class = 1;
  void clear_class_();
  const std::string& class_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_class_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_class_();
  PROTOBUF_NODISCARD std::string* release_class_();
  void set_allocated_class_(std::string* class_);
  private:
  const std::string& _internal_class_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_(const std::string& value);
  std::string* _internal_mutable_class_();
  public:

  // string code = 2;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string exchange = 3;
  void clear_exchange();
  const std::string& exchange() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exchange(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exchange();
  PROTOBUF_NODISCARD std::string* release_exchange();
  void set_allocated_exchange(std::string* exchange);
  private:
  const std::string& _internal_exchange() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange(const std::string& value);
  std::string* _internal_mutable_exchange();
  public:

  // string sequence_id = 4;
  void clear_sequence_id();
  const std::string& sequence_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sequence_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sequence_id();
  PROTOBUF_NODISCARD std::string* release_sequence_id();
  void set_allocated_sequence_id(std::string* sequence_id);
  private:
  const std::string& _internal_sequence_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sequence_id(const std::string& value);
  std::string* _internal_mutable_sequence_id();
  public:

  // .kaikosdk.TimestampValue ts_exchange = 8;
  bool has_ts_exchange() const;
  private:
  bool _internal_has_ts_exchange() const;
  public:
  void clear_ts_exchange();
  const ::kaikosdk::TimestampValue& ts_exchange() const;
  PROTOBUF_NODISCARD ::kaikosdk::TimestampValue* release_ts_exchange();
  ::kaikosdk::TimestampValue* mutable_ts_exchange();
  void set_allocated_ts_exchange(::kaikosdk::TimestampValue* ts_exchange);
  private:
  const ::kaikosdk::TimestampValue& _internal_ts_exchange() const;
  ::kaikosdk::TimestampValue* _internal_mutable_ts_exchange();
  public:
  void unsafe_arena_set_allocated_ts_exchange(
      ::kaikosdk::TimestampValue* ts_exchange);
  ::kaikosdk::TimestampValue* unsafe_arena_release_ts_exchange();

  // .kaikosdk.TimestampValue ts_collection = 9;
  bool has_ts_collection() const;
  private:
  bool _internal_has_ts_collection() const;
  public:
  void clear_ts_collection();
  const ::kaikosdk::TimestampValue& ts_collection() const;
  PROTOBUF_NODISCARD ::kaikosdk::TimestampValue* release_ts_collection();
  ::kaikosdk::TimestampValue* mutable_ts_collection();
  void set_allocated_ts_collection(::kaikosdk::TimestampValue* ts_collection);
  private:
  const ::kaikosdk::TimestampValue& _internal_ts_collection() const;
  ::kaikosdk::TimestampValue* _internal_mutable_ts_collection();
  public:
  void unsafe_arena_set_allocated_ts_collection(
      ::kaikosdk::TimestampValue* ts_collection);
  ::kaikosdk::TimestampValue* unsafe_arena_release_ts_collection();

  // .google.protobuf.Timestamp ts_event = 10;
  bool has_ts_event() const;
  private:
  bool _internal_has_ts_event() const;
  public:
  void clear_ts_event();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts_event() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_ts_event();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_ts_event();
  void set_allocated_ts_event(::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_ts_event() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_ts_event();
  public:
  void unsafe_arena_set_allocated_ts_event(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_ts_event();

  // .kaikosdk.StreamOrderBookL2UpdateType update_type = 5;
  void clear_update_type();
  ::kaikosdk::StreamOrderBookL2UpdateType update_type() const;
  void set_update_type(::kaikosdk::StreamOrderBookL2UpdateType value);
  private:
  ::kaikosdk::StreamOrderBookL2UpdateType _internal_update_type() const;
  void _internal_set_update_type(::kaikosdk::StreamOrderBookL2UpdateType value);
  public:

  // @@protoc_insertion_point(class_scope:kaikosdk.StreamOrderBookL2ResponseV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::Order > asks_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::Order > bids_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> additional_properties_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class__;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sequence_id_;
    ::kaikosdk::TimestampValue* ts_exchange_;
    ::kaikosdk::TimestampValue* ts_collection_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event_;
    int update_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// StreamOrderBookL2ResponseV1

// string class = 1;
inline void StreamOrderBookL2ResponseV1::clear_class_() {
  _impl_.class__.ClearToEmpty();
}
inline const std::string& StreamOrderBookL2ResponseV1::class_() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamOrderBookL2ResponseV1.class)
  return _internal_class_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamOrderBookL2ResponseV1::set_class_(ArgT0&& arg0, ArgT... args) {
 
 _impl_.class__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamOrderBookL2ResponseV1.class)
}
inline std::string* StreamOrderBookL2ResponseV1::mutable_class_() {
  std::string* _s = _internal_mutable_class_();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamOrderBookL2ResponseV1.class)
  return _s;
}
inline const std::string& StreamOrderBookL2ResponseV1::_internal_class_() const {
  return _impl_.class__.Get();
}
inline void StreamOrderBookL2ResponseV1::_internal_set_class_(const std::string& value) {
  
  _impl_.class__.Set(value, GetArenaForAllocation());
}
inline std::string* StreamOrderBookL2ResponseV1::_internal_mutable_class_() {
  
  return _impl_.class__.Mutable(GetArenaForAllocation());
}
inline std::string* StreamOrderBookL2ResponseV1::release_class_() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamOrderBookL2ResponseV1.class)
  return _impl_.class__.Release();
}
inline void StreamOrderBookL2ResponseV1::set_allocated_class_(std::string* class_) {
  if (class_ != nullptr) {
    
  } else {
    
  }
  _impl_.class__.SetAllocated(class_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.class__.IsDefault()) {
    _impl_.class__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamOrderBookL2ResponseV1.class)
}

// string code = 2;
inline void StreamOrderBookL2ResponseV1::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& StreamOrderBookL2ResponseV1::code() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamOrderBookL2ResponseV1.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamOrderBookL2ResponseV1::set_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamOrderBookL2ResponseV1.code)
}
inline std::string* StreamOrderBookL2ResponseV1::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamOrderBookL2ResponseV1.code)
  return _s;
}
inline const std::string& StreamOrderBookL2ResponseV1::_internal_code() const {
  return _impl_.code_.Get();
}
inline void StreamOrderBookL2ResponseV1::_internal_set_code(const std::string& value) {
  
  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamOrderBookL2ResponseV1::_internal_mutable_code() {
  
  return _impl_.code_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamOrderBookL2ResponseV1::release_code() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamOrderBookL2ResponseV1.code)
  return _impl_.code_.Release();
}
inline void StreamOrderBookL2ResponseV1::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  _impl_.code_.SetAllocated(code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.code_.IsDefault()) {
    _impl_.code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamOrderBookL2ResponseV1.code)
}

// string exchange = 3;
inline void StreamOrderBookL2ResponseV1::clear_exchange() {
  _impl_.exchange_.ClearToEmpty();
}
inline const std::string& StreamOrderBookL2ResponseV1::exchange() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamOrderBookL2ResponseV1.exchange)
  return _internal_exchange();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamOrderBookL2ResponseV1::set_exchange(ArgT0&& arg0, ArgT... args) {
 
 _impl_.exchange_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamOrderBookL2ResponseV1.exchange)
}
inline std::string* StreamOrderBookL2ResponseV1::mutable_exchange() {
  std::string* _s = _internal_mutable_exchange();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamOrderBookL2ResponseV1.exchange)
  return _s;
}
inline const std::string& StreamOrderBookL2ResponseV1::_internal_exchange() const {
  return _impl_.exchange_.Get();
}
inline void StreamOrderBookL2ResponseV1::_internal_set_exchange(const std::string& value) {
  
  _impl_.exchange_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamOrderBookL2ResponseV1::_internal_mutable_exchange() {
  
  return _impl_.exchange_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamOrderBookL2ResponseV1::release_exchange() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamOrderBookL2ResponseV1.exchange)
  return _impl_.exchange_.Release();
}
inline void StreamOrderBookL2ResponseV1::set_allocated_exchange(std::string* exchange) {
  if (exchange != nullptr) {
    
  } else {
    
  }
  _impl_.exchange_.SetAllocated(exchange, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.exchange_.IsDefault()) {
    _impl_.exchange_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamOrderBookL2ResponseV1.exchange)
}

// string sequence_id = 4;
inline void StreamOrderBookL2ResponseV1::clear_sequence_id() {
  _impl_.sequence_id_.ClearToEmpty();
}
inline const std::string& StreamOrderBookL2ResponseV1::sequence_id() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamOrderBookL2ResponseV1.sequence_id)
  return _internal_sequence_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamOrderBookL2ResponseV1::set_sequence_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sequence_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamOrderBookL2ResponseV1.sequence_id)
}
inline std::string* StreamOrderBookL2ResponseV1::mutable_sequence_id() {
  std::string* _s = _internal_mutable_sequence_id();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamOrderBookL2ResponseV1.sequence_id)
  return _s;
}
inline const std::string& StreamOrderBookL2ResponseV1::_internal_sequence_id() const {
  return _impl_.sequence_id_.Get();
}
inline void StreamOrderBookL2ResponseV1::_internal_set_sequence_id(const std::string& value) {
  
  _impl_.sequence_id_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamOrderBookL2ResponseV1::_internal_mutable_sequence_id() {
  
  return _impl_.sequence_id_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamOrderBookL2ResponseV1::release_sequence_id() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamOrderBookL2ResponseV1.sequence_id)
  return _impl_.sequence_id_.Release();
}
inline void StreamOrderBookL2ResponseV1::set_allocated_sequence_id(std::string* sequence_id) {
  if (sequence_id != nullptr) {
    
  } else {
    
  }
  _impl_.sequence_id_.SetAllocated(sequence_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sequence_id_.IsDefault()) {
    _impl_.sequence_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamOrderBookL2ResponseV1.sequence_id)
}

// .kaikosdk.StreamOrderBookL2UpdateType update_type = 5;
inline void StreamOrderBookL2ResponseV1::clear_update_type() {
  _impl_.update_type_ = 0;
}
inline ::kaikosdk::StreamOrderBookL2UpdateType StreamOrderBookL2ResponseV1::_internal_update_type() const {
  return static_cast< ::kaikosdk::StreamOrderBookL2UpdateType >(_impl_.update_type_);
}
inline ::kaikosdk::StreamOrderBookL2UpdateType StreamOrderBookL2ResponseV1::update_type() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamOrderBookL2ResponseV1.update_type)
  return _internal_update_type();
}
inline void StreamOrderBookL2ResponseV1::_internal_set_update_type(::kaikosdk::StreamOrderBookL2UpdateType value) {
  
  _impl_.update_type_ = value;
}
inline void StreamOrderBookL2ResponseV1::set_update_type(::kaikosdk::StreamOrderBookL2UpdateType value) {
  _internal_set_update_type(value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamOrderBookL2ResponseV1.update_type)
}

// repeated .kaikosdk.Order asks = 6;
inline int StreamOrderBookL2ResponseV1::_internal_asks_size() const {
  return _impl_.asks_.size();
}
inline int StreamOrderBookL2ResponseV1::asks_size() const {
  return _internal_asks_size();
}
inline ::kaikosdk::Order* StreamOrderBookL2ResponseV1::mutable_asks(int index) {
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamOrderBookL2ResponseV1.asks)
  return _impl_.asks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::Order >*
StreamOrderBookL2ResponseV1::mutable_asks() {
  // @@protoc_insertion_point(field_mutable_list:kaikosdk.StreamOrderBookL2ResponseV1.asks)
  return &_impl_.asks_;
}
inline const ::kaikosdk::Order& StreamOrderBookL2ResponseV1::_internal_asks(int index) const {
  return _impl_.asks_.Get(index);
}
inline const ::kaikosdk::Order& StreamOrderBookL2ResponseV1::asks(int index) const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamOrderBookL2ResponseV1.asks)
  return _internal_asks(index);
}
inline ::kaikosdk::Order* StreamOrderBookL2ResponseV1::_internal_add_asks() {
  return _impl_.asks_.Add();
}
inline ::kaikosdk::Order* StreamOrderBookL2ResponseV1::add_asks() {
  ::kaikosdk::Order* _add = _internal_add_asks();
  // @@protoc_insertion_point(field_add:kaikosdk.StreamOrderBookL2ResponseV1.asks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::Order >&
StreamOrderBookL2ResponseV1::asks() const {
  // @@protoc_insertion_point(field_list:kaikosdk.StreamOrderBookL2ResponseV1.asks)
  return _impl_.asks_;
}

// repeated .kaikosdk.Order bids = 7;
inline int StreamOrderBookL2ResponseV1::_internal_bids_size() const {
  return _impl_.bids_.size();
}
inline int StreamOrderBookL2ResponseV1::bids_size() const {
  return _internal_bids_size();
}
inline ::kaikosdk::Order* StreamOrderBookL2ResponseV1::mutable_bids(int index) {
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamOrderBookL2ResponseV1.bids)
  return _impl_.bids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::Order >*
StreamOrderBookL2ResponseV1::mutable_bids() {
  // @@protoc_insertion_point(field_mutable_list:kaikosdk.StreamOrderBookL2ResponseV1.bids)
  return &_impl_.bids_;
}
inline const ::kaikosdk::Order& StreamOrderBookL2ResponseV1::_internal_bids(int index) const {
  return _impl_.bids_.Get(index);
}
inline const ::kaikosdk::Order& StreamOrderBookL2ResponseV1::bids(int index) const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamOrderBookL2ResponseV1.bids)
  return _internal_bids(index);
}
inline ::kaikosdk::Order* StreamOrderBookL2ResponseV1::_internal_add_bids() {
  return _impl_.bids_.Add();
}
inline ::kaikosdk::Order* StreamOrderBookL2ResponseV1::add_bids() {
  ::kaikosdk::Order* _add = _internal_add_bids();
  // @@protoc_insertion_point(field_add:kaikosdk.StreamOrderBookL2ResponseV1.bids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::Order >&
StreamOrderBookL2ResponseV1::bids() const {
  // @@protoc_insertion_point(field_list:kaikosdk.StreamOrderBookL2ResponseV1.bids)
  return _impl_.bids_;
}

// .kaikosdk.TimestampValue ts_exchange = 8;
inline bool StreamOrderBookL2ResponseV1::_internal_has_ts_exchange() const {
  return this != internal_default_instance() && _impl_.ts_exchange_ != nullptr;
}
inline bool StreamOrderBookL2ResponseV1::has_ts_exchange() const {
  return _internal_has_ts_exchange();
}
inline const ::kaikosdk::TimestampValue& StreamOrderBookL2ResponseV1::_internal_ts_exchange() const {
  const ::kaikosdk::TimestampValue* p = _impl_.ts_exchange_;
  return p != nullptr ? *p : reinterpret_cast<const ::kaikosdk::TimestampValue&>(
      ::kaikosdk::_TimestampValue_default_instance_);
}
inline const ::kaikosdk::TimestampValue& StreamOrderBookL2ResponseV1::ts_exchange() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamOrderBookL2ResponseV1.ts_exchange)
  return _internal_ts_exchange();
}
inline void StreamOrderBookL2ResponseV1::unsafe_arena_set_allocated_ts_exchange(
    ::kaikosdk::TimestampValue* ts_exchange) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_exchange_);
  }
  _impl_.ts_exchange_ = ts_exchange;
  if (ts_exchange) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamOrderBookL2ResponseV1.ts_exchange)
}
inline ::kaikosdk::TimestampValue* StreamOrderBookL2ResponseV1::release_ts_exchange() {
  
  ::kaikosdk::TimestampValue* temp = _impl_.ts_exchange_;
  _impl_.ts_exchange_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kaikosdk::TimestampValue* StreamOrderBookL2ResponseV1::unsafe_arena_release_ts_exchange() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamOrderBookL2ResponseV1.ts_exchange)
  
  ::kaikosdk::TimestampValue* temp = _impl_.ts_exchange_;
  _impl_.ts_exchange_ = nullptr;
  return temp;
}
inline ::kaikosdk::TimestampValue* StreamOrderBookL2ResponseV1::_internal_mutable_ts_exchange() {
  
  if (_impl_.ts_exchange_ == nullptr) {
    auto* p = CreateMaybeMessage<::kaikosdk::TimestampValue>(GetArenaForAllocation());
    _impl_.ts_exchange_ = p;
  }
  return _impl_.ts_exchange_;
}
inline ::kaikosdk::TimestampValue* StreamOrderBookL2ResponseV1::mutable_ts_exchange() {
  ::kaikosdk::TimestampValue* _msg = _internal_mutable_ts_exchange();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamOrderBookL2ResponseV1.ts_exchange)
  return _msg;
}
inline void StreamOrderBookL2ResponseV1::set_allocated_ts_exchange(::kaikosdk::TimestampValue* ts_exchange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_exchange_);
  }
  if (ts_exchange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_exchange));
    if (message_arena != submessage_arena) {
      ts_exchange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts_exchange, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ts_exchange_ = ts_exchange;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamOrderBookL2ResponseV1.ts_exchange)
}

// .kaikosdk.TimestampValue ts_collection = 9;
inline bool StreamOrderBookL2ResponseV1::_internal_has_ts_collection() const {
  return this != internal_default_instance() && _impl_.ts_collection_ != nullptr;
}
inline bool StreamOrderBookL2ResponseV1::has_ts_collection() const {
  return _internal_has_ts_collection();
}
inline const ::kaikosdk::TimestampValue& StreamOrderBookL2ResponseV1::_internal_ts_collection() const {
  const ::kaikosdk::TimestampValue* p = _impl_.ts_collection_;
  return p != nullptr ? *p : reinterpret_cast<const ::kaikosdk::TimestampValue&>(
      ::kaikosdk::_TimestampValue_default_instance_);
}
inline const ::kaikosdk::TimestampValue& StreamOrderBookL2ResponseV1::ts_collection() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamOrderBookL2ResponseV1.ts_collection)
  return _internal_ts_collection();
}
inline void StreamOrderBookL2ResponseV1::unsafe_arena_set_allocated_ts_collection(
    ::kaikosdk::TimestampValue* ts_collection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_collection_);
  }
  _impl_.ts_collection_ = ts_collection;
  if (ts_collection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamOrderBookL2ResponseV1.ts_collection)
}
inline ::kaikosdk::TimestampValue* StreamOrderBookL2ResponseV1::release_ts_collection() {
  
  ::kaikosdk::TimestampValue* temp = _impl_.ts_collection_;
  _impl_.ts_collection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kaikosdk::TimestampValue* StreamOrderBookL2ResponseV1::unsafe_arena_release_ts_collection() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamOrderBookL2ResponseV1.ts_collection)
  
  ::kaikosdk::TimestampValue* temp = _impl_.ts_collection_;
  _impl_.ts_collection_ = nullptr;
  return temp;
}
inline ::kaikosdk::TimestampValue* StreamOrderBookL2ResponseV1::_internal_mutable_ts_collection() {
  
  if (_impl_.ts_collection_ == nullptr) {
    auto* p = CreateMaybeMessage<::kaikosdk::TimestampValue>(GetArenaForAllocation());
    _impl_.ts_collection_ = p;
  }
  return _impl_.ts_collection_;
}
inline ::kaikosdk::TimestampValue* StreamOrderBookL2ResponseV1::mutable_ts_collection() {
  ::kaikosdk::TimestampValue* _msg = _internal_mutable_ts_collection();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamOrderBookL2ResponseV1.ts_collection)
  return _msg;
}
inline void StreamOrderBookL2ResponseV1::set_allocated_ts_collection(::kaikosdk::TimestampValue* ts_collection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_collection_);
  }
  if (ts_collection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_collection));
    if (message_arena != submessage_arena) {
      ts_collection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts_collection, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ts_collection_ = ts_collection;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamOrderBookL2ResponseV1.ts_collection)
}

// .google.protobuf.Timestamp ts_event = 10;
inline bool StreamOrderBookL2ResponseV1::_internal_has_ts_event() const {
  return this != internal_default_instance() && _impl_.ts_event_ != nullptr;
}
inline bool StreamOrderBookL2ResponseV1::has_ts_event() const {
  return _internal_has_ts_event();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamOrderBookL2ResponseV1::_internal_ts_event() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.ts_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamOrderBookL2ResponseV1::ts_event() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamOrderBookL2ResponseV1.ts_event)
  return _internal_ts_event();
}
inline void StreamOrderBookL2ResponseV1::unsafe_arena_set_allocated_ts_event(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_event_);
  }
  _impl_.ts_event_ = ts_event;
  if (ts_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamOrderBookL2ResponseV1.ts_event)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamOrderBookL2ResponseV1::release_ts_event() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_event_;
  _impl_.ts_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamOrderBookL2ResponseV1::unsafe_arena_release_ts_event() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamOrderBookL2ResponseV1.ts_event)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_event_;
  _impl_.ts_event_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamOrderBookL2ResponseV1::_internal_mutable_ts_event() {
  
  if (_impl_.ts_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.ts_event_ = p;
  }
  return _impl_.ts_event_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamOrderBookL2ResponseV1::mutable_ts_event() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_ts_event();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamOrderBookL2ResponseV1.ts_event)
  return _msg;
}
inline void StreamOrderBookL2ResponseV1::set_allocated_ts_event(::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_event_);
  }
  if (ts_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_event));
    if (message_arena != submessage_arena) {
      ts_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts_event, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ts_event_ = ts_event;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamOrderBookL2ResponseV1.ts_event)
}

// map<string, string> additional_properties = 11;
inline int StreamOrderBookL2ResponseV1::_internal_additional_properties_size() const {
  return _impl_.additional_properties_.size();
}
inline int StreamOrderBookL2ResponseV1::additional_properties_size() const {
  return _internal_additional_properties_size();
}
inline void StreamOrderBookL2ResponseV1::clear_additional_properties() {
  _impl_.additional_properties_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
StreamOrderBookL2ResponseV1::_internal_additional_properties() const {
  return _impl_.additional_properties_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
StreamOrderBookL2ResponseV1::additional_properties() const {
  // @@protoc_insertion_point(field_map:kaikosdk.StreamOrderBookL2ResponseV1.additional_properties)
  return _internal_additional_properties();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
StreamOrderBookL2ResponseV1::_internal_mutable_additional_properties() {
  return _impl_.additional_properties_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
StreamOrderBookL2ResponseV1::mutable_additional_properties() {
  // @@protoc_insertion_point(field_mutable_map:kaikosdk.StreamOrderBookL2ResponseV1.additional_properties)
  return _internal_mutable_additional_properties();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kaikosdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::kaikosdk::StreamOrderBookL2UpdateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kaikosdk::StreamOrderBookL2UpdateType>() {
  return ::kaikosdk::StreamOrderBookL2UpdateType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto
