// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk/stream/orderbookl2_v1/response.proto

#include "sdk/stream/orderbookl2_v1/response.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace kaikosdk {
PROTOBUF_CONSTEXPR StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse::StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUseDefaultTypeInternal _StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR StreamOrderBookL2ResponseV1::StreamOrderBookL2ResponseV1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.asks_)*/{}
  , /*decltype(_impl_.bids_)*/{}
  , /*decltype(_impl_.additional_properties_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.class__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.exchange_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sequence_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ts_exchange_)*/nullptr
  , /*decltype(_impl_.ts_collection_)*/nullptr
  , /*decltype(_impl_.ts_event_)*/nullptr
  , /*decltype(_impl_.update_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamOrderBookL2ResponseV1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamOrderBookL2ResponseV1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamOrderBookL2ResponseV1DefaultTypeInternal() {}
  union {
    StreamOrderBookL2ResponseV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamOrderBookL2ResponseV1DefaultTypeInternal _StreamOrderBookL2ResponseV1_default_instance_;
}  // namespace kaikosdk
static ::_pb::Metadata file_level_metadata_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto = nullptr;

const uint32_t TableStruct_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamOrderBookL2ResponseV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamOrderBookL2ResponseV1, _impl_.class__),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamOrderBookL2ResponseV1, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamOrderBookL2ResponseV1, _impl_.exchange_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamOrderBookL2ResponseV1, _impl_.sequence_id_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamOrderBookL2ResponseV1, _impl_.update_type_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamOrderBookL2ResponseV1, _impl_.asks_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamOrderBookL2ResponseV1, _impl_.bids_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamOrderBookL2ResponseV1, _impl_.ts_exchange_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamOrderBookL2ResponseV1, _impl_.ts_collection_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamOrderBookL2ResponseV1, _impl_.ts_event_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamOrderBookL2ResponseV1, _impl_.additional_properties_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::kaikosdk::StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::kaikosdk::StreamOrderBookL2ResponseV1)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::kaikosdk::_StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse_default_instance_._instance,
  &::kaikosdk::_StreamOrderBookL2ResponseV1_default_instance_._instance,
};

const char descriptor_table_protodef_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(sdk/stream/orderbookl2_v1/response.pro"
  "to\022\010kaikosdk\032\037google/protobuf/timestamp."
  "proto\032\027sdk/core/wrappers.proto\032%sdk/stre"
  "am/orderbookl2_v1/order.proto\"\206\004\n\033Stream"
  "OrderBookL2ResponseV1\022\r\n\005class\030\001 \001(\t\022\014\n\004"
  "code\030\002 \001(\t\022\020\n\010exchange\030\003 \001(\t\022\023\n\013sequence"
  "_id\030\004 \001(\t\022:\n\013update_type\030\005 \001(\0162%.kaikosd"
  "k.StreamOrderBookL2UpdateType\022\035\n\004asks\030\006 "
  "\003(\0132\017.kaikosdk.Order\022\035\n\004bids\030\007 \003(\0132\017.kai"
  "kosdk.Order\022-\n\013ts_exchange\030\010 \001(\0132\030.kaiko"
  "sdk.TimestampValue\022/\n\rts_collection\030\t \001("
  "\0132\030.kaikosdk.TimestampValue\022,\n\010ts_event\030"
  "\n \001(\0132\032.google.protobuf.Timestamp\022^\n\025add"
  "itional_properties\030\013 \003(\0132\?.kaikosdk.Stre"
  "amOrderBookL2ResponseV1.AdditionalProper"
  "tiesEntry\032;\n\031AdditionalPropertiesEntry\022\013"
  "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001*D\n\033Stream"
  "OrderBookL2UpdateType\022\013\n\007UNKNOWN\020\000\022\014\n\010SN"
  "APSHOT\020\001\022\n\n\006UPDATE\020\002B\217\001\n#com.kaiko.sdk.s"
  "tream.orderbookl2_v1P\001ZFgithub.com/kaiko"
  "data/kaiko-go-sdk/stream/orderbookl2_v1;"
  "orderbookl2_v1\252\002\035KaikoSdk.Stream.OrderBo"
  "okL2V1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_sdk_2fcore_2fwrappers_2eproto,
  &::descriptor_table_sdk_2fstream_2forderbookl2_5fv1_2forder_2eproto,
};
static ::_pbi::once_flag descriptor_table_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto = {
    false, false, 894, descriptor_table_protodef_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto,
    "sdk/stream/orderbookl2_v1/response.proto",
    &descriptor_table_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto_once, descriptor_table_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto_deps, 3, 2,
    schemas, file_default_instances, TableStruct_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto::offsets,
    file_level_metadata_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto, file_level_enum_descriptors_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto,
    file_level_service_descriptors_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto_getter() {
  return &descriptor_table_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto(&descriptor_table_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto);
namespace kaikosdk {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamOrderBookL2UpdateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto);
  return file_level_enum_descriptors_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto[0];
}
bool StreamOrderBookL2UpdateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse::StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse() {}
StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse::StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse::MergeFrom(const StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto_getter, &descriptor_table_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto_once,
      file_level_metadata_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto[0]);
}

// ===================================================================

class StreamOrderBookL2ResponseV1::_Internal {
 public:
  static const ::kaikosdk::TimestampValue& ts_exchange(const StreamOrderBookL2ResponseV1* msg);
  static const ::kaikosdk::TimestampValue& ts_collection(const StreamOrderBookL2ResponseV1* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts_event(const StreamOrderBookL2ResponseV1* msg);
};

const ::kaikosdk::TimestampValue&
StreamOrderBookL2ResponseV1::_Internal::ts_exchange(const StreamOrderBookL2ResponseV1* msg) {
  return *msg->_impl_.ts_exchange_;
}
const ::kaikosdk::TimestampValue&
StreamOrderBookL2ResponseV1::_Internal::ts_collection(const StreamOrderBookL2ResponseV1* msg) {
  return *msg->_impl_.ts_collection_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
StreamOrderBookL2ResponseV1::_Internal::ts_event(const StreamOrderBookL2ResponseV1* msg) {
  return *msg->_impl_.ts_event_;
}
void StreamOrderBookL2ResponseV1::clear_asks() {
  _impl_.asks_.Clear();
}
void StreamOrderBookL2ResponseV1::clear_bids() {
  _impl_.bids_.Clear();
}
void StreamOrderBookL2ResponseV1::clear_ts_exchange() {
  if (GetArenaForAllocation() == nullptr && _impl_.ts_exchange_ != nullptr) {
    delete _impl_.ts_exchange_;
  }
  _impl_.ts_exchange_ = nullptr;
}
void StreamOrderBookL2ResponseV1::clear_ts_collection() {
  if (GetArenaForAllocation() == nullptr && _impl_.ts_collection_ != nullptr) {
    delete _impl_.ts_collection_;
  }
  _impl_.ts_collection_ = nullptr;
}
void StreamOrderBookL2ResponseV1::clear_ts_event() {
  if (GetArenaForAllocation() == nullptr && _impl_.ts_event_ != nullptr) {
    delete _impl_.ts_event_;
  }
  _impl_.ts_event_ = nullptr;
}
StreamOrderBookL2ResponseV1::StreamOrderBookL2ResponseV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &StreamOrderBookL2ResponseV1::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:kaikosdk.StreamOrderBookL2ResponseV1)
}
StreamOrderBookL2ResponseV1::StreamOrderBookL2ResponseV1(const StreamOrderBookL2ResponseV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamOrderBookL2ResponseV1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.asks_){from._impl_.asks_}
    , decltype(_impl_.bids_){from._impl_.bids_}
    , /*decltype(_impl_.additional_properties_)*/{}
    , decltype(_impl_.class__){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.exchange_){}
    , decltype(_impl_.sequence_id_){}
    , decltype(_impl_.ts_exchange_){nullptr}
    , decltype(_impl_.ts_collection_){nullptr}
    , decltype(_impl_.ts_event_){nullptr}
    , decltype(_impl_.update_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.additional_properties_.MergeFrom(from._impl_.additional_properties_);
  _impl_.class__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_().empty()) {
    _this->_impl_.class__.Set(from._internal_class_(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.exchange_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchange_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange().empty()) {
    _this->_impl_.exchange_.Set(from._internal_exchange(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sequence_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sequence_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sequence_id().empty()) {
    _this->_impl_.sequence_id_.Set(from._internal_sequence_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ts_exchange()) {
    _this->_impl_.ts_exchange_ = new ::kaikosdk::TimestampValue(*from._impl_.ts_exchange_);
  }
  if (from._internal_has_ts_collection()) {
    _this->_impl_.ts_collection_ = new ::kaikosdk::TimestampValue(*from._impl_.ts_collection_);
  }
  if (from._internal_has_ts_event()) {
    _this->_impl_.ts_event_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.ts_event_);
  }
  _this->_impl_.update_type_ = from._impl_.update_type_;
  // @@protoc_insertion_point(copy_constructor:kaikosdk.StreamOrderBookL2ResponseV1)
}

inline void StreamOrderBookL2ResponseV1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.asks_){arena}
    , decltype(_impl_.bids_){arena}
    , /*decltype(_impl_.additional_properties_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.class__){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.exchange_){}
    , decltype(_impl_.sequence_id_){}
    , decltype(_impl_.ts_exchange_){nullptr}
    , decltype(_impl_.ts_collection_){nullptr}
    , decltype(_impl_.ts_event_){nullptr}
    , decltype(_impl_.update_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.class__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.class__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exchange_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exchange_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sequence_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sequence_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamOrderBookL2ResponseV1::~StreamOrderBookL2ResponseV1() {
  // @@protoc_insertion_point(destructor:kaikosdk.StreamOrderBookL2ResponseV1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void StreamOrderBookL2ResponseV1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.asks_.~RepeatedPtrField();
  _impl_.bids_.~RepeatedPtrField();
  _impl_.additional_properties_.Destruct();
  _impl_.additional_properties_.~MapField();
  _impl_.class__.Destroy();
  _impl_.code_.Destroy();
  _impl_.exchange_.Destroy();
  _impl_.sequence_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ts_exchange_;
  if (this != internal_default_instance()) delete _impl_.ts_collection_;
  if (this != internal_default_instance()) delete _impl_.ts_event_;
}

void StreamOrderBookL2ResponseV1::ArenaDtor(void* object) {
  StreamOrderBookL2ResponseV1* _this = reinterpret_cast< StreamOrderBookL2ResponseV1* >(object);
  _this->_impl_.additional_properties_.Destruct();
}
void StreamOrderBookL2ResponseV1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamOrderBookL2ResponseV1::Clear() {
// @@protoc_insertion_point(message_clear_start:kaikosdk.StreamOrderBookL2ResponseV1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.asks_.Clear();
  _impl_.bids_.Clear();
  _impl_.additional_properties_.Clear();
  _impl_.class__.ClearToEmpty();
  _impl_.code_.ClearToEmpty();
  _impl_.exchange_.ClearToEmpty();
  _impl_.sequence_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ts_exchange_ != nullptr) {
    delete _impl_.ts_exchange_;
  }
  _impl_.ts_exchange_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ts_collection_ != nullptr) {
    delete _impl_.ts_collection_;
  }
  _impl_.ts_collection_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ts_event_ != nullptr) {
    delete _impl_.ts_event_;
  }
  _impl_.ts_event_ = nullptr;
  _impl_.update_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamOrderBookL2ResponseV1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string class = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_class_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamOrderBookL2ResponseV1.class"));
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamOrderBookL2ResponseV1.code"));
        } else
          goto handle_unusual;
        continue;
      // string exchange = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_exchange();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamOrderBookL2ResponseV1.exchange"));
        } else
          goto handle_unusual;
        continue;
      // string sequence_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sequence_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamOrderBookL2ResponseV1.sequence_id"));
        } else
          goto handle_unusual;
        continue;
      // .kaikosdk.StreamOrderBookL2UpdateType update_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_update_type(static_cast<::kaikosdk::StreamOrderBookL2UpdateType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .kaikosdk.Order asks = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_asks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .kaikosdk.Order bids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .kaikosdk.TimestampValue ts_exchange = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ts_exchange(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kaikosdk.TimestampValue ts_collection = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ts_collection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp ts_event = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_ts_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> additional_properties = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.additional_properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamOrderBookL2ResponseV1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaikosdk.StreamOrderBookL2ResponseV1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string class = 1;
  if (!this->_internal_class_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_().data(), static_cast<int>(this->_internal_class_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamOrderBookL2ResponseV1.class");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_class_(), target);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamOrderBookL2ResponseV1.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // string exchange = 3;
  if (!this->_internal_exchange().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange().data(), static_cast<int>(this->_internal_exchange().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamOrderBookL2ResponseV1.exchange");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_exchange(), target);
  }

  // string sequence_id = 4;
  if (!this->_internal_sequence_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sequence_id().data(), static_cast<int>(this->_internal_sequence_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamOrderBookL2ResponseV1.sequence_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sequence_id(), target);
  }

  // .kaikosdk.StreamOrderBookL2UpdateType update_type = 5;
  if (this->_internal_update_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_update_type(), target);
  }

  // repeated .kaikosdk.Order asks = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_asks_size()); i < n; i++) {
    const auto& repfield = this->_internal_asks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .kaikosdk.Order bids = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bids_size()); i < n; i++) {
    const auto& repfield = this->_internal_bids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .kaikosdk.TimestampValue ts_exchange = 8;
  if (this->_internal_has_ts_exchange()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::ts_exchange(this),
        _Internal::ts_exchange(this).GetCachedSize(), target, stream);
  }

  // .kaikosdk.TimestampValue ts_collection = 9;
  if (this->_internal_has_ts_collection()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::ts_collection(this),
        _Internal::ts_collection(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp ts_event = 10;
  if (this->_internal_has_ts_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::ts_event(this),
        _Internal::ts_event(this).GetCachedSize(), target, stream);
  }

  // map<string, string> additional_properties = 11;
  if (!this->_internal_additional_properties().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_additional_properties();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "kaikosdk.StreamOrderBookL2ResponseV1.AdditionalPropertiesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "kaikosdk.StreamOrderBookL2ResponseV1.AdditionalPropertiesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaikosdk.StreamOrderBookL2ResponseV1)
  return target;
}

size_t StreamOrderBookL2ResponseV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaikosdk.StreamOrderBookL2ResponseV1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kaikosdk.Order asks = 6;
  total_size += 1UL * this->_internal_asks_size();
  for (const auto& msg : this->_impl_.asks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kaikosdk.Order bids = 7;
  total_size += 1UL * this->_internal_bids_size();
  for (const auto& msg : this->_impl_.bids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, string> additional_properties = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_additional_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_additional_properties().begin();
      it != this->_internal_additional_properties().end(); ++it) {
    total_size += StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string class = 1;
  if (!this->_internal_class_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_());
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string exchange = 3;
  if (!this->_internal_exchange().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange());
  }

  // string sequence_id = 4;
  if (!this->_internal_sequence_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sequence_id());
  }

  // .kaikosdk.TimestampValue ts_exchange = 8;
  if (this->_internal_has_ts_exchange()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ts_exchange_);
  }

  // .kaikosdk.TimestampValue ts_collection = 9;
  if (this->_internal_has_ts_collection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ts_collection_);
  }

  // .google.protobuf.Timestamp ts_event = 10;
  if (this->_internal_has_ts_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ts_event_);
  }

  // .kaikosdk.StreamOrderBookL2UpdateType update_type = 5;
  if (this->_internal_update_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_update_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamOrderBookL2ResponseV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamOrderBookL2ResponseV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamOrderBookL2ResponseV1::GetClassData() const { return &_class_data_; }


void StreamOrderBookL2ResponseV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamOrderBookL2ResponseV1*>(&to_msg);
  auto& from = static_cast<const StreamOrderBookL2ResponseV1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaikosdk.StreamOrderBookL2ResponseV1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.asks_.MergeFrom(from._impl_.asks_);
  _this->_impl_.bids_.MergeFrom(from._impl_.bids_);
  _this->_impl_.additional_properties_.MergeFrom(from._impl_.additional_properties_);
  if (!from._internal_class_().empty()) {
    _this->_internal_set_class_(from._internal_class_());
  }
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  if (!from._internal_sequence_id().empty()) {
    _this->_internal_set_sequence_id(from._internal_sequence_id());
  }
  if (from._internal_has_ts_exchange()) {
    _this->_internal_mutable_ts_exchange()->::kaikosdk::TimestampValue::MergeFrom(
        from._internal_ts_exchange());
  }
  if (from._internal_has_ts_collection()) {
    _this->_internal_mutable_ts_collection()->::kaikosdk::TimestampValue::MergeFrom(
        from._internal_ts_collection());
  }
  if (from._internal_has_ts_event()) {
    _this->_internal_mutable_ts_event()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_ts_event());
  }
  if (from._internal_update_type() != 0) {
    _this->_internal_set_update_type(from._internal_update_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamOrderBookL2ResponseV1::CopyFrom(const StreamOrderBookL2ResponseV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaikosdk.StreamOrderBookL2ResponseV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamOrderBookL2ResponseV1::IsInitialized() const {
  return true;
}

void StreamOrderBookL2ResponseV1::InternalSwap(StreamOrderBookL2ResponseV1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.asks_.InternalSwap(&other->_impl_.asks_);
  _impl_.bids_.InternalSwap(&other->_impl_.bids_);
  _impl_.additional_properties_.InternalSwap(&other->_impl_.additional_properties_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.class__, lhs_arena,
      &other->_impl_.class__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.exchange_, lhs_arena,
      &other->_impl_.exchange_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sequence_id_, lhs_arena,
      &other->_impl_.sequence_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamOrderBookL2ResponseV1, _impl_.update_type_)
      + sizeof(StreamOrderBookL2ResponseV1::_impl_.update_type_)
      - PROTOBUF_FIELD_OFFSET(StreamOrderBookL2ResponseV1, _impl_.ts_exchange_)>(
          reinterpret_cast<char*>(&_impl_.ts_exchange_),
          reinterpret_cast<char*>(&other->_impl_.ts_exchange_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamOrderBookL2ResponseV1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto_getter, &descriptor_table_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto_once,
      file_level_metadata_sdk_2fstream_2forderbookl2_5fv1_2fresponse_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace kaikosdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kaikosdk::StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::kaikosdk::StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaikosdk::StreamOrderBookL2ResponseV1_AdditionalPropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::kaikosdk::StreamOrderBookL2ResponseV1*
Arena::CreateMaybeMessage< ::kaikosdk::StreamOrderBookL2ResponseV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaikosdk::StreamOrderBookL2ResponseV1 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
