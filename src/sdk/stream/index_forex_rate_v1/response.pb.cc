// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk/stream/index_forex_rate_v1/response.proto

#include "sdk/stream/index_forex_rate_v1/response.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace kaikosdk {
PROTOBUF_CONSTEXPR StreamForexIndexPublic::StreamForexIndexPublic(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ts_event_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamForexIndexPublicDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamForexIndexPublicDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamForexIndexPublicDefaultTypeInternal() {}
  union {
    StreamForexIndexPublic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamForexIndexPublicDefaultTypeInternal _StreamForexIndexPublic_default_instance_;
PROTOBUF_CONSTEXPR StreamForexIndexDetail::StreamForexIndexDetail(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ts_event_)*/nullptr
  , /*decltype(_impl_.price_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamForexIndexDetailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamForexIndexDetailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamForexIndexDetailDefaultTypeInternal() {}
  union {
    StreamForexIndexDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamForexIndexDetailDefaultTypeInternal _StreamForexIndexDetail_default_instance_;
PROTOBUF_CONSTEXPR StreamForexIndexServiceResponseDetail::StreamForexIndexServiceResponseDetail(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.underlying_)*/nullptr
  , /*decltype(_impl_.fxrate_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamForexIndexServiceResponseDetailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamForexIndexServiceResponseDetailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamForexIndexServiceResponseDetailDefaultTypeInternal() {}
  union {
    StreamForexIndexServiceResponseDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamForexIndexServiceResponseDetailDefaultTypeInternal _StreamForexIndexServiceResponseDetail_default_instance_;
PROTOBUF_CONSTEXPR StreamForexIndexServiceResponsePublic::StreamForexIndexServiceResponsePublic(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.underlying_)*/nullptr
  , /*decltype(_impl_.fxrate_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamForexIndexServiceResponsePublicDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamForexIndexServiceResponsePublicDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamForexIndexServiceResponsePublicDefaultTypeInternal() {}
  union {
    StreamForexIndexServiceResponsePublic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamForexIndexServiceResponsePublicDefaultTypeInternal _StreamForexIndexServiceResponsePublic_default_instance_;
PROTOBUF_CONSTEXPR StreamIndexForexRateServiceResponseV1::StreamIndexForexRateServiceResponseV1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.interval_)*/nullptr
  , /*decltype(_impl_.composition_)*/nullptr
  , /*decltype(_impl_.ts_event_)*/nullptr
  , /*decltype(_impl_.detail_)*/nullptr
  , /*decltype(_impl_.price_)*/0
  , /*decltype(_impl_.commodity_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamIndexForexRateServiceResponseV1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamIndexForexRateServiceResponseV1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamIndexForexRateServiceResponseV1DefaultTypeInternal() {}
  union {
    StreamIndexForexRateServiceResponseV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamIndexForexRateServiceResponseV1DefaultTypeInternal _StreamIndexForexRateServiceResponseV1_default_instance_;
}  // namespace kaikosdk
static ::_pb::Metadata file_level_metadata_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto = nullptr;

const uint32_t TableStruct_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamForexIndexPublic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamForexIndexPublic, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamForexIndexPublic, _impl_.ts_event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamForexIndexDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamForexIndexDetail, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamForexIndexDetail, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamForexIndexDetail, _impl_.ts_event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamForexIndexServiceResponseDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamForexIndexServiceResponseDetail, _impl_.underlying_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamForexIndexServiceResponseDetail, _impl_.fxrate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamForexIndexServiceResponsePublic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamForexIndexServiceResponsePublic, _impl_.underlying_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamForexIndexServiceResponsePublic, _impl_.fxrate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexForexRateServiceResponseV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexForexRateServiceResponseV1, _impl_.index_code_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexForexRateServiceResponseV1, _impl_.commodity_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexForexRateServiceResponseV1, _impl_.interval_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexForexRateServiceResponseV1, _impl_.composition_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexForexRateServiceResponseV1, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexForexRateServiceResponseV1, _impl_.ts_event_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIndexForexRateServiceResponseV1, _impl_.detail_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::kaikosdk::StreamForexIndexPublic)},
  { 8, -1, -1, sizeof(::kaikosdk::StreamForexIndexDetail)},
  { 17, -1, -1, sizeof(::kaikosdk::StreamForexIndexServiceResponseDetail)},
  { 25, -1, -1, sizeof(::kaikosdk::StreamForexIndexServiceResponsePublic)},
  { 33, -1, -1, sizeof(::kaikosdk::StreamIndexForexRateServiceResponseV1)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::kaikosdk::_StreamForexIndexPublic_default_instance_._instance,
  &::kaikosdk::_StreamForexIndexDetail_default_instance_._instance,
  &::kaikosdk::_StreamForexIndexServiceResponseDetail_default_instance_._instance,
  &::kaikosdk::_StreamForexIndexServiceResponsePublic_default_instance_._instance,
  &::kaikosdk::_StreamIndexForexRateServiceResponseV1_default_instance_._instance,
};

const char descriptor_table_protodef_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-sdk/stream/index_forex_rate_v1/respons"
  "e.proto\022\010kaikosdk\032\037google/protobuf/times"
  "tamp.proto\032\034sdk/core/data_interval.proto"
  "\032#sdk/stream/index_v1/commodity.proto\"T\n"
  "\026StreamForexIndexPublic\022\014\n\004name\030\001 \001(\t\022,\n"
  "\010ts_event\030\002 \001(\0132\032.google.protobuf.Timest"
  "amp\"c\n\026StreamForexIndexDetail\022\014\n\004name\030\001 "
  "\001(\t\022\r\n\005price\030\002 \001(\001\022,\n\010ts_event\030\003 \001(\0132\032.g"
  "oogle.protobuf.Timestamp\"\217\001\n%StreamForex"
  "IndexServiceResponseDetail\0224\n\nunderlying"
  "\030\001 \001(\0132 .kaikosdk.StreamForexIndexDetail"
  "\0220\n\006fxrate\030\002 \001(\0132 .kaikosdk.StreamForexI"
  "ndexDetail\"\217\001\n%StreamForexIndexServiceRe"
  "sponsePublic\0224\n\nunderlying\030\001 \001(\0132 .kaiko"
  "sdk.StreamForexIndexPublic\0220\n\006fxrate\030\002 \001"
  "(\0132 .kaikosdk.StreamForexIndexPublic\"\334\002\n"
  "%StreamIndexForexRateServiceResponseV1\022\022"
  "\n\nindex_code\030\001 \001(\t\0221\n\tcommodity\030\002 \001(\0162\036."
  "kaikosdk.StreamIndexCommodity\022(\n\010interva"
  "l\030\003 \001(\0132\026.kaikosdk.DataInterval\022D\n\013compo"
  "sition\030\004 \001(\0132/.kaikosdk.StreamForexIndex"
  "ServiceResponsePublic\022\r\n\005price\030\005 \001(\001\022,\n\010"
  "ts_event\030\006 \001(\0132\032.google.protobuf.Timesta"
  "mp\022\?\n\006detail\030\007 \001(\0132/.kaikosdk.StreamFore"
  "xIndexServiceResponseDetailB\230\001\n(com.kaik"
  "o.sdk.stream.index_forex_rate_v1P\001ZPgith"
  "ub.com/kaikodata/kaiko-go-sdk/stream/ind"
  "ex_forex_rate_v1;index_forex_rate_v1\252\002\027K"
  "aikoSdk.Stream.ForexV1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_sdk_2fcore_2fdata_5finterval_2eproto,
  &::descriptor_table_sdk_2fstream_2findex_5fv1_2fcommodity_2eproto,
};
static ::_pbi::once_flag descriptor_table_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto = {
    false, false, 1150, descriptor_table_protodef_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto,
    "sdk/stream/index_forex_rate_v1/response.proto",
    &descriptor_table_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto_once, descriptor_table_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto_deps, 3, 5,
    schemas, file_default_instances, TableStruct_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto::offsets,
    file_level_metadata_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto, file_level_enum_descriptors_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto,
    file_level_service_descriptors_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto_getter() {
  return &descriptor_table_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto(&descriptor_table_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto);
namespace kaikosdk {

// ===================================================================

class StreamForexIndexPublic::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts_event(const StreamForexIndexPublic* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
StreamForexIndexPublic::_Internal::ts_event(const StreamForexIndexPublic* msg) {
  return *msg->_impl_.ts_event_;
}
void StreamForexIndexPublic::clear_ts_event() {
  if (GetArenaForAllocation() == nullptr && _impl_.ts_event_ != nullptr) {
    delete _impl_.ts_event_;
  }
  _impl_.ts_event_ = nullptr;
}
StreamForexIndexPublic::StreamForexIndexPublic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaikosdk.StreamForexIndexPublic)
}
StreamForexIndexPublic::StreamForexIndexPublic(const StreamForexIndexPublic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamForexIndexPublic* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.ts_event_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ts_event()) {
    _this->_impl_.ts_event_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.ts_event_);
  }
  // @@protoc_insertion_point(copy_constructor:kaikosdk.StreamForexIndexPublic)
}

inline void StreamForexIndexPublic::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.ts_event_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamForexIndexPublic::~StreamForexIndexPublic() {
  // @@protoc_insertion_point(destructor:kaikosdk.StreamForexIndexPublic)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamForexIndexPublic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ts_event_;
}

void StreamForexIndexPublic::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamForexIndexPublic::Clear() {
// @@protoc_insertion_point(message_clear_start:kaikosdk.StreamForexIndexPublic)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ts_event_ != nullptr) {
    delete _impl_.ts_event_;
  }
  _impl_.ts_event_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamForexIndexPublic::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamForexIndexPublic.name"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp ts_event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ts_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamForexIndexPublic::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaikosdk.StreamForexIndexPublic)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamForexIndexPublic.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .google.protobuf.Timestamp ts_event = 2;
  if (this->_internal_has_ts_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ts_event(this),
        _Internal::ts_event(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaikosdk.StreamForexIndexPublic)
  return target;
}

size_t StreamForexIndexPublic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaikosdk.StreamForexIndexPublic)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Timestamp ts_event = 2;
  if (this->_internal_has_ts_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ts_event_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamForexIndexPublic::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamForexIndexPublic::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamForexIndexPublic::GetClassData() const { return &_class_data_; }


void StreamForexIndexPublic::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamForexIndexPublic*>(&to_msg);
  auto& from = static_cast<const StreamForexIndexPublic&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaikosdk.StreamForexIndexPublic)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_ts_event()) {
    _this->_internal_mutable_ts_event()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_ts_event());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamForexIndexPublic::CopyFrom(const StreamForexIndexPublic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaikosdk.StreamForexIndexPublic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamForexIndexPublic::IsInitialized() const {
  return true;
}

void StreamForexIndexPublic::InternalSwap(StreamForexIndexPublic* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.ts_event_, other->_impl_.ts_event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamForexIndexPublic::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto_getter, &descriptor_table_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto_once,
      file_level_metadata_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto[0]);
}

// ===================================================================

class StreamForexIndexDetail::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts_event(const StreamForexIndexDetail* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
StreamForexIndexDetail::_Internal::ts_event(const StreamForexIndexDetail* msg) {
  return *msg->_impl_.ts_event_;
}
void StreamForexIndexDetail::clear_ts_event() {
  if (GetArenaForAllocation() == nullptr && _impl_.ts_event_ != nullptr) {
    delete _impl_.ts_event_;
  }
  _impl_.ts_event_ = nullptr;
}
StreamForexIndexDetail::StreamForexIndexDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaikosdk.StreamForexIndexDetail)
}
StreamForexIndexDetail::StreamForexIndexDetail(const StreamForexIndexDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamForexIndexDetail* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.ts_event_){nullptr}
    , decltype(_impl_.price_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ts_event()) {
    _this->_impl_.ts_event_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.ts_event_);
  }
  _this->_impl_.price_ = from._impl_.price_;
  // @@protoc_insertion_point(copy_constructor:kaikosdk.StreamForexIndexDetail)
}

inline void StreamForexIndexDetail::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.ts_event_){nullptr}
    , decltype(_impl_.price_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamForexIndexDetail::~StreamForexIndexDetail() {
  // @@protoc_insertion_point(destructor:kaikosdk.StreamForexIndexDetail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamForexIndexDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ts_event_;
}

void StreamForexIndexDetail::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamForexIndexDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:kaikosdk.StreamForexIndexDetail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ts_event_ != nullptr) {
    delete _impl_.ts_event_;
  }
  _impl_.ts_event_ = nullptr;
  _impl_.price_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamForexIndexDetail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamForexIndexDetail.name"));
        } else
          goto handle_unusual;
        continue;
      // double price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp ts_event = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ts_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamForexIndexDetail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaikosdk.StreamForexIndexDetail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamForexIndexDetail.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // double price = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = this->_internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_price(), target);
  }

  // .google.protobuf.Timestamp ts_event = 3;
  if (this->_internal_has_ts_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::ts_event(this),
        _Internal::ts_event(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaikosdk.StreamForexIndexDetail)
  return target;
}

size_t StreamForexIndexDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaikosdk.StreamForexIndexDetail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Timestamp ts_event = 3;
  if (this->_internal_has_ts_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ts_event_);
  }

  // double price = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = this->_internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamForexIndexDetail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamForexIndexDetail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamForexIndexDetail::GetClassData() const { return &_class_data_; }


void StreamForexIndexDetail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamForexIndexDetail*>(&to_msg);
  auto& from = static_cast<const StreamForexIndexDetail&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaikosdk.StreamForexIndexDetail)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_ts_event()) {
    _this->_internal_mutable_ts_event()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_ts_event());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = from._internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamForexIndexDetail::CopyFrom(const StreamForexIndexDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaikosdk.StreamForexIndexDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamForexIndexDetail::IsInitialized() const {
  return true;
}

void StreamForexIndexDetail::InternalSwap(StreamForexIndexDetail* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamForexIndexDetail, _impl_.price_)
      + sizeof(StreamForexIndexDetail::_impl_.price_)
      - PROTOBUF_FIELD_OFFSET(StreamForexIndexDetail, _impl_.ts_event_)>(
          reinterpret_cast<char*>(&_impl_.ts_event_),
          reinterpret_cast<char*>(&other->_impl_.ts_event_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamForexIndexDetail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto_getter, &descriptor_table_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto_once,
      file_level_metadata_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto[1]);
}

// ===================================================================

class StreamForexIndexServiceResponseDetail::_Internal {
 public:
  static const ::kaikosdk::StreamForexIndexDetail& underlying(const StreamForexIndexServiceResponseDetail* msg);
  static const ::kaikosdk::StreamForexIndexDetail& fxrate(const StreamForexIndexServiceResponseDetail* msg);
};

const ::kaikosdk::StreamForexIndexDetail&
StreamForexIndexServiceResponseDetail::_Internal::underlying(const StreamForexIndexServiceResponseDetail* msg) {
  return *msg->_impl_.underlying_;
}
const ::kaikosdk::StreamForexIndexDetail&
StreamForexIndexServiceResponseDetail::_Internal::fxrate(const StreamForexIndexServiceResponseDetail* msg) {
  return *msg->_impl_.fxrate_;
}
StreamForexIndexServiceResponseDetail::StreamForexIndexServiceResponseDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaikosdk.StreamForexIndexServiceResponseDetail)
}
StreamForexIndexServiceResponseDetail::StreamForexIndexServiceResponseDetail(const StreamForexIndexServiceResponseDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamForexIndexServiceResponseDetail* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.underlying_){nullptr}
    , decltype(_impl_.fxrate_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_underlying()) {
    _this->_impl_.underlying_ = new ::kaikosdk::StreamForexIndexDetail(*from._impl_.underlying_);
  }
  if (from._internal_has_fxrate()) {
    _this->_impl_.fxrate_ = new ::kaikosdk::StreamForexIndexDetail(*from._impl_.fxrate_);
  }
  // @@protoc_insertion_point(copy_constructor:kaikosdk.StreamForexIndexServiceResponseDetail)
}

inline void StreamForexIndexServiceResponseDetail::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.underlying_){nullptr}
    , decltype(_impl_.fxrate_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StreamForexIndexServiceResponseDetail::~StreamForexIndexServiceResponseDetail() {
  // @@protoc_insertion_point(destructor:kaikosdk.StreamForexIndexServiceResponseDetail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamForexIndexServiceResponseDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.underlying_;
  if (this != internal_default_instance()) delete _impl_.fxrate_;
}

void StreamForexIndexServiceResponseDetail::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamForexIndexServiceResponseDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:kaikosdk.StreamForexIndexServiceResponseDetail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.underlying_ != nullptr) {
    delete _impl_.underlying_;
  }
  _impl_.underlying_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fxrate_ != nullptr) {
    delete _impl_.fxrate_;
  }
  _impl_.fxrate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamForexIndexServiceResponseDetail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kaikosdk.StreamForexIndexDetail underlying = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_underlying(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kaikosdk.StreamForexIndexDetail fxrate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fxrate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamForexIndexServiceResponseDetail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaikosdk.StreamForexIndexServiceResponseDetail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kaikosdk.StreamForexIndexDetail underlying = 1;
  if (this->_internal_has_underlying()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::underlying(this),
        _Internal::underlying(this).GetCachedSize(), target, stream);
  }

  // .kaikosdk.StreamForexIndexDetail fxrate = 2;
  if (this->_internal_has_fxrate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::fxrate(this),
        _Internal::fxrate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaikosdk.StreamForexIndexServiceResponseDetail)
  return target;
}

size_t StreamForexIndexServiceResponseDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaikosdk.StreamForexIndexServiceResponseDetail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kaikosdk.StreamForexIndexDetail underlying = 1;
  if (this->_internal_has_underlying()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.underlying_);
  }

  // .kaikosdk.StreamForexIndexDetail fxrate = 2;
  if (this->_internal_has_fxrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fxrate_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamForexIndexServiceResponseDetail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamForexIndexServiceResponseDetail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamForexIndexServiceResponseDetail::GetClassData() const { return &_class_data_; }


void StreamForexIndexServiceResponseDetail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamForexIndexServiceResponseDetail*>(&to_msg);
  auto& from = static_cast<const StreamForexIndexServiceResponseDetail&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaikosdk.StreamForexIndexServiceResponseDetail)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_underlying()) {
    _this->_internal_mutable_underlying()->::kaikosdk::StreamForexIndexDetail::MergeFrom(
        from._internal_underlying());
  }
  if (from._internal_has_fxrate()) {
    _this->_internal_mutable_fxrate()->::kaikosdk::StreamForexIndexDetail::MergeFrom(
        from._internal_fxrate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamForexIndexServiceResponseDetail::CopyFrom(const StreamForexIndexServiceResponseDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaikosdk.StreamForexIndexServiceResponseDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamForexIndexServiceResponseDetail::IsInitialized() const {
  return true;
}

void StreamForexIndexServiceResponseDetail::InternalSwap(StreamForexIndexServiceResponseDetail* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamForexIndexServiceResponseDetail, _impl_.fxrate_)
      + sizeof(StreamForexIndexServiceResponseDetail::_impl_.fxrate_)
      - PROTOBUF_FIELD_OFFSET(StreamForexIndexServiceResponseDetail, _impl_.underlying_)>(
          reinterpret_cast<char*>(&_impl_.underlying_),
          reinterpret_cast<char*>(&other->_impl_.underlying_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamForexIndexServiceResponseDetail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto_getter, &descriptor_table_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto_once,
      file_level_metadata_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto[2]);
}

// ===================================================================

class StreamForexIndexServiceResponsePublic::_Internal {
 public:
  static const ::kaikosdk::StreamForexIndexPublic& underlying(const StreamForexIndexServiceResponsePublic* msg);
  static const ::kaikosdk::StreamForexIndexPublic& fxrate(const StreamForexIndexServiceResponsePublic* msg);
};

const ::kaikosdk::StreamForexIndexPublic&
StreamForexIndexServiceResponsePublic::_Internal::underlying(const StreamForexIndexServiceResponsePublic* msg) {
  return *msg->_impl_.underlying_;
}
const ::kaikosdk::StreamForexIndexPublic&
StreamForexIndexServiceResponsePublic::_Internal::fxrate(const StreamForexIndexServiceResponsePublic* msg) {
  return *msg->_impl_.fxrate_;
}
StreamForexIndexServiceResponsePublic::StreamForexIndexServiceResponsePublic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaikosdk.StreamForexIndexServiceResponsePublic)
}
StreamForexIndexServiceResponsePublic::StreamForexIndexServiceResponsePublic(const StreamForexIndexServiceResponsePublic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamForexIndexServiceResponsePublic* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.underlying_){nullptr}
    , decltype(_impl_.fxrate_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_underlying()) {
    _this->_impl_.underlying_ = new ::kaikosdk::StreamForexIndexPublic(*from._impl_.underlying_);
  }
  if (from._internal_has_fxrate()) {
    _this->_impl_.fxrate_ = new ::kaikosdk::StreamForexIndexPublic(*from._impl_.fxrate_);
  }
  // @@protoc_insertion_point(copy_constructor:kaikosdk.StreamForexIndexServiceResponsePublic)
}

inline void StreamForexIndexServiceResponsePublic::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.underlying_){nullptr}
    , decltype(_impl_.fxrate_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StreamForexIndexServiceResponsePublic::~StreamForexIndexServiceResponsePublic() {
  // @@protoc_insertion_point(destructor:kaikosdk.StreamForexIndexServiceResponsePublic)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamForexIndexServiceResponsePublic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.underlying_;
  if (this != internal_default_instance()) delete _impl_.fxrate_;
}

void StreamForexIndexServiceResponsePublic::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamForexIndexServiceResponsePublic::Clear() {
// @@protoc_insertion_point(message_clear_start:kaikosdk.StreamForexIndexServiceResponsePublic)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.underlying_ != nullptr) {
    delete _impl_.underlying_;
  }
  _impl_.underlying_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fxrate_ != nullptr) {
    delete _impl_.fxrate_;
  }
  _impl_.fxrate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamForexIndexServiceResponsePublic::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kaikosdk.StreamForexIndexPublic underlying = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_underlying(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kaikosdk.StreamForexIndexPublic fxrate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fxrate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamForexIndexServiceResponsePublic::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaikosdk.StreamForexIndexServiceResponsePublic)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kaikosdk.StreamForexIndexPublic underlying = 1;
  if (this->_internal_has_underlying()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::underlying(this),
        _Internal::underlying(this).GetCachedSize(), target, stream);
  }

  // .kaikosdk.StreamForexIndexPublic fxrate = 2;
  if (this->_internal_has_fxrate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::fxrate(this),
        _Internal::fxrate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaikosdk.StreamForexIndexServiceResponsePublic)
  return target;
}

size_t StreamForexIndexServiceResponsePublic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaikosdk.StreamForexIndexServiceResponsePublic)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kaikosdk.StreamForexIndexPublic underlying = 1;
  if (this->_internal_has_underlying()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.underlying_);
  }

  // .kaikosdk.StreamForexIndexPublic fxrate = 2;
  if (this->_internal_has_fxrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fxrate_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamForexIndexServiceResponsePublic::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamForexIndexServiceResponsePublic::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamForexIndexServiceResponsePublic::GetClassData() const { return &_class_data_; }


void StreamForexIndexServiceResponsePublic::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamForexIndexServiceResponsePublic*>(&to_msg);
  auto& from = static_cast<const StreamForexIndexServiceResponsePublic&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaikosdk.StreamForexIndexServiceResponsePublic)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_underlying()) {
    _this->_internal_mutable_underlying()->::kaikosdk::StreamForexIndexPublic::MergeFrom(
        from._internal_underlying());
  }
  if (from._internal_has_fxrate()) {
    _this->_internal_mutable_fxrate()->::kaikosdk::StreamForexIndexPublic::MergeFrom(
        from._internal_fxrate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamForexIndexServiceResponsePublic::CopyFrom(const StreamForexIndexServiceResponsePublic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaikosdk.StreamForexIndexServiceResponsePublic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamForexIndexServiceResponsePublic::IsInitialized() const {
  return true;
}

void StreamForexIndexServiceResponsePublic::InternalSwap(StreamForexIndexServiceResponsePublic* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamForexIndexServiceResponsePublic, _impl_.fxrate_)
      + sizeof(StreamForexIndexServiceResponsePublic::_impl_.fxrate_)
      - PROTOBUF_FIELD_OFFSET(StreamForexIndexServiceResponsePublic, _impl_.underlying_)>(
          reinterpret_cast<char*>(&_impl_.underlying_),
          reinterpret_cast<char*>(&other->_impl_.underlying_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamForexIndexServiceResponsePublic::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto_getter, &descriptor_table_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto_once,
      file_level_metadata_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto[3]);
}

// ===================================================================

class StreamIndexForexRateServiceResponseV1::_Internal {
 public:
  static const ::kaikosdk::DataInterval& interval(const StreamIndexForexRateServiceResponseV1* msg);
  static const ::kaikosdk::StreamForexIndexServiceResponsePublic& composition(const StreamIndexForexRateServiceResponseV1* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts_event(const StreamIndexForexRateServiceResponseV1* msg);
  static const ::kaikosdk::StreamForexIndexServiceResponseDetail& detail(const StreamIndexForexRateServiceResponseV1* msg);
};

const ::kaikosdk::DataInterval&
StreamIndexForexRateServiceResponseV1::_Internal::interval(const StreamIndexForexRateServiceResponseV1* msg) {
  return *msg->_impl_.interval_;
}
const ::kaikosdk::StreamForexIndexServiceResponsePublic&
StreamIndexForexRateServiceResponseV1::_Internal::composition(const StreamIndexForexRateServiceResponseV1* msg) {
  return *msg->_impl_.composition_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
StreamIndexForexRateServiceResponseV1::_Internal::ts_event(const StreamIndexForexRateServiceResponseV1* msg) {
  return *msg->_impl_.ts_event_;
}
const ::kaikosdk::StreamForexIndexServiceResponseDetail&
StreamIndexForexRateServiceResponseV1::_Internal::detail(const StreamIndexForexRateServiceResponseV1* msg) {
  return *msg->_impl_.detail_;
}
void StreamIndexForexRateServiceResponseV1::clear_interval() {
  if (GetArenaForAllocation() == nullptr && _impl_.interval_ != nullptr) {
    delete _impl_.interval_;
  }
  _impl_.interval_ = nullptr;
}
void StreamIndexForexRateServiceResponseV1::clear_ts_event() {
  if (GetArenaForAllocation() == nullptr && _impl_.ts_event_ != nullptr) {
    delete _impl_.ts_event_;
  }
  _impl_.ts_event_ = nullptr;
}
StreamIndexForexRateServiceResponseV1::StreamIndexForexRateServiceResponseV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaikosdk.StreamIndexForexRateServiceResponseV1)
}
StreamIndexForexRateServiceResponseV1::StreamIndexForexRateServiceResponseV1(const StreamIndexForexRateServiceResponseV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamIndexForexRateServiceResponseV1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_code_){}
    , decltype(_impl_.interval_){nullptr}
    , decltype(_impl_.composition_){nullptr}
    , decltype(_impl_.ts_event_){nullptr}
    , decltype(_impl_.detail_){nullptr}
    , decltype(_impl_.price_){}
    , decltype(_impl_.commodity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.index_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_code().empty()) {
    _this->_impl_.index_code_.Set(from._internal_index_code(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_interval()) {
    _this->_impl_.interval_ = new ::kaikosdk::DataInterval(*from._impl_.interval_);
  }
  if (from._internal_has_composition()) {
    _this->_impl_.composition_ = new ::kaikosdk::StreamForexIndexServiceResponsePublic(*from._impl_.composition_);
  }
  if (from._internal_has_ts_event()) {
    _this->_impl_.ts_event_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.ts_event_);
  }
  if (from._internal_has_detail()) {
    _this->_impl_.detail_ = new ::kaikosdk::StreamForexIndexServiceResponseDetail(*from._impl_.detail_);
  }
  ::memcpy(&_impl_.price_, &from._impl_.price_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.commodity_) -
    reinterpret_cast<char*>(&_impl_.price_)) + sizeof(_impl_.commodity_));
  // @@protoc_insertion_point(copy_constructor:kaikosdk.StreamIndexForexRateServiceResponseV1)
}

inline void StreamIndexForexRateServiceResponseV1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_code_){}
    , decltype(_impl_.interval_){nullptr}
    , decltype(_impl_.composition_){nullptr}
    , decltype(_impl_.ts_event_){nullptr}
    , decltype(_impl_.detail_){nullptr}
    , decltype(_impl_.price_){0}
    , decltype(_impl_.commodity_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.index_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamIndexForexRateServiceResponseV1::~StreamIndexForexRateServiceResponseV1() {
  // @@protoc_insertion_point(destructor:kaikosdk.StreamIndexForexRateServiceResponseV1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamIndexForexRateServiceResponseV1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.index_code_.Destroy();
  if (this != internal_default_instance()) delete _impl_.interval_;
  if (this != internal_default_instance()) delete _impl_.composition_;
  if (this != internal_default_instance()) delete _impl_.ts_event_;
  if (this != internal_default_instance()) delete _impl_.detail_;
}

void StreamIndexForexRateServiceResponseV1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamIndexForexRateServiceResponseV1::Clear() {
// @@protoc_insertion_point(message_clear_start:kaikosdk.StreamIndexForexRateServiceResponseV1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_code_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.interval_ != nullptr) {
    delete _impl_.interval_;
  }
  _impl_.interval_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.composition_ != nullptr) {
    delete _impl_.composition_;
  }
  _impl_.composition_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ts_event_ != nullptr) {
    delete _impl_.ts_event_;
  }
  _impl_.ts_event_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.detail_ != nullptr) {
    delete _impl_.detail_;
  }
  _impl_.detail_ = nullptr;
  ::memset(&_impl_.price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.commodity_) -
      reinterpret_cast<char*>(&_impl_.price_)) + sizeof(_impl_.commodity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamIndexForexRateServiceResponseV1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string index_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_index_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamIndexForexRateServiceResponseV1.index_code"));
        } else
          goto handle_unusual;
        continue;
      // .kaikosdk.StreamIndexCommodity commodity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_commodity(static_cast<::kaikosdk::StreamIndexCommodity>(val));
        } else
          goto handle_unusual;
        continue;
      // .kaikosdk.DataInterval interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kaikosdk.StreamForexIndexServiceResponsePublic composition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_composition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp ts_event = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ts_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .kaikosdk.StreamForexIndexServiceResponseDetail detail = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_detail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamIndexForexRateServiceResponseV1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaikosdk.StreamIndexForexRateServiceResponseV1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string index_code = 1;
  if (!this->_internal_index_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_code().data(), static_cast<int>(this->_internal_index_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamIndexForexRateServiceResponseV1.index_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_index_code(), target);
  }

  // .kaikosdk.StreamIndexCommodity commodity = 2;
  if (this->_internal_commodity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_commodity(), target);
  }

  // .kaikosdk.DataInterval interval = 3;
  if (this->_internal_has_interval()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::interval(this),
        _Internal::interval(this).GetCachedSize(), target, stream);
  }

  // .kaikosdk.StreamForexIndexServiceResponsePublic composition = 4;
  if (this->_internal_has_composition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::composition(this),
        _Internal::composition(this).GetCachedSize(), target, stream);
  }

  // double price = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = this->_internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_price(), target);
  }

  // .google.protobuf.Timestamp ts_event = 6;
  if (this->_internal_has_ts_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::ts_event(this),
        _Internal::ts_event(this).GetCachedSize(), target, stream);
  }

  // .kaikosdk.StreamForexIndexServiceResponseDetail detail = 7;
  if (this->_internal_has_detail()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::detail(this),
        _Internal::detail(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaikosdk.StreamIndexForexRateServiceResponseV1)
  return target;
}

size_t StreamIndexForexRateServiceResponseV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaikosdk.StreamIndexForexRateServiceResponseV1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string index_code = 1;
  if (!this->_internal_index_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_code());
  }

  // .kaikosdk.DataInterval interval = 3;
  if (this->_internal_has_interval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.interval_);
  }

  // .kaikosdk.StreamForexIndexServiceResponsePublic composition = 4;
  if (this->_internal_has_composition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.composition_);
  }

  // .google.protobuf.Timestamp ts_event = 6;
  if (this->_internal_has_ts_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ts_event_);
  }

  // .kaikosdk.StreamForexIndexServiceResponseDetail detail = 7;
  if (this->_internal_has_detail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.detail_);
  }

  // double price = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = this->_internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    total_size += 1 + 8;
  }

  // .kaikosdk.StreamIndexCommodity commodity = 2;
  if (this->_internal_commodity() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_commodity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamIndexForexRateServiceResponseV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamIndexForexRateServiceResponseV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamIndexForexRateServiceResponseV1::GetClassData() const { return &_class_data_; }


void StreamIndexForexRateServiceResponseV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamIndexForexRateServiceResponseV1*>(&to_msg);
  auto& from = static_cast<const StreamIndexForexRateServiceResponseV1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaikosdk.StreamIndexForexRateServiceResponseV1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_index_code().empty()) {
    _this->_internal_set_index_code(from._internal_index_code());
  }
  if (from._internal_has_interval()) {
    _this->_internal_mutable_interval()->::kaikosdk::DataInterval::MergeFrom(
        from._internal_interval());
  }
  if (from._internal_has_composition()) {
    _this->_internal_mutable_composition()->::kaikosdk::StreamForexIndexServiceResponsePublic::MergeFrom(
        from._internal_composition());
  }
  if (from._internal_has_ts_event()) {
    _this->_internal_mutable_ts_event()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_ts_event());
  }
  if (from._internal_has_detail()) {
    _this->_internal_mutable_detail()->::kaikosdk::StreamForexIndexServiceResponseDetail::MergeFrom(
        from._internal_detail());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_price = from._internal_price();
  uint64_t raw_price;
  memcpy(&raw_price, &tmp_price, sizeof(tmp_price));
  if (raw_price != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  if (from._internal_commodity() != 0) {
    _this->_internal_set_commodity(from._internal_commodity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamIndexForexRateServiceResponseV1::CopyFrom(const StreamIndexForexRateServiceResponseV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaikosdk.StreamIndexForexRateServiceResponseV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamIndexForexRateServiceResponseV1::IsInitialized() const {
  return true;
}

void StreamIndexForexRateServiceResponseV1::InternalSwap(StreamIndexForexRateServiceResponseV1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.index_code_, lhs_arena,
      &other->_impl_.index_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamIndexForexRateServiceResponseV1, _impl_.commodity_)
      + sizeof(StreamIndexForexRateServiceResponseV1::_impl_.commodity_)
      - PROTOBUF_FIELD_OFFSET(StreamIndexForexRateServiceResponseV1, _impl_.interval_)>(
          reinterpret_cast<char*>(&_impl_.interval_),
          reinterpret_cast<char*>(&other->_impl_.interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamIndexForexRateServiceResponseV1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto_getter, &descriptor_table_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto_once,
      file_level_metadata_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace kaikosdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kaikosdk::StreamForexIndexPublic*
Arena::CreateMaybeMessage< ::kaikosdk::StreamForexIndexPublic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaikosdk::StreamForexIndexPublic >(arena);
}
template<> PROTOBUF_NOINLINE ::kaikosdk::StreamForexIndexDetail*
Arena::CreateMaybeMessage< ::kaikosdk::StreamForexIndexDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaikosdk::StreamForexIndexDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::kaikosdk::StreamForexIndexServiceResponseDetail*
Arena::CreateMaybeMessage< ::kaikosdk::StreamForexIndexServiceResponseDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaikosdk::StreamForexIndexServiceResponseDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::kaikosdk::StreamForexIndexServiceResponsePublic*
Arena::CreateMaybeMessage< ::kaikosdk::StreamForexIndexServiceResponsePublic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaikosdk::StreamForexIndexServiceResponsePublic >(arena);
}
template<> PROTOBUF_NOINLINE ::kaikosdk::StreamIndexForexRateServiceResponseV1*
Arena::CreateMaybeMessage< ::kaikosdk::StreamIndexForexRateServiceResponseV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaikosdk::StreamIndexForexRateServiceResponseV1 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
