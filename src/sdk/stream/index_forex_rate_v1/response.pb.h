// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk/stream/index_forex_rate_v1/response.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "sdk/core/data_interval.pb.h"
#include "sdk/stream/index_v1/commodity.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto;
namespace kaikosdk {
class StreamForexIndexDetail;
struct StreamForexIndexDetailDefaultTypeInternal;
extern StreamForexIndexDetailDefaultTypeInternal _StreamForexIndexDetail_default_instance_;
class StreamForexIndexPublic;
struct StreamForexIndexPublicDefaultTypeInternal;
extern StreamForexIndexPublicDefaultTypeInternal _StreamForexIndexPublic_default_instance_;
class StreamForexIndexServiceResponseDetail;
struct StreamForexIndexServiceResponseDetailDefaultTypeInternal;
extern StreamForexIndexServiceResponseDetailDefaultTypeInternal _StreamForexIndexServiceResponseDetail_default_instance_;
class StreamForexIndexServiceResponsePublic;
struct StreamForexIndexServiceResponsePublicDefaultTypeInternal;
extern StreamForexIndexServiceResponsePublicDefaultTypeInternal _StreamForexIndexServiceResponsePublic_default_instance_;
class StreamIndexForexRateServiceResponseV1;
struct StreamIndexForexRateServiceResponseV1DefaultTypeInternal;
extern StreamIndexForexRateServiceResponseV1DefaultTypeInternal _StreamIndexForexRateServiceResponseV1_default_instance_;
}  // namespace kaikosdk
PROTOBUF_NAMESPACE_OPEN
template<> ::kaikosdk::StreamForexIndexDetail* Arena::CreateMaybeMessage<::kaikosdk::StreamForexIndexDetail>(Arena*);
template<> ::kaikosdk::StreamForexIndexPublic* Arena::CreateMaybeMessage<::kaikosdk::StreamForexIndexPublic>(Arena*);
template<> ::kaikosdk::StreamForexIndexServiceResponseDetail* Arena::CreateMaybeMessage<::kaikosdk::StreamForexIndexServiceResponseDetail>(Arena*);
template<> ::kaikosdk::StreamForexIndexServiceResponsePublic* Arena::CreateMaybeMessage<::kaikosdk::StreamForexIndexServiceResponsePublic>(Arena*);
template<> ::kaikosdk::StreamIndexForexRateServiceResponseV1* Arena::CreateMaybeMessage<::kaikosdk::StreamIndexForexRateServiceResponseV1>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kaikosdk {

// ===================================================================

class StreamForexIndexPublic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.StreamForexIndexPublic) */ {
 public:
  inline StreamForexIndexPublic() : StreamForexIndexPublic(nullptr) {}
  ~StreamForexIndexPublic() override;
  explicit PROTOBUF_CONSTEXPR StreamForexIndexPublic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamForexIndexPublic(const StreamForexIndexPublic& from);
  StreamForexIndexPublic(StreamForexIndexPublic&& from) noexcept
    : StreamForexIndexPublic() {
    *this = ::std::move(from);
  }

  inline StreamForexIndexPublic& operator=(const StreamForexIndexPublic& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamForexIndexPublic& operator=(StreamForexIndexPublic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamForexIndexPublic& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamForexIndexPublic* internal_default_instance() {
    return reinterpret_cast<const StreamForexIndexPublic*>(
               &_StreamForexIndexPublic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StreamForexIndexPublic& a, StreamForexIndexPublic& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamForexIndexPublic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamForexIndexPublic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamForexIndexPublic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamForexIndexPublic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamForexIndexPublic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamForexIndexPublic& from) {
    StreamForexIndexPublic::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamForexIndexPublic* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.StreamForexIndexPublic";
  }
  protected:
  explicit StreamForexIndexPublic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTsEventFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Timestamp ts_event = 2;
  bool has_ts_event() const;
  private:
  bool _internal_has_ts_event() const;
  public:
  void clear_ts_event();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts_event() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_ts_event();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_ts_event();
  void set_allocated_ts_event(::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_ts_event() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_ts_event();
  public:
  void unsafe_arena_set_allocated_ts_event(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_ts_event();

  // @@protoc_insertion_point(class_scope:kaikosdk.StreamForexIndexPublic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto;
};
// -------------------------------------------------------------------

class StreamForexIndexDetail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.StreamForexIndexDetail) */ {
 public:
  inline StreamForexIndexDetail() : StreamForexIndexDetail(nullptr) {}
  ~StreamForexIndexDetail() override;
  explicit PROTOBUF_CONSTEXPR StreamForexIndexDetail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamForexIndexDetail(const StreamForexIndexDetail& from);
  StreamForexIndexDetail(StreamForexIndexDetail&& from) noexcept
    : StreamForexIndexDetail() {
    *this = ::std::move(from);
  }

  inline StreamForexIndexDetail& operator=(const StreamForexIndexDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamForexIndexDetail& operator=(StreamForexIndexDetail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamForexIndexDetail& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamForexIndexDetail* internal_default_instance() {
    return reinterpret_cast<const StreamForexIndexDetail*>(
               &_StreamForexIndexDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StreamForexIndexDetail& a, StreamForexIndexDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamForexIndexDetail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamForexIndexDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamForexIndexDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamForexIndexDetail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamForexIndexDetail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamForexIndexDetail& from) {
    StreamForexIndexDetail::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamForexIndexDetail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.StreamForexIndexDetail";
  }
  protected:
  explicit StreamForexIndexDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTsEventFieldNumber = 3,
    kPriceFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Timestamp ts_event = 3;
  bool has_ts_event() const;
  private:
  bool _internal_has_ts_event() const;
  public:
  void clear_ts_event();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts_event() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_ts_event();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_ts_event();
  void set_allocated_ts_event(::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_ts_event() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_ts_event();
  public:
  void unsafe_arena_set_allocated_ts_event(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_ts_event();

  // double price = 2;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // @@protoc_insertion_point(class_scope:kaikosdk.StreamForexIndexDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event_;
    double price_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto;
};
// -------------------------------------------------------------------

class StreamForexIndexServiceResponseDetail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.StreamForexIndexServiceResponseDetail) */ {
 public:
  inline StreamForexIndexServiceResponseDetail() : StreamForexIndexServiceResponseDetail(nullptr) {}
  ~StreamForexIndexServiceResponseDetail() override;
  explicit PROTOBUF_CONSTEXPR StreamForexIndexServiceResponseDetail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamForexIndexServiceResponseDetail(const StreamForexIndexServiceResponseDetail& from);
  StreamForexIndexServiceResponseDetail(StreamForexIndexServiceResponseDetail&& from) noexcept
    : StreamForexIndexServiceResponseDetail() {
    *this = ::std::move(from);
  }

  inline StreamForexIndexServiceResponseDetail& operator=(const StreamForexIndexServiceResponseDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamForexIndexServiceResponseDetail& operator=(StreamForexIndexServiceResponseDetail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamForexIndexServiceResponseDetail& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamForexIndexServiceResponseDetail* internal_default_instance() {
    return reinterpret_cast<const StreamForexIndexServiceResponseDetail*>(
               &_StreamForexIndexServiceResponseDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StreamForexIndexServiceResponseDetail& a, StreamForexIndexServiceResponseDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamForexIndexServiceResponseDetail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamForexIndexServiceResponseDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamForexIndexServiceResponseDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamForexIndexServiceResponseDetail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamForexIndexServiceResponseDetail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamForexIndexServiceResponseDetail& from) {
    StreamForexIndexServiceResponseDetail::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamForexIndexServiceResponseDetail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.StreamForexIndexServiceResponseDetail";
  }
  protected:
  explicit StreamForexIndexServiceResponseDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnderlyingFieldNumber = 1,
    kFxrateFieldNumber = 2,
  };
  // .kaikosdk.StreamForexIndexDetail underlying = 1;
  bool has_underlying() const;
  private:
  bool _internal_has_underlying() const;
  public:
  void clear_underlying();
  const ::kaikosdk::StreamForexIndexDetail& underlying() const;
  PROTOBUF_NODISCARD ::kaikosdk::StreamForexIndexDetail* release_underlying();
  ::kaikosdk::StreamForexIndexDetail* mutable_underlying();
  void set_allocated_underlying(::kaikosdk::StreamForexIndexDetail* underlying);
  private:
  const ::kaikosdk::StreamForexIndexDetail& _internal_underlying() const;
  ::kaikosdk::StreamForexIndexDetail* _internal_mutable_underlying();
  public:
  void unsafe_arena_set_allocated_underlying(
      ::kaikosdk::StreamForexIndexDetail* underlying);
  ::kaikosdk::StreamForexIndexDetail* unsafe_arena_release_underlying();

  // .kaikosdk.StreamForexIndexDetail fxrate = 2;
  bool has_fxrate() const;
  private:
  bool _internal_has_fxrate() const;
  public:
  void clear_fxrate();
  const ::kaikosdk::StreamForexIndexDetail& fxrate() const;
  PROTOBUF_NODISCARD ::kaikosdk::StreamForexIndexDetail* release_fxrate();
  ::kaikosdk::StreamForexIndexDetail* mutable_fxrate();
  void set_allocated_fxrate(::kaikosdk::StreamForexIndexDetail* fxrate);
  private:
  const ::kaikosdk::StreamForexIndexDetail& _internal_fxrate() const;
  ::kaikosdk::StreamForexIndexDetail* _internal_mutable_fxrate();
  public:
  void unsafe_arena_set_allocated_fxrate(
      ::kaikosdk::StreamForexIndexDetail* fxrate);
  ::kaikosdk::StreamForexIndexDetail* unsafe_arena_release_fxrate();

  // @@protoc_insertion_point(class_scope:kaikosdk.StreamForexIndexServiceResponseDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::kaikosdk::StreamForexIndexDetail* underlying_;
    ::kaikosdk::StreamForexIndexDetail* fxrate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto;
};
// -------------------------------------------------------------------

class StreamForexIndexServiceResponsePublic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.StreamForexIndexServiceResponsePublic) */ {
 public:
  inline StreamForexIndexServiceResponsePublic() : StreamForexIndexServiceResponsePublic(nullptr) {}
  ~StreamForexIndexServiceResponsePublic() override;
  explicit PROTOBUF_CONSTEXPR StreamForexIndexServiceResponsePublic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamForexIndexServiceResponsePublic(const StreamForexIndexServiceResponsePublic& from);
  StreamForexIndexServiceResponsePublic(StreamForexIndexServiceResponsePublic&& from) noexcept
    : StreamForexIndexServiceResponsePublic() {
    *this = ::std::move(from);
  }

  inline StreamForexIndexServiceResponsePublic& operator=(const StreamForexIndexServiceResponsePublic& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamForexIndexServiceResponsePublic& operator=(StreamForexIndexServiceResponsePublic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamForexIndexServiceResponsePublic& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamForexIndexServiceResponsePublic* internal_default_instance() {
    return reinterpret_cast<const StreamForexIndexServiceResponsePublic*>(
               &_StreamForexIndexServiceResponsePublic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StreamForexIndexServiceResponsePublic& a, StreamForexIndexServiceResponsePublic& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamForexIndexServiceResponsePublic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamForexIndexServiceResponsePublic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamForexIndexServiceResponsePublic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamForexIndexServiceResponsePublic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamForexIndexServiceResponsePublic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamForexIndexServiceResponsePublic& from) {
    StreamForexIndexServiceResponsePublic::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamForexIndexServiceResponsePublic* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.StreamForexIndexServiceResponsePublic";
  }
  protected:
  explicit StreamForexIndexServiceResponsePublic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnderlyingFieldNumber = 1,
    kFxrateFieldNumber = 2,
  };
  // .kaikosdk.StreamForexIndexPublic underlying = 1;
  bool has_underlying() const;
  private:
  bool _internal_has_underlying() const;
  public:
  void clear_underlying();
  const ::kaikosdk::StreamForexIndexPublic& underlying() const;
  PROTOBUF_NODISCARD ::kaikosdk::StreamForexIndexPublic* release_underlying();
  ::kaikosdk::StreamForexIndexPublic* mutable_underlying();
  void set_allocated_underlying(::kaikosdk::StreamForexIndexPublic* underlying);
  private:
  const ::kaikosdk::StreamForexIndexPublic& _internal_underlying() const;
  ::kaikosdk::StreamForexIndexPublic* _internal_mutable_underlying();
  public:
  void unsafe_arena_set_allocated_underlying(
      ::kaikosdk::StreamForexIndexPublic* underlying);
  ::kaikosdk::StreamForexIndexPublic* unsafe_arena_release_underlying();

  // .kaikosdk.StreamForexIndexPublic fxrate = 2;
  bool has_fxrate() const;
  private:
  bool _internal_has_fxrate() const;
  public:
  void clear_fxrate();
  const ::kaikosdk::StreamForexIndexPublic& fxrate() const;
  PROTOBUF_NODISCARD ::kaikosdk::StreamForexIndexPublic* release_fxrate();
  ::kaikosdk::StreamForexIndexPublic* mutable_fxrate();
  void set_allocated_fxrate(::kaikosdk::StreamForexIndexPublic* fxrate);
  private:
  const ::kaikosdk::StreamForexIndexPublic& _internal_fxrate() const;
  ::kaikosdk::StreamForexIndexPublic* _internal_mutable_fxrate();
  public:
  void unsafe_arena_set_allocated_fxrate(
      ::kaikosdk::StreamForexIndexPublic* fxrate);
  ::kaikosdk::StreamForexIndexPublic* unsafe_arena_release_fxrate();

  // @@protoc_insertion_point(class_scope:kaikosdk.StreamForexIndexServiceResponsePublic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::kaikosdk::StreamForexIndexPublic* underlying_;
    ::kaikosdk::StreamForexIndexPublic* fxrate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto;
};
// -------------------------------------------------------------------

class StreamIndexForexRateServiceResponseV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.StreamIndexForexRateServiceResponseV1) */ {
 public:
  inline StreamIndexForexRateServiceResponseV1() : StreamIndexForexRateServiceResponseV1(nullptr) {}
  ~StreamIndexForexRateServiceResponseV1() override;
  explicit PROTOBUF_CONSTEXPR StreamIndexForexRateServiceResponseV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamIndexForexRateServiceResponseV1(const StreamIndexForexRateServiceResponseV1& from);
  StreamIndexForexRateServiceResponseV1(StreamIndexForexRateServiceResponseV1&& from) noexcept
    : StreamIndexForexRateServiceResponseV1() {
    *this = ::std::move(from);
  }

  inline StreamIndexForexRateServiceResponseV1& operator=(const StreamIndexForexRateServiceResponseV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamIndexForexRateServiceResponseV1& operator=(StreamIndexForexRateServiceResponseV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamIndexForexRateServiceResponseV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamIndexForexRateServiceResponseV1* internal_default_instance() {
    return reinterpret_cast<const StreamIndexForexRateServiceResponseV1*>(
               &_StreamIndexForexRateServiceResponseV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StreamIndexForexRateServiceResponseV1& a, StreamIndexForexRateServiceResponseV1& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamIndexForexRateServiceResponseV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamIndexForexRateServiceResponseV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamIndexForexRateServiceResponseV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamIndexForexRateServiceResponseV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamIndexForexRateServiceResponseV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamIndexForexRateServiceResponseV1& from) {
    StreamIndexForexRateServiceResponseV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamIndexForexRateServiceResponseV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.StreamIndexForexRateServiceResponseV1";
  }
  protected:
  explicit StreamIndexForexRateServiceResponseV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexCodeFieldNumber = 1,
    kIntervalFieldNumber = 3,
    kCompositionFieldNumber = 4,
    kTsEventFieldNumber = 6,
    kDetailFieldNumber = 7,
    kPriceFieldNumber = 5,
    kCommodityFieldNumber = 2,
  };
  // string index_code = 1;
  void clear_index_code();
  const std::string& index_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_code();
  PROTOBUF_NODISCARD std::string* release_index_code();
  void set_allocated_index_code(std::string* index_code);
  private:
  const std::string& _internal_index_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_code(const std::string& value);
  std::string* _internal_mutable_index_code();
  public:

  // .kaikosdk.DataInterval interval = 3;
  bool has_interval() const;
  private:
  bool _internal_has_interval() const;
  public:
  void clear_interval();
  const ::kaikosdk::DataInterval& interval() const;
  PROTOBUF_NODISCARD ::kaikosdk::DataInterval* release_interval();
  ::kaikosdk::DataInterval* mutable_interval();
  void set_allocated_interval(::kaikosdk::DataInterval* interval);
  private:
  const ::kaikosdk::DataInterval& _internal_interval() const;
  ::kaikosdk::DataInterval* _internal_mutable_interval();
  public:
  void unsafe_arena_set_allocated_interval(
      ::kaikosdk::DataInterval* interval);
  ::kaikosdk::DataInterval* unsafe_arena_release_interval();

  // .kaikosdk.StreamForexIndexServiceResponsePublic composition = 4;
  bool has_composition() const;
  private:
  bool _internal_has_composition() const;
  public:
  void clear_composition();
  const ::kaikosdk::StreamForexIndexServiceResponsePublic& composition() const;
  PROTOBUF_NODISCARD ::kaikosdk::StreamForexIndexServiceResponsePublic* release_composition();
  ::kaikosdk::StreamForexIndexServiceResponsePublic* mutable_composition();
  void set_allocated_composition(::kaikosdk::StreamForexIndexServiceResponsePublic* composition);
  private:
  const ::kaikosdk::StreamForexIndexServiceResponsePublic& _internal_composition() const;
  ::kaikosdk::StreamForexIndexServiceResponsePublic* _internal_mutable_composition();
  public:
  void unsafe_arena_set_allocated_composition(
      ::kaikosdk::StreamForexIndexServiceResponsePublic* composition);
  ::kaikosdk::StreamForexIndexServiceResponsePublic* unsafe_arena_release_composition();

  // .google.protobuf.Timestamp ts_event = 6;
  bool has_ts_event() const;
  private:
  bool _internal_has_ts_event() const;
  public:
  void clear_ts_event();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts_event() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_ts_event();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_ts_event();
  void set_allocated_ts_event(::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_ts_event() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_ts_event();
  public:
  void unsafe_arena_set_allocated_ts_event(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_ts_event();

  // .kaikosdk.StreamForexIndexServiceResponseDetail detail = 7;
  bool has_detail() const;
  private:
  bool _internal_has_detail() const;
  public:
  void clear_detail();
  const ::kaikosdk::StreamForexIndexServiceResponseDetail& detail() const;
  PROTOBUF_NODISCARD ::kaikosdk::StreamForexIndexServiceResponseDetail* release_detail();
  ::kaikosdk::StreamForexIndexServiceResponseDetail* mutable_detail();
  void set_allocated_detail(::kaikosdk::StreamForexIndexServiceResponseDetail* detail);
  private:
  const ::kaikosdk::StreamForexIndexServiceResponseDetail& _internal_detail() const;
  ::kaikosdk::StreamForexIndexServiceResponseDetail* _internal_mutable_detail();
  public:
  void unsafe_arena_set_allocated_detail(
      ::kaikosdk::StreamForexIndexServiceResponseDetail* detail);
  ::kaikosdk::StreamForexIndexServiceResponseDetail* unsafe_arena_release_detail();

  // double price = 5;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // .kaikosdk.StreamIndexCommodity commodity = 2;
  void clear_commodity();
  ::kaikosdk::StreamIndexCommodity commodity() const;
  void set_commodity(::kaikosdk::StreamIndexCommodity value);
  private:
  ::kaikosdk::StreamIndexCommodity _internal_commodity() const;
  void _internal_set_commodity(::kaikosdk::StreamIndexCommodity value);
  public:

  // @@protoc_insertion_point(class_scope:kaikosdk.StreamIndexForexRateServiceResponseV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_code_;
    ::kaikosdk::DataInterval* interval_;
    ::kaikosdk::StreamForexIndexServiceResponsePublic* composition_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event_;
    ::kaikosdk::StreamForexIndexServiceResponseDetail* detail_;
    double price_;
    int commodity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StreamForexIndexPublic

// string name = 1;
inline void StreamForexIndexPublic::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& StreamForexIndexPublic::name() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamForexIndexPublic.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamForexIndexPublic::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamForexIndexPublic.name)
}
inline std::string* StreamForexIndexPublic::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamForexIndexPublic.name)
  return _s;
}
inline const std::string& StreamForexIndexPublic::_internal_name() const {
  return _impl_.name_.Get();
}
inline void StreamForexIndexPublic::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamForexIndexPublic::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamForexIndexPublic::release_name() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamForexIndexPublic.name)
  return _impl_.name_.Release();
}
inline void StreamForexIndexPublic::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamForexIndexPublic.name)
}

// .google.protobuf.Timestamp ts_event = 2;
inline bool StreamForexIndexPublic::_internal_has_ts_event() const {
  return this != internal_default_instance() && _impl_.ts_event_ != nullptr;
}
inline bool StreamForexIndexPublic::has_ts_event() const {
  return _internal_has_ts_event();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamForexIndexPublic::_internal_ts_event() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.ts_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamForexIndexPublic::ts_event() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamForexIndexPublic.ts_event)
  return _internal_ts_event();
}
inline void StreamForexIndexPublic::unsafe_arena_set_allocated_ts_event(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_event_);
  }
  _impl_.ts_event_ = ts_event;
  if (ts_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamForexIndexPublic.ts_event)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamForexIndexPublic::release_ts_event() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_event_;
  _impl_.ts_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamForexIndexPublic::unsafe_arena_release_ts_event() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamForexIndexPublic.ts_event)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_event_;
  _impl_.ts_event_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamForexIndexPublic::_internal_mutable_ts_event() {
  
  if (_impl_.ts_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.ts_event_ = p;
  }
  return _impl_.ts_event_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamForexIndexPublic::mutable_ts_event() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_ts_event();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamForexIndexPublic.ts_event)
  return _msg;
}
inline void StreamForexIndexPublic::set_allocated_ts_event(::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_event_);
  }
  if (ts_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_event));
    if (message_arena != submessage_arena) {
      ts_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts_event, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ts_event_ = ts_event;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamForexIndexPublic.ts_event)
}

// -------------------------------------------------------------------

// StreamForexIndexDetail

// string name = 1;
inline void StreamForexIndexDetail::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& StreamForexIndexDetail::name() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamForexIndexDetail.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamForexIndexDetail::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamForexIndexDetail.name)
}
inline std::string* StreamForexIndexDetail::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamForexIndexDetail.name)
  return _s;
}
inline const std::string& StreamForexIndexDetail::_internal_name() const {
  return _impl_.name_.Get();
}
inline void StreamForexIndexDetail::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamForexIndexDetail::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamForexIndexDetail::release_name() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamForexIndexDetail.name)
  return _impl_.name_.Release();
}
inline void StreamForexIndexDetail::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamForexIndexDetail.name)
}

// double price = 2;
inline void StreamForexIndexDetail::clear_price() {
  _impl_.price_ = 0;
}
inline double StreamForexIndexDetail::_internal_price() const {
  return _impl_.price_;
}
inline double StreamForexIndexDetail::price() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamForexIndexDetail.price)
  return _internal_price();
}
inline void StreamForexIndexDetail::_internal_set_price(double value) {
  
  _impl_.price_ = value;
}
inline void StreamForexIndexDetail::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamForexIndexDetail.price)
}

// .google.protobuf.Timestamp ts_event = 3;
inline bool StreamForexIndexDetail::_internal_has_ts_event() const {
  return this != internal_default_instance() && _impl_.ts_event_ != nullptr;
}
inline bool StreamForexIndexDetail::has_ts_event() const {
  return _internal_has_ts_event();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamForexIndexDetail::_internal_ts_event() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.ts_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamForexIndexDetail::ts_event() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamForexIndexDetail.ts_event)
  return _internal_ts_event();
}
inline void StreamForexIndexDetail::unsafe_arena_set_allocated_ts_event(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_event_);
  }
  _impl_.ts_event_ = ts_event;
  if (ts_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamForexIndexDetail.ts_event)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamForexIndexDetail::release_ts_event() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_event_;
  _impl_.ts_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamForexIndexDetail::unsafe_arena_release_ts_event() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamForexIndexDetail.ts_event)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_event_;
  _impl_.ts_event_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamForexIndexDetail::_internal_mutable_ts_event() {
  
  if (_impl_.ts_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.ts_event_ = p;
  }
  return _impl_.ts_event_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamForexIndexDetail::mutable_ts_event() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_ts_event();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamForexIndexDetail.ts_event)
  return _msg;
}
inline void StreamForexIndexDetail::set_allocated_ts_event(::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_event_);
  }
  if (ts_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_event));
    if (message_arena != submessage_arena) {
      ts_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts_event, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ts_event_ = ts_event;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamForexIndexDetail.ts_event)
}

// -------------------------------------------------------------------

// StreamForexIndexServiceResponseDetail

// .kaikosdk.StreamForexIndexDetail underlying = 1;
inline bool StreamForexIndexServiceResponseDetail::_internal_has_underlying() const {
  return this != internal_default_instance() && _impl_.underlying_ != nullptr;
}
inline bool StreamForexIndexServiceResponseDetail::has_underlying() const {
  return _internal_has_underlying();
}
inline void StreamForexIndexServiceResponseDetail::clear_underlying() {
  if (GetArenaForAllocation() == nullptr && _impl_.underlying_ != nullptr) {
    delete _impl_.underlying_;
  }
  _impl_.underlying_ = nullptr;
}
inline const ::kaikosdk::StreamForexIndexDetail& StreamForexIndexServiceResponseDetail::_internal_underlying() const {
  const ::kaikosdk::StreamForexIndexDetail* p = _impl_.underlying_;
  return p != nullptr ? *p : reinterpret_cast<const ::kaikosdk::StreamForexIndexDetail&>(
      ::kaikosdk::_StreamForexIndexDetail_default_instance_);
}
inline const ::kaikosdk::StreamForexIndexDetail& StreamForexIndexServiceResponseDetail::underlying() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamForexIndexServiceResponseDetail.underlying)
  return _internal_underlying();
}
inline void StreamForexIndexServiceResponseDetail::unsafe_arena_set_allocated_underlying(
    ::kaikosdk::StreamForexIndexDetail* underlying) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.underlying_);
  }
  _impl_.underlying_ = underlying;
  if (underlying) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamForexIndexServiceResponseDetail.underlying)
}
inline ::kaikosdk::StreamForexIndexDetail* StreamForexIndexServiceResponseDetail::release_underlying() {
  
  ::kaikosdk::StreamForexIndexDetail* temp = _impl_.underlying_;
  _impl_.underlying_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kaikosdk::StreamForexIndexDetail* StreamForexIndexServiceResponseDetail::unsafe_arena_release_underlying() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamForexIndexServiceResponseDetail.underlying)
  
  ::kaikosdk::StreamForexIndexDetail* temp = _impl_.underlying_;
  _impl_.underlying_ = nullptr;
  return temp;
}
inline ::kaikosdk::StreamForexIndexDetail* StreamForexIndexServiceResponseDetail::_internal_mutable_underlying() {
  
  if (_impl_.underlying_ == nullptr) {
    auto* p = CreateMaybeMessage<::kaikosdk::StreamForexIndexDetail>(GetArenaForAllocation());
    _impl_.underlying_ = p;
  }
  return _impl_.underlying_;
}
inline ::kaikosdk::StreamForexIndexDetail* StreamForexIndexServiceResponseDetail::mutable_underlying() {
  ::kaikosdk::StreamForexIndexDetail* _msg = _internal_mutable_underlying();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamForexIndexServiceResponseDetail.underlying)
  return _msg;
}
inline void StreamForexIndexServiceResponseDetail::set_allocated_underlying(::kaikosdk::StreamForexIndexDetail* underlying) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.underlying_;
  }
  if (underlying) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(underlying);
    if (message_arena != submessage_arena) {
      underlying = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, underlying, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.underlying_ = underlying;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamForexIndexServiceResponseDetail.underlying)
}

// .kaikosdk.StreamForexIndexDetail fxrate = 2;
inline bool StreamForexIndexServiceResponseDetail::_internal_has_fxrate() const {
  return this != internal_default_instance() && _impl_.fxrate_ != nullptr;
}
inline bool StreamForexIndexServiceResponseDetail::has_fxrate() const {
  return _internal_has_fxrate();
}
inline void StreamForexIndexServiceResponseDetail::clear_fxrate() {
  if (GetArenaForAllocation() == nullptr && _impl_.fxrate_ != nullptr) {
    delete _impl_.fxrate_;
  }
  _impl_.fxrate_ = nullptr;
}
inline const ::kaikosdk::StreamForexIndexDetail& StreamForexIndexServiceResponseDetail::_internal_fxrate() const {
  const ::kaikosdk::StreamForexIndexDetail* p = _impl_.fxrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::kaikosdk::StreamForexIndexDetail&>(
      ::kaikosdk::_StreamForexIndexDetail_default_instance_);
}
inline const ::kaikosdk::StreamForexIndexDetail& StreamForexIndexServiceResponseDetail::fxrate() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamForexIndexServiceResponseDetail.fxrate)
  return _internal_fxrate();
}
inline void StreamForexIndexServiceResponseDetail::unsafe_arena_set_allocated_fxrate(
    ::kaikosdk::StreamForexIndexDetail* fxrate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fxrate_);
  }
  _impl_.fxrate_ = fxrate;
  if (fxrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamForexIndexServiceResponseDetail.fxrate)
}
inline ::kaikosdk::StreamForexIndexDetail* StreamForexIndexServiceResponseDetail::release_fxrate() {
  
  ::kaikosdk::StreamForexIndexDetail* temp = _impl_.fxrate_;
  _impl_.fxrate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kaikosdk::StreamForexIndexDetail* StreamForexIndexServiceResponseDetail::unsafe_arena_release_fxrate() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamForexIndexServiceResponseDetail.fxrate)
  
  ::kaikosdk::StreamForexIndexDetail* temp = _impl_.fxrate_;
  _impl_.fxrate_ = nullptr;
  return temp;
}
inline ::kaikosdk::StreamForexIndexDetail* StreamForexIndexServiceResponseDetail::_internal_mutable_fxrate() {
  
  if (_impl_.fxrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::kaikosdk::StreamForexIndexDetail>(GetArenaForAllocation());
    _impl_.fxrate_ = p;
  }
  return _impl_.fxrate_;
}
inline ::kaikosdk::StreamForexIndexDetail* StreamForexIndexServiceResponseDetail::mutable_fxrate() {
  ::kaikosdk::StreamForexIndexDetail* _msg = _internal_mutable_fxrate();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamForexIndexServiceResponseDetail.fxrate)
  return _msg;
}
inline void StreamForexIndexServiceResponseDetail::set_allocated_fxrate(::kaikosdk::StreamForexIndexDetail* fxrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.fxrate_;
  }
  if (fxrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fxrate);
    if (message_arena != submessage_arena) {
      fxrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fxrate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fxrate_ = fxrate;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamForexIndexServiceResponseDetail.fxrate)
}

// -------------------------------------------------------------------

// StreamForexIndexServiceResponsePublic

// .kaikosdk.StreamForexIndexPublic underlying = 1;
inline bool StreamForexIndexServiceResponsePublic::_internal_has_underlying() const {
  return this != internal_default_instance() && _impl_.underlying_ != nullptr;
}
inline bool StreamForexIndexServiceResponsePublic::has_underlying() const {
  return _internal_has_underlying();
}
inline void StreamForexIndexServiceResponsePublic::clear_underlying() {
  if (GetArenaForAllocation() == nullptr && _impl_.underlying_ != nullptr) {
    delete _impl_.underlying_;
  }
  _impl_.underlying_ = nullptr;
}
inline const ::kaikosdk::StreamForexIndexPublic& StreamForexIndexServiceResponsePublic::_internal_underlying() const {
  const ::kaikosdk::StreamForexIndexPublic* p = _impl_.underlying_;
  return p != nullptr ? *p : reinterpret_cast<const ::kaikosdk::StreamForexIndexPublic&>(
      ::kaikosdk::_StreamForexIndexPublic_default_instance_);
}
inline const ::kaikosdk::StreamForexIndexPublic& StreamForexIndexServiceResponsePublic::underlying() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamForexIndexServiceResponsePublic.underlying)
  return _internal_underlying();
}
inline void StreamForexIndexServiceResponsePublic::unsafe_arena_set_allocated_underlying(
    ::kaikosdk::StreamForexIndexPublic* underlying) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.underlying_);
  }
  _impl_.underlying_ = underlying;
  if (underlying) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamForexIndexServiceResponsePublic.underlying)
}
inline ::kaikosdk::StreamForexIndexPublic* StreamForexIndexServiceResponsePublic::release_underlying() {
  
  ::kaikosdk::StreamForexIndexPublic* temp = _impl_.underlying_;
  _impl_.underlying_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kaikosdk::StreamForexIndexPublic* StreamForexIndexServiceResponsePublic::unsafe_arena_release_underlying() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamForexIndexServiceResponsePublic.underlying)
  
  ::kaikosdk::StreamForexIndexPublic* temp = _impl_.underlying_;
  _impl_.underlying_ = nullptr;
  return temp;
}
inline ::kaikosdk::StreamForexIndexPublic* StreamForexIndexServiceResponsePublic::_internal_mutable_underlying() {
  
  if (_impl_.underlying_ == nullptr) {
    auto* p = CreateMaybeMessage<::kaikosdk::StreamForexIndexPublic>(GetArenaForAllocation());
    _impl_.underlying_ = p;
  }
  return _impl_.underlying_;
}
inline ::kaikosdk::StreamForexIndexPublic* StreamForexIndexServiceResponsePublic::mutable_underlying() {
  ::kaikosdk::StreamForexIndexPublic* _msg = _internal_mutable_underlying();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamForexIndexServiceResponsePublic.underlying)
  return _msg;
}
inline void StreamForexIndexServiceResponsePublic::set_allocated_underlying(::kaikosdk::StreamForexIndexPublic* underlying) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.underlying_;
  }
  if (underlying) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(underlying);
    if (message_arena != submessage_arena) {
      underlying = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, underlying, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.underlying_ = underlying;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamForexIndexServiceResponsePublic.underlying)
}

// .kaikosdk.StreamForexIndexPublic fxrate = 2;
inline bool StreamForexIndexServiceResponsePublic::_internal_has_fxrate() const {
  return this != internal_default_instance() && _impl_.fxrate_ != nullptr;
}
inline bool StreamForexIndexServiceResponsePublic::has_fxrate() const {
  return _internal_has_fxrate();
}
inline void StreamForexIndexServiceResponsePublic::clear_fxrate() {
  if (GetArenaForAllocation() == nullptr && _impl_.fxrate_ != nullptr) {
    delete _impl_.fxrate_;
  }
  _impl_.fxrate_ = nullptr;
}
inline const ::kaikosdk::StreamForexIndexPublic& StreamForexIndexServiceResponsePublic::_internal_fxrate() const {
  const ::kaikosdk::StreamForexIndexPublic* p = _impl_.fxrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::kaikosdk::StreamForexIndexPublic&>(
      ::kaikosdk::_StreamForexIndexPublic_default_instance_);
}
inline const ::kaikosdk::StreamForexIndexPublic& StreamForexIndexServiceResponsePublic::fxrate() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamForexIndexServiceResponsePublic.fxrate)
  return _internal_fxrate();
}
inline void StreamForexIndexServiceResponsePublic::unsafe_arena_set_allocated_fxrate(
    ::kaikosdk::StreamForexIndexPublic* fxrate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fxrate_);
  }
  _impl_.fxrate_ = fxrate;
  if (fxrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamForexIndexServiceResponsePublic.fxrate)
}
inline ::kaikosdk::StreamForexIndexPublic* StreamForexIndexServiceResponsePublic::release_fxrate() {
  
  ::kaikosdk::StreamForexIndexPublic* temp = _impl_.fxrate_;
  _impl_.fxrate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kaikosdk::StreamForexIndexPublic* StreamForexIndexServiceResponsePublic::unsafe_arena_release_fxrate() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamForexIndexServiceResponsePublic.fxrate)
  
  ::kaikosdk::StreamForexIndexPublic* temp = _impl_.fxrate_;
  _impl_.fxrate_ = nullptr;
  return temp;
}
inline ::kaikosdk::StreamForexIndexPublic* StreamForexIndexServiceResponsePublic::_internal_mutable_fxrate() {
  
  if (_impl_.fxrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::kaikosdk::StreamForexIndexPublic>(GetArenaForAllocation());
    _impl_.fxrate_ = p;
  }
  return _impl_.fxrate_;
}
inline ::kaikosdk::StreamForexIndexPublic* StreamForexIndexServiceResponsePublic::mutable_fxrate() {
  ::kaikosdk::StreamForexIndexPublic* _msg = _internal_mutable_fxrate();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamForexIndexServiceResponsePublic.fxrate)
  return _msg;
}
inline void StreamForexIndexServiceResponsePublic::set_allocated_fxrate(::kaikosdk::StreamForexIndexPublic* fxrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.fxrate_;
  }
  if (fxrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fxrate);
    if (message_arena != submessage_arena) {
      fxrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fxrate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fxrate_ = fxrate;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamForexIndexServiceResponsePublic.fxrate)
}

// -------------------------------------------------------------------

// StreamIndexForexRateServiceResponseV1

// string index_code = 1;
inline void StreamIndexForexRateServiceResponseV1::clear_index_code() {
  _impl_.index_code_.ClearToEmpty();
}
inline const std::string& StreamIndexForexRateServiceResponseV1::index_code() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexForexRateServiceResponseV1.index_code)
  return _internal_index_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamIndexForexRateServiceResponseV1::set_index_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.index_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIndexForexRateServiceResponseV1.index_code)
}
inline std::string* StreamIndexForexRateServiceResponseV1::mutable_index_code() {
  std::string* _s = _internal_mutable_index_code();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIndexForexRateServiceResponseV1.index_code)
  return _s;
}
inline const std::string& StreamIndexForexRateServiceResponseV1::_internal_index_code() const {
  return _impl_.index_code_.Get();
}
inline void StreamIndexForexRateServiceResponseV1::_internal_set_index_code(const std::string& value) {
  
  _impl_.index_code_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamIndexForexRateServiceResponseV1::_internal_mutable_index_code() {
  
  return _impl_.index_code_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamIndexForexRateServiceResponseV1::release_index_code() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIndexForexRateServiceResponseV1.index_code)
  return _impl_.index_code_.Release();
}
inline void StreamIndexForexRateServiceResponseV1::set_allocated_index_code(std::string* index_code) {
  if (index_code != nullptr) {
    
  } else {
    
  }
  _impl_.index_code_.SetAllocated(index_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.index_code_.IsDefault()) {
    _impl_.index_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIndexForexRateServiceResponseV1.index_code)
}

// .kaikosdk.StreamIndexCommodity commodity = 2;
inline void StreamIndexForexRateServiceResponseV1::clear_commodity() {
  _impl_.commodity_ = 0;
}
inline ::kaikosdk::StreamIndexCommodity StreamIndexForexRateServiceResponseV1::_internal_commodity() const {
  return static_cast< ::kaikosdk::StreamIndexCommodity >(_impl_.commodity_);
}
inline ::kaikosdk::StreamIndexCommodity StreamIndexForexRateServiceResponseV1::commodity() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexForexRateServiceResponseV1.commodity)
  return _internal_commodity();
}
inline void StreamIndexForexRateServiceResponseV1::_internal_set_commodity(::kaikosdk::StreamIndexCommodity value) {
  
  _impl_.commodity_ = value;
}
inline void StreamIndexForexRateServiceResponseV1::set_commodity(::kaikosdk::StreamIndexCommodity value) {
  _internal_set_commodity(value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIndexForexRateServiceResponseV1.commodity)
}

// .kaikosdk.DataInterval interval = 3;
inline bool StreamIndexForexRateServiceResponseV1::_internal_has_interval() const {
  return this != internal_default_instance() && _impl_.interval_ != nullptr;
}
inline bool StreamIndexForexRateServiceResponseV1::has_interval() const {
  return _internal_has_interval();
}
inline const ::kaikosdk::DataInterval& StreamIndexForexRateServiceResponseV1::_internal_interval() const {
  const ::kaikosdk::DataInterval* p = _impl_.interval_;
  return p != nullptr ? *p : reinterpret_cast<const ::kaikosdk::DataInterval&>(
      ::kaikosdk::_DataInterval_default_instance_);
}
inline const ::kaikosdk::DataInterval& StreamIndexForexRateServiceResponseV1::interval() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexForexRateServiceResponseV1.interval)
  return _internal_interval();
}
inline void StreamIndexForexRateServiceResponseV1::unsafe_arena_set_allocated_interval(
    ::kaikosdk::DataInterval* interval) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_);
  }
  _impl_.interval_ = interval;
  if (interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamIndexForexRateServiceResponseV1.interval)
}
inline ::kaikosdk::DataInterval* StreamIndexForexRateServiceResponseV1::release_interval() {
  
  ::kaikosdk::DataInterval* temp = _impl_.interval_;
  _impl_.interval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kaikosdk::DataInterval* StreamIndexForexRateServiceResponseV1::unsafe_arena_release_interval() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIndexForexRateServiceResponseV1.interval)
  
  ::kaikosdk::DataInterval* temp = _impl_.interval_;
  _impl_.interval_ = nullptr;
  return temp;
}
inline ::kaikosdk::DataInterval* StreamIndexForexRateServiceResponseV1::_internal_mutable_interval() {
  
  if (_impl_.interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::kaikosdk::DataInterval>(GetArenaForAllocation());
    _impl_.interval_ = p;
  }
  return _impl_.interval_;
}
inline ::kaikosdk::DataInterval* StreamIndexForexRateServiceResponseV1::mutable_interval() {
  ::kaikosdk::DataInterval* _msg = _internal_mutable_interval();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIndexForexRateServiceResponseV1.interval)
  return _msg;
}
inline void StreamIndexForexRateServiceResponseV1::set_allocated_interval(::kaikosdk::DataInterval* interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_);
  }
  if (interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval));
    if (message_arena != submessage_arena) {
      interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.interval_ = interval;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIndexForexRateServiceResponseV1.interval)
}

// .kaikosdk.StreamForexIndexServiceResponsePublic composition = 4;
inline bool StreamIndexForexRateServiceResponseV1::_internal_has_composition() const {
  return this != internal_default_instance() && _impl_.composition_ != nullptr;
}
inline bool StreamIndexForexRateServiceResponseV1::has_composition() const {
  return _internal_has_composition();
}
inline void StreamIndexForexRateServiceResponseV1::clear_composition() {
  if (GetArenaForAllocation() == nullptr && _impl_.composition_ != nullptr) {
    delete _impl_.composition_;
  }
  _impl_.composition_ = nullptr;
}
inline const ::kaikosdk::StreamForexIndexServiceResponsePublic& StreamIndexForexRateServiceResponseV1::_internal_composition() const {
  const ::kaikosdk::StreamForexIndexServiceResponsePublic* p = _impl_.composition_;
  return p != nullptr ? *p : reinterpret_cast<const ::kaikosdk::StreamForexIndexServiceResponsePublic&>(
      ::kaikosdk::_StreamForexIndexServiceResponsePublic_default_instance_);
}
inline const ::kaikosdk::StreamForexIndexServiceResponsePublic& StreamIndexForexRateServiceResponseV1::composition() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexForexRateServiceResponseV1.composition)
  return _internal_composition();
}
inline void StreamIndexForexRateServiceResponseV1::unsafe_arena_set_allocated_composition(
    ::kaikosdk::StreamForexIndexServiceResponsePublic* composition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.composition_);
  }
  _impl_.composition_ = composition;
  if (composition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamIndexForexRateServiceResponseV1.composition)
}
inline ::kaikosdk::StreamForexIndexServiceResponsePublic* StreamIndexForexRateServiceResponseV1::release_composition() {
  
  ::kaikosdk::StreamForexIndexServiceResponsePublic* temp = _impl_.composition_;
  _impl_.composition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kaikosdk::StreamForexIndexServiceResponsePublic* StreamIndexForexRateServiceResponseV1::unsafe_arena_release_composition() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIndexForexRateServiceResponseV1.composition)
  
  ::kaikosdk::StreamForexIndexServiceResponsePublic* temp = _impl_.composition_;
  _impl_.composition_ = nullptr;
  return temp;
}
inline ::kaikosdk::StreamForexIndexServiceResponsePublic* StreamIndexForexRateServiceResponseV1::_internal_mutable_composition() {
  
  if (_impl_.composition_ == nullptr) {
    auto* p = CreateMaybeMessage<::kaikosdk::StreamForexIndexServiceResponsePublic>(GetArenaForAllocation());
    _impl_.composition_ = p;
  }
  return _impl_.composition_;
}
inline ::kaikosdk::StreamForexIndexServiceResponsePublic* StreamIndexForexRateServiceResponseV1::mutable_composition() {
  ::kaikosdk::StreamForexIndexServiceResponsePublic* _msg = _internal_mutable_composition();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIndexForexRateServiceResponseV1.composition)
  return _msg;
}
inline void StreamIndexForexRateServiceResponseV1::set_allocated_composition(::kaikosdk::StreamForexIndexServiceResponsePublic* composition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.composition_;
  }
  if (composition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(composition);
    if (message_arena != submessage_arena) {
      composition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, composition, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.composition_ = composition;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIndexForexRateServiceResponseV1.composition)
}

// double price = 5;
inline void StreamIndexForexRateServiceResponseV1::clear_price() {
  _impl_.price_ = 0;
}
inline double StreamIndexForexRateServiceResponseV1::_internal_price() const {
  return _impl_.price_;
}
inline double StreamIndexForexRateServiceResponseV1::price() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexForexRateServiceResponseV1.price)
  return _internal_price();
}
inline void StreamIndexForexRateServiceResponseV1::_internal_set_price(double value) {
  
  _impl_.price_ = value;
}
inline void StreamIndexForexRateServiceResponseV1::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIndexForexRateServiceResponseV1.price)
}

// .google.protobuf.Timestamp ts_event = 6;
inline bool StreamIndexForexRateServiceResponseV1::_internal_has_ts_event() const {
  return this != internal_default_instance() && _impl_.ts_event_ != nullptr;
}
inline bool StreamIndexForexRateServiceResponseV1::has_ts_event() const {
  return _internal_has_ts_event();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamIndexForexRateServiceResponseV1::_internal_ts_event() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.ts_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamIndexForexRateServiceResponseV1::ts_event() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexForexRateServiceResponseV1.ts_event)
  return _internal_ts_event();
}
inline void StreamIndexForexRateServiceResponseV1::unsafe_arena_set_allocated_ts_event(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_event_);
  }
  _impl_.ts_event_ = ts_event;
  if (ts_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamIndexForexRateServiceResponseV1.ts_event)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIndexForexRateServiceResponseV1::release_ts_event() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_event_;
  _impl_.ts_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIndexForexRateServiceResponseV1::unsafe_arena_release_ts_event() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIndexForexRateServiceResponseV1.ts_event)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_event_;
  _impl_.ts_event_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIndexForexRateServiceResponseV1::_internal_mutable_ts_event() {
  
  if (_impl_.ts_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.ts_event_ = p;
  }
  return _impl_.ts_event_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIndexForexRateServiceResponseV1::mutable_ts_event() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_ts_event();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIndexForexRateServiceResponseV1.ts_event)
  return _msg;
}
inline void StreamIndexForexRateServiceResponseV1::set_allocated_ts_event(::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_event_);
  }
  if (ts_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_event));
    if (message_arena != submessage_arena) {
      ts_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts_event, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ts_event_ = ts_event;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIndexForexRateServiceResponseV1.ts_event)
}

// .kaikosdk.StreamForexIndexServiceResponseDetail detail = 7;
inline bool StreamIndexForexRateServiceResponseV1::_internal_has_detail() const {
  return this != internal_default_instance() && _impl_.detail_ != nullptr;
}
inline bool StreamIndexForexRateServiceResponseV1::has_detail() const {
  return _internal_has_detail();
}
inline void StreamIndexForexRateServiceResponseV1::clear_detail() {
  if (GetArenaForAllocation() == nullptr && _impl_.detail_ != nullptr) {
    delete _impl_.detail_;
  }
  _impl_.detail_ = nullptr;
}
inline const ::kaikosdk::StreamForexIndexServiceResponseDetail& StreamIndexForexRateServiceResponseV1::_internal_detail() const {
  const ::kaikosdk::StreamForexIndexServiceResponseDetail* p = _impl_.detail_;
  return p != nullptr ? *p : reinterpret_cast<const ::kaikosdk::StreamForexIndexServiceResponseDetail&>(
      ::kaikosdk::_StreamForexIndexServiceResponseDetail_default_instance_);
}
inline const ::kaikosdk::StreamForexIndexServiceResponseDetail& StreamIndexForexRateServiceResponseV1::detail() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexForexRateServiceResponseV1.detail)
  return _internal_detail();
}
inline void StreamIndexForexRateServiceResponseV1::unsafe_arena_set_allocated_detail(
    ::kaikosdk::StreamForexIndexServiceResponseDetail* detail) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.detail_);
  }
  _impl_.detail_ = detail;
  if (detail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamIndexForexRateServiceResponseV1.detail)
}
inline ::kaikosdk::StreamForexIndexServiceResponseDetail* StreamIndexForexRateServiceResponseV1::release_detail() {
  
  ::kaikosdk::StreamForexIndexServiceResponseDetail* temp = _impl_.detail_;
  _impl_.detail_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kaikosdk::StreamForexIndexServiceResponseDetail* StreamIndexForexRateServiceResponseV1::unsafe_arena_release_detail() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIndexForexRateServiceResponseV1.detail)
  
  ::kaikosdk::StreamForexIndexServiceResponseDetail* temp = _impl_.detail_;
  _impl_.detail_ = nullptr;
  return temp;
}
inline ::kaikosdk::StreamForexIndexServiceResponseDetail* StreamIndexForexRateServiceResponseV1::_internal_mutable_detail() {
  
  if (_impl_.detail_ == nullptr) {
    auto* p = CreateMaybeMessage<::kaikosdk::StreamForexIndexServiceResponseDetail>(GetArenaForAllocation());
    _impl_.detail_ = p;
  }
  return _impl_.detail_;
}
inline ::kaikosdk::StreamForexIndexServiceResponseDetail* StreamIndexForexRateServiceResponseV1::mutable_detail() {
  ::kaikosdk::StreamForexIndexServiceResponseDetail* _msg = _internal_mutable_detail();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIndexForexRateServiceResponseV1.detail)
  return _msg;
}
inline void StreamIndexForexRateServiceResponseV1::set_allocated_detail(::kaikosdk::StreamForexIndexServiceResponseDetail* detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.detail_;
  }
  if (detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(detail);
    if (message_arena != submessage_arena) {
      detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detail, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.detail_ = detail;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIndexForexRateServiceResponseV1.detail)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kaikosdk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2findex_5fforex_5frate_5fv1_2fresponse_2eproto
