// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk/stream/exotic_indices_v1/response.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
#include "sdk/core/data_interval.pb.h"
#include "sdk/stream/index_v1/commodity.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto;
namespace kaikosdk {
class StreamExoticIndicesServiceResponseComposition;
struct StreamExoticIndicesServiceResponseCompositionDefaultTypeInternal;
extern StreamExoticIndicesServiceResponseCompositionDefaultTypeInternal _StreamExoticIndicesServiceResponseComposition_default_instance_;
class StreamExoticIndicesServiceResponsePair;
struct StreamExoticIndicesServiceResponsePairDefaultTypeInternal;
extern StreamExoticIndicesServiceResponsePairDefaultTypeInternal _StreamExoticIndicesServiceResponsePair_default_instance_;
class StreamExoticIndicesServiceResponsePrices;
struct StreamExoticIndicesServiceResponsePricesDefaultTypeInternal;
extern StreamExoticIndicesServiceResponsePricesDefaultTypeInternal _StreamExoticIndicesServiceResponsePrices_default_instance_;
class StreamExoticIndicesServiceResponseV1;
struct StreamExoticIndicesServiceResponseV1DefaultTypeInternal;
extern StreamExoticIndicesServiceResponseV1DefaultTypeInternal _StreamExoticIndicesServiceResponseV1_default_instance_;
}  // namespace kaikosdk
PROTOBUF_NAMESPACE_OPEN
template<> ::kaikosdk::StreamExoticIndicesServiceResponseComposition* Arena::CreateMaybeMessage<::kaikosdk::StreamExoticIndicesServiceResponseComposition>(Arena*);
template<> ::kaikosdk::StreamExoticIndicesServiceResponsePair* Arena::CreateMaybeMessage<::kaikosdk::StreamExoticIndicesServiceResponsePair>(Arena*);
template<> ::kaikosdk::StreamExoticIndicesServiceResponsePrices* Arena::CreateMaybeMessage<::kaikosdk::StreamExoticIndicesServiceResponsePrices>(Arena*);
template<> ::kaikosdk::StreamExoticIndicesServiceResponseV1* Arena::CreateMaybeMessage<::kaikosdk::StreamExoticIndicesServiceResponseV1>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kaikosdk {

enum StreamExoticIndicesPosition : int {
  SEIP_POSITION_UNKNOWN = 0,
  SEIP_LONG = 1,
  SEIP_SHORT = 2,
  StreamExoticIndicesPosition_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  StreamExoticIndicesPosition_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool StreamExoticIndicesPosition_IsValid(int value);
constexpr StreamExoticIndicesPosition StreamExoticIndicesPosition_MIN = SEIP_POSITION_UNKNOWN;
constexpr StreamExoticIndicesPosition StreamExoticIndicesPosition_MAX = SEIP_SHORT;
constexpr int StreamExoticIndicesPosition_ARRAYSIZE = StreamExoticIndicesPosition_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamExoticIndicesPosition_descriptor();
template<typename T>
inline const std::string& StreamExoticIndicesPosition_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StreamExoticIndicesPosition>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StreamExoticIndicesPosition_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StreamExoticIndicesPosition_descriptor(), enum_t_value);
}
inline bool StreamExoticIndicesPosition_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StreamExoticIndicesPosition* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StreamExoticIndicesPosition>(
    StreamExoticIndicesPosition_descriptor(), name, value);
}
// ===================================================================

class StreamExoticIndicesServiceResponseComposition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.StreamExoticIndicesServiceResponseComposition) */ {
 public:
  inline StreamExoticIndicesServiceResponseComposition() : StreamExoticIndicesServiceResponseComposition(nullptr) {}
  ~StreamExoticIndicesServiceResponseComposition() override;
  explicit PROTOBUF_CONSTEXPR StreamExoticIndicesServiceResponseComposition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamExoticIndicesServiceResponseComposition(const StreamExoticIndicesServiceResponseComposition& from);
  StreamExoticIndicesServiceResponseComposition(StreamExoticIndicesServiceResponseComposition&& from) noexcept
    : StreamExoticIndicesServiceResponseComposition() {
    *this = ::std::move(from);
  }

  inline StreamExoticIndicesServiceResponseComposition& operator=(const StreamExoticIndicesServiceResponseComposition& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamExoticIndicesServiceResponseComposition& operator=(StreamExoticIndicesServiceResponseComposition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamExoticIndicesServiceResponseComposition& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamExoticIndicesServiceResponseComposition* internal_default_instance() {
    return reinterpret_cast<const StreamExoticIndicesServiceResponseComposition*>(
               &_StreamExoticIndicesServiceResponseComposition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StreamExoticIndicesServiceResponseComposition& a, StreamExoticIndicesServiceResponseComposition& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamExoticIndicesServiceResponseComposition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamExoticIndicesServiceResponseComposition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamExoticIndicesServiceResponseComposition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamExoticIndicesServiceResponseComposition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamExoticIndicesServiceResponseComposition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamExoticIndicesServiceResponseComposition& from) {
    StreamExoticIndicesServiceResponseComposition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamExoticIndicesServiceResponseComposition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.StreamExoticIndicesServiceResponseComposition";
  }
  protected:
  explicit StreamExoticIndicesServiceResponseComposition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnderlyingInstrumentFieldNumber = 1,
    kBaseFieldNumber = 2,
    kQuoteFieldNumber = 3,
    kCurrencyConversionFieldNumber = 6,
    kTsEventFieldNumber = 7,
  };
  // string underlying_instrument = 1;
  void clear_underlying_instrument();
  const std::string& underlying_instrument() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_underlying_instrument(ArgT0&& arg0, ArgT... args);
  std::string* mutable_underlying_instrument();
  PROTOBUF_NODISCARD std::string* release_underlying_instrument();
  void set_allocated_underlying_instrument(std::string* underlying_instrument);
  private:
  const std::string& _internal_underlying_instrument() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_underlying_instrument(const std::string& value);
  std::string* _internal_mutable_underlying_instrument();
  public:

  // string base = 2;
  void clear_base();
  const std::string& base() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_base(ArgT0&& arg0, ArgT... args);
  std::string* mutable_base();
  PROTOBUF_NODISCARD std::string* release_base();
  void set_allocated_base(std::string* base);
  private:
  const std::string& _internal_base() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base(const std::string& value);
  std::string* _internal_mutable_base();
  public:

  // string quote = 3;
  void clear_quote();
  const std::string& quote() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_quote(ArgT0&& arg0, ArgT... args);
  std::string* mutable_quote();
  PROTOBUF_NODISCARD std::string* release_quote();
  void set_allocated_quote(std::string* quote);
  private:
  const std::string& _internal_quote() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quote(const std::string& value);
  std::string* _internal_mutable_quote();
  public:

  // string currency_conversion = 6;
  void clear_currency_conversion();
  const std::string& currency_conversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency_conversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency_conversion();
  PROTOBUF_NODISCARD std::string* release_currency_conversion();
  void set_allocated_currency_conversion(std::string* currency_conversion);
  private:
  const std::string& _internal_currency_conversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency_conversion(const std::string& value);
  std::string* _internal_mutable_currency_conversion();
  public:

  // .google.protobuf.Timestamp ts_event = 7;
  bool has_ts_event() const;
  private:
  bool _internal_has_ts_event() const;
  public:
  void clear_ts_event();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts_event() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_ts_event();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_ts_event();
  void set_allocated_ts_event(::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_ts_event() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_ts_event();
  public:
  void unsafe_arena_set_allocated_ts_event(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_ts_event();

  // @@protoc_insertion_point(class_scope:kaikosdk.StreamExoticIndicesServiceResponseComposition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr underlying_instrument_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quote_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_conversion_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto;
};
// -------------------------------------------------------------------

class StreamExoticIndicesServiceResponsePair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.StreamExoticIndicesServiceResponsePair) */ {
 public:
  inline StreamExoticIndicesServiceResponsePair() : StreamExoticIndicesServiceResponsePair(nullptr) {}
  ~StreamExoticIndicesServiceResponsePair() override;
  explicit PROTOBUF_CONSTEXPR StreamExoticIndicesServiceResponsePair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamExoticIndicesServiceResponsePair(const StreamExoticIndicesServiceResponsePair& from);
  StreamExoticIndicesServiceResponsePair(StreamExoticIndicesServiceResponsePair&& from) noexcept
    : StreamExoticIndicesServiceResponsePair() {
    *this = ::std::move(from);
  }

  inline StreamExoticIndicesServiceResponsePair& operator=(const StreamExoticIndicesServiceResponsePair& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamExoticIndicesServiceResponsePair& operator=(StreamExoticIndicesServiceResponsePair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamExoticIndicesServiceResponsePair& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamExoticIndicesServiceResponsePair* internal_default_instance() {
    return reinterpret_cast<const StreamExoticIndicesServiceResponsePair*>(
               &_StreamExoticIndicesServiceResponsePair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StreamExoticIndicesServiceResponsePair& a, StreamExoticIndicesServiceResponsePair& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamExoticIndicesServiceResponsePair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamExoticIndicesServiceResponsePair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamExoticIndicesServiceResponsePair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamExoticIndicesServiceResponsePair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamExoticIndicesServiceResponsePair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamExoticIndicesServiceResponsePair& from) {
    StreamExoticIndicesServiceResponsePair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamExoticIndicesServiceResponsePair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.StreamExoticIndicesServiceResponsePair";
  }
  protected:
  explicit StreamExoticIndicesServiceResponsePair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnderlyingInstrumentFieldNumber = 1,
    kUnderlyingPriceFieldNumber = 2,
    kWeightingFactorFieldNumber = 3,
    kCappingFactorFieldNumber = 4,
    kCurrencyConversionFactorFieldNumber = 5,
    kPositionFieldNumber = 6,
  };
  // string underlying_instrument = 1;
  void clear_underlying_instrument();
  const std::string& underlying_instrument() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_underlying_instrument(ArgT0&& arg0, ArgT... args);
  std::string* mutable_underlying_instrument();
  PROTOBUF_NODISCARD std::string* release_underlying_instrument();
  void set_allocated_underlying_instrument(std::string* underlying_instrument);
  private:
  const std::string& _internal_underlying_instrument() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_underlying_instrument(const std::string& value);
  std::string* _internal_mutable_underlying_instrument();
  public:

  // .google.protobuf.DoubleValue underlying_price = 2;
  bool has_underlying_price() const;
  private:
  bool _internal_has_underlying_price() const;
  public:
  void clear_underlying_price();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& underlying_price() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_underlying_price();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_underlying_price();
  void set_allocated_underlying_price(::PROTOBUF_NAMESPACE_ID::DoubleValue* underlying_price);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_underlying_price() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_underlying_price();
  public:
  void unsafe_arena_set_allocated_underlying_price(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* underlying_price);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_underlying_price();

  // double weighting_factor = 3;
  void clear_weighting_factor();
  double weighting_factor() const;
  void set_weighting_factor(double value);
  private:
  double _internal_weighting_factor() const;
  void _internal_set_weighting_factor(double value);
  public:

  // double capping_factor = 4;
  void clear_capping_factor();
  double capping_factor() const;
  void set_capping_factor(double value);
  private:
  double _internal_capping_factor() const;
  void _internal_set_capping_factor(double value);
  public:

  // double currency_conversion_factor = 5;
  void clear_currency_conversion_factor();
  double currency_conversion_factor() const;
  void set_currency_conversion_factor(double value);
  private:
  double _internal_currency_conversion_factor() const;
  void _internal_set_currency_conversion_factor(double value);
  public:

  // .kaikosdk.StreamExoticIndicesPosition position = 6;
  void clear_position();
  ::kaikosdk::StreamExoticIndicesPosition position() const;
  void set_position(::kaikosdk::StreamExoticIndicesPosition value);
  private:
  ::kaikosdk::StreamExoticIndicesPosition _internal_position() const;
  void _internal_set_position(::kaikosdk::StreamExoticIndicesPosition value);
  public:

  // @@protoc_insertion_point(class_scope:kaikosdk.StreamExoticIndicesServiceResponsePair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr underlying_instrument_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* underlying_price_;
    double weighting_factor_;
    double capping_factor_;
    double currency_conversion_factor_;
    int position_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto;
};
// -------------------------------------------------------------------

class StreamExoticIndicesServiceResponsePrices final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.StreamExoticIndicesServiceResponsePrices) */ {
 public:
  inline StreamExoticIndicesServiceResponsePrices() : StreamExoticIndicesServiceResponsePrices(nullptr) {}
  ~StreamExoticIndicesServiceResponsePrices() override;
  explicit PROTOBUF_CONSTEXPR StreamExoticIndicesServiceResponsePrices(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamExoticIndicesServiceResponsePrices(const StreamExoticIndicesServiceResponsePrices& from);
  StreamExoticIndicesServiceResponsePrices(StreamExoticIndicesServiceResponsePrices&& from) noexcept
    : StreamExoticIndicesServiceResponsePrices() {
    *this = ::std::move(from);
  }

  inline StreamExoticIndicesServiceResponsePrices& operator=(const StreamExoticIndicesServiceResponsePrices& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamExoticIndicesServiceResponsePrices& operator=(StreamExoticIndicesServiceResponsePrices&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamExoticIndicesServiceResponsePrices& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamExoticIndicesServiceResponsePrices* internal_default_instance() {
    return reinterpret_cast<const StreamExoticIndicesServiceResponsePrices*>(
               &_StreamExoticIndicesServiceResponsePrices_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StreamExoticIndicesServiceResponsePrices& a, StreamExoticIndicesServiceResponsePrices& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamExoticIndicesServiceResponsePrices* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamExoticIndicesServiceResponsePrices* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamExoticIndicesServiceResponsePrices* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamExoticIndicesServiceResponsePrices>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamExoticIndicesServiceResponsePrices& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamExoticIndicesServiceResponsePrices& from) {
    StreamExoticIndicesServiceResponsePrices::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamExoticIndicesServiceResponsePrices* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.StreamExoticIndicesServiceResponsePrices";
  }
  protected:
  explicit StreamExoticIndicesServiceResponsePrices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPairsFieldNumber = 3,
    kIndexValueFieldNumber = 1,
    kDivisorFieldNumber = 2,
  };
  // repeated .kaikosdk.StreamExoticIndicesServiceResponsePair pairs = 3;
  int pairs_size() const;
  private:
  int _internal_pairs_size() const;
  public:
  void clear_pairs();
  ::kaikosdk::StreamExoticIndicesServiceResponsePair* mutable_pairs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::StreamExoticIndicesServiceResponsePair >*
      mutable_pairs();
  private:
  const ::kaikosdk::StreamExoticIndicesServiceResponsePair& _internal_pairs(int index) const;
  ::kaikosdk::StreamExoticIndicesServiceResponsePair* _internal_add_pairs();
  public:
  const ::kaikosdk::StreamExoticIndicesServiceResponsePair& pairs(int index) const;
  ::kaikosdk::StreamExoticIndicesServiceResponsePair* add_pairs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::StreamExoticIndicesServiceResponsePair >&
      pairs() const;

  // double index_value = 1;
  void clear_index_value();
  double index_value() const;
  void set_index_value(double value);
  private:
  double _internal_index_value() const;
  void _internal_set_index_value(double value);
  public:

  // double divisor = 2;
  void clear_divisor();
  double divisor() const;
  void set_divisor(double value);
  private:
  double _internal_divisor() const;
  void _internal_set_divisor(double value);
  public:

  // @@protoc_insertion_point(class_scope:kaikosdk.StreamExoticIndicesServiceResponsePrices)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::StreamExoticIndicesServiceResponsePair > pairs_;
    double index_value_;
    double divisor_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto;
};
// -------------------------------------------------------------------

class StreamExoticIndicesServiceResponseV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.StreamExoticIndicesServiceResponseV1) */ {
 public:
  inline StreamExoticIndicesServiceResponseV1() : StreamExoticIndicesServiceResponseV1(nullptr) {}
  ~StreamExoticIndicesServiceResponseV1() override;
  explicit PROTOBUF_CONSTEXPR StreamExoticIndicesServiceResponseV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamExoticIndicesServiceResponseV1(const StreamExoticIndicesServiceResponseV1& from);
  StreamExoticIndicesServiceResponseV1(StreamExoticIndicesServiceResponseV1&& from) noexcept
    : StreamExoticIndicesServiceResponseV1() {
    *this = ::std::move(from);
  }

  inline StreamExoticIndicesServiceResponseV1& operator=(const StreamExoticIndicesServiceResponseV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamExoticIndicesServiceResponseV1& operator=(StreamExoticIndicesServiceResponseV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamExoticIndicesServiceResponseV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamExoticIndicesServiceResponseV1* internal_default_instance() {
    return reinterpret_cast<const StreamExoticIndicesServiceResponseV1*>(
               &_StreamExoticIndicesServiceResponseV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StreamExoticIndicesServiceResponseV1& a, StreamExoticIndicesServiceResponseV1& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamExoticIndicesServiceResponseV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamExoticIndicesServiceResponseV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamExoticIndicesServiceResponseV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamExoticIndicesServiceResponseV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamExoticIndicesServiceResponseV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamExoticIndicesServiceResponseV1& from) {
    StreamExoticIndicesServiceResponseV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamExoticIndicesServiceResponseV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.StreamExoticIndicesServiceResponseV1";
  }
  protected:
  explicit StreamExoticIndicesServiceResponseV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompositionsFieldNumber = 5,
    kIndexCodeFieldNumber = 2,
    kMainQuoteFieldNumber = 4,
    kIntervalFieldNumber = 3,
    kPriceFieldNumber = 6,
    kTsEventFieldNumber = 7,
    kTsComputeFieldNumber = 8,
    kCommodityFieldNumber = 1,
  };
  // repeated .kaikosdk.StreamExoticIndicesServiceResponseComposition compositions = 5;
  int compositions_size() const;
  private:
  int _internal_compositions_size() const;
  public:
  void clear_compositions();
  ::kaikosdk::StreamExoticIndicesServiceResponseComposition* mutable_compositions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::StreamExoticIndicesServiceResponseComposition >*
      mutable_compositions();
  private:
  const ::kaikosdk::StreamExoticIndicesServiceResponseComposition& _internal_compositions(int index) const;
  ::kaikosdk::StreamExoticIndicesServiceResponseComposition* _internal_add_compositions();
  public:
  const ::kaikosdk::StreamExoticIndicesServiceResponseComposition& compositions(int index) const;
  ::kaikosdk::StreamExoticIndicesServiceResponseComposition* add_compositions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::StreamExoticIndicesServiceResponseComposition >&
      compositions() const;

  // string index_code = 2;
  void clear_index_code();
  const std::string& index_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_code();
  PROTOBUF_NODISCARD std::string* release_index_code();
  void set_allocated_index_code(std::string* index_code);
  private:
  const std::string& _internal_index_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_code(const std::string& value);
  std::string* _internal_mutable_index_code();
  public:

  // string main_quote = 4;
  void clear_main_quote();
  const std::string& main_quote() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_main_quote(ArgT0&& arg0, ArgT... args);
  std::string* mutable_main_quote();
  PROTOBUF_NODISCARD std::string* release_main_quote();
  void set_allocated_main_quote(std::string* main_quote);
  private:
  const std::string& _internal_main_quote() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_main_quote(const std::string& value);
  std::string* _internal_mutable_main_quote();
  public:

  // .kaikosdk.DataInterval interval = 3;
  bool has_interval() const;
  private:
  bool _internal_has_interval() const;
  public:
  void clear_interval();
  const ::kaikosdk::DataInterval& interval() const;
  PROTOBUF_NODISCARD ::kaikosdk::DataInterval* release_interval();
  ::kaikosdk::DataInterval* mutable_interval();
  void set_allocated_interval(::kaikosdk::DataInterval* interval);
  private:
  const ::kaikosdk::DataInterval& _internal_interval() const;
  ::kaikosdk::DataInterval* _internal_mutable_interval();
  public:
  void unsafe_arena_set_allocated_interval(
      ::kaikosdk::DataInterval* interval);
  ::kaikosdk::DataInterval* unsafe_arena_release_interval();

  // .kaikosdk.StreamExoticIndicesServiceResponsePrices price = 6;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::kaikosdk::StreamExoticIndicesServiceResponsePrices& price() const;
  PROTOBUF_NODISCARD ::kaikosdk::StreamExoticIndicesServiceResponsePrices* release_price();
  ::kaikosdk::StreamExoticIndicesServiceResponsePrices* mutable_price();
  void set_allocated_price(::kaikosdk::StreamExoticIndicesServiceResponsePrices* price);
  private:
  const ::kaikosdk::StreamExoticIndicesServiceResponsePrices& _internal_price() const;
  ::kaikosdk::StreamExoticIndicesServiceResponsePrices* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::kaikosdk::StreamExoticIndicesServiceResponsePrices* price);
  ::kaikosdk::StreamExoticIndicesServiceResponsePrices* unsafe_arena_release_price();

  // .google.protobuf.Timestamp ts_event = 7;
  bool has_ts_event() const;
  private:
  bool _internal_has_ts_event() const;
  public:
  void clear_ts_event();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts_event() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_ts_event();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_ts_event();
  void set_allocated_ts_event(::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_ts_event() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_ts_event();
  public:
  void unsafe_arena_set_allocated_ts_event(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_ts_event();

  // .google.protobuf.Timestamp ts_compute = 8;
  bool has_ts_compute() const;
  private:
  bool _internal_has_ts_compute() const;
  public:
  void clear_ts_compute();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts_compute() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_ts_compute();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_ts_compute();
  void set_allocated_ts_compute(::PROTOBUF_NAMESPACE_ID::Timestamp* ts_compute);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_ts_compute() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_ts_compute();
  public:
  void unsafe_arena_set_allocated_ts_compute(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_compute);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_ts_compute();

  // .kaikosdk.StreamIndexCommodity commodity = 1;
  void clear_commodity();
  ::kaikosdk::StreamIndexCommodity commodity() const;
  void set_commodity(::kaikosdk::StreamIndexCommodity value);
  private:
  ::kaikosdk::StreamIndexCommodity _internal_commodity() const;
  void _internal_set_commodity(::kaikosdk::StreamIndexCommodity value);
  public:

  // @@protoc_insertion_point(class_scope:kaikosdk.StreamExoticIndicesServiceResponseV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::StreamExoticIndicesServiceResponseComposition > compositions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr main_quote_;
    ::kaikosdk::DataInterval* interval_;
    ::kaikosdk::StreamExoticIndicesServiceResponsePrices* price_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_compute_;
    int commodity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StreamExoticIndicesServiceResponseComposition

// string underlying_instrument = 1;
inline void StreamExoticIndicesServiceResponseComposition::clear_underlying_instrument() {
  _impl_.underlying_instrument_.ClearToEmpty();
}
inline const std::string& StreamExoticIndicesServiceResponseComposition::underlying_instrument() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamExoticIndicesServiceResponseComposition.underlying_instrument)
  return _internal_underlying_instrument();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamExoticIndicesServiceResponseComposition::set_underlying_instrument(ArgT0&& arg0, ArgT... args) {
 
 _impl_.underlying_instrument_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamExoticIndicesServiceResponseComposition.underlying_instrument)
}
inline std::string* StreamExoticIndicesServiceResponseComposition::mutable_underlying_instrument() {
  std::string* _s = _internal_mutable_underlying_instrument();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamExoticIndicesServiceResponseComposition.underlying_instrument)
  return _s;
}
inline const std::string& StreamExoticIndicesServiceResponseComposition::_internal_underlying_instrument() const {
  return _impl_.underlying_instrument_.Get();
}
inline void StreamExoticIndicesServiceResponseComposition::_internal_set_underlying_instrument(const std::string& value) {
  
  _impl_.underlying_instrument_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamExoticIndicesServiceResponseComposition::_internal_mutable_underlying_instrument() {
  
  return _impl_.underlying_instrument_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamExoticIndicesServiceResponseComposition::release_underlying_instrument() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamExoticIndicesServiceResponseComposition.underlying_instrument)
  return _impl_.underlying_instrument_.Release();
}
inline void StreamExoticIndicesServiceResponseComposition::set_allocated_underlying_instrument(std::string* underlying_instrument) {
  if (underlying_instrument != nullptr) {
    
  } else {
    
  }
  _impl_.underlying_instrument_.SetAllocated(underlying_instrument, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.underlying_instrument_.IsDefault()) {
    _impl_.underlying_instrument_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamExoticIndicesServiceResponseComposition.underlying_instrument)
}

// string base = 2;
inline void StreamExoticIndicesServiceResponseComposition::clear_base() {
  _impl_.base_.ClearToEmpty();
}
inline const std::string& StreamExoticIndicesServiceResponseComposition::base() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamExoticIndicesServiceResponseComposition.base)
  return _internal_base();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamExoticIndicesServiceResponseComposition::set_base(ArgT0&& arg0, ArgT... args) {
 
 _impl_.base_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamExoticIndicesServiceResponseComposition.base)
}
inline std::string* StreamExoticIndicesServiceResponseComposition::mutable_base() {
  std::string* _s = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamExoticIndicesServiceResponseComposition.base)
  return _s;
}
inline const std::string& StreamExoticIndicesServiceResponseComposition::_internal_base() const {
  return _impl_.base_.Get();
}
inline void StreamExoticIndicesServiceResponseComposition::_internal_set_base(const std::string& value) {
  
  _impl_.base_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamExoticIndicesServiceResponseComposition::_internal_mutable_base() {
  
  return _impl_.base_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamExoticIndicesServiceResponseComposition::release_base() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamExoticIndicesServiceResponseComposition.base)
  return _impl_.base_.Release();
}
inline void StreamExoticIndicesServiceResponseComposition::set_allocated_base(std::string* base) {
  if (base != nullptr) {
    
  } else {
    
  }
  _impl_.base_.SetAllocated(base, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.base_.IsDefault()) {
    _impl_.base_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamExoticIndicesServiceResponseComposition.base)
}

// string quote = 3;
inline void StreamExoticIndicesServiceResponseComposition::clear_quote() {
  _impl_.quote_.ClearToEmpty();
}
inline const std::string& StreamExoticIndicesServiceResponseComposition::quote() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamExoticIndicesServiceResponseComposition.quote)
  return _internal_quote();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamExoticIndicesServiceResponseComposition::set_quote(ArgT0&& arg0, ArgT... args) {
 
 _impl_.quote_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamExoticIndicesServiceResponseComposition.quote)
}
inline std::string* StreamExoticIndicesServiceResponseComposition::mutable_quote() {
  std::string* _s = _internal_mutable_quote();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamExoticIndicesServiceResponseComposition.quote)
  return _s;
}
inline const std::string& StreamExoticIndicesServiceResponseComposition::_internal_quote() const {
  return _impl_.quote_.Get();
}
inline void StreamExoticIndicesServiceResponseComposition::_internal_set_quote(const std::string& value) {
  
  _impl_.quote_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamExoticIndicesServiceResponseComposition::_internal_mutable_quote() {
  
  return _impl_.quote_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamExoticIndicesServiceResponseComposition::release_quote() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamExoticIndicesServiceResponseComposition.quote)
  return _impl_.quote_.Release();
}
inline void StreamExoticIndicesServiceResponseComposition::set_allocated_quote(std::string* quote) {
  if (quote != nullptr) {
    
  } else {
    
  }
  _impl_.quote_.SetAllocated(quote, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.quote_.IsDefault()) {
    _impl_.quote_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamExoticIndicesServiceResponseComposition.quote)
}

// string currency_conversion = 6;
inline void StreamExoticIndicesServiceResponseComposition::clear_currency_conversion() {
  _impl_.currency_conversion_.ClearToEmpty();
}
inline const std::string& StreamExoticIndicesServiceResponseComposition::currency_conversion() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamExoticIndicesServiceResponseComposition.currency_conversion)
  return _internal_currency_conversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamExoticIndicesServiceResponseComposition::set_currency_conversion(ArgT0&& arg0, ArgT... args) {
 
 _impl_.currency_conversion_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamExoticIndicesServiceResponseComposition.currency_conversion)
}
inline std::string* StreamExoticIndicesServiceResponseComposition::mutable_currency_conversion() {
  std::string* _s = _internal_mutable_currency_conversion();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamExoticIndicesServiceResponseComposition.currency_conversion)
  return _s;
}
inline const std::string& StreamExoticIndicesServiceResponseComposition::_internal_currency_conversion() const {
  return _impl_.currency_conversion_.Get();
}
inline void StreamExoticIndicesServiceResponseComposition::_internal_set_currency_conversion(const std::string& value) {
  
  _impl_.currency_conversion_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamExoticIndicesServiceResponseComposition::_internal_mutable_currency_conversion() {
  
  return _impl_.currency_conversion_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamExoticIndicesServiceResponseComposition::release_currency_conversion() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamExoticIndicesServiceResponseComposition.currency_conversion)
  return _impl_.currency_conversion_.Release();
}
inline void StreamExoticIndicesServiceResponseComposition::set_allocated_currency_conversion(std::string* currency_conversion) {
  if (currency_conversion != nullptr) {
    
  } else {
    
  }
  _impl_.currency_conversion_.SetAllocated(currency_conversion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.currency_conversion_.IsDefault()) {
    _impl_.currency_conversion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamExoticIndicesServiceResponseComposition.currency_conversion)
}

// .google.protobuf.Timestamp ts_event = 7;
inline bool StreamExoticIndicesServiceResponseComposition::_internal_has_ts_event() const {
  return this != internal_default_instance() && _impl_.ts_event_ != nullptr;
}
inline bool StreamExoticIndicesServiceResponseComposition::has_ts_event() const {
  return _internal_has_ts_event();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamExoticIndicesServiceResponseComposition::_internal_ts_event() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.ts_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamExoticIndicesServiceResponseComposition::ts_event() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamExoticIndicesServiceResponseComposition.ts_event)
  return _internal_ts_event();
}
inline void StreamExoticIndicesServiceResponseComposition::unsafe_arena_set_allocated_ts_event(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_event_);
  }
  _impl_.ts_event_ = ts_event;
  if (ts_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamExoticIndicesServiceResponseComposition.ts_event)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamExoticIndicesServiceResponseComposition::release_ts_event() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_event_;
  _impl_.ts_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamExoticIndicesServiceResponseComposition::unsafe_arena_release_ts_event() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamExoticIndicesServiceResponseComposition.ts_event)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_event_;
  _impl_.ts_event_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamExoticIndicesServiceResponseComposition::_internal_mutable_ts_event() {
  
  if (_impl_.ts_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.ts_event_ = p;
  }
  return _impl_.ts_event_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamExoticIndicesServiceResponseComposition::mutable_ts_event() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_ts_event();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamExoticIndicesServiceResponseComposition.ts_event)
  return _msg;
}
inline void StreamExoticIndicesServiceResponseComposition::set_allocated_ts_event(::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_event_);
  }
  if (ts_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_event));
    if (message_arena != submessage_arena) {
      ts_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts_event, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ts_event_ = ts_event;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamExoticIndicesServiceResponseComposition.ts_event)
}

// -------------------------------------------------------------------

// StreamExoticIndicesServiceResponsePair

// string underlying_instrument = 1;
inline void StreamExoticIndicesServiceResponsePair::clear_underlying_instrument() {
  _impl_.underlying_instrument_.ClearToEmpty();
}
inline const std::string& StreamExoticIndicesServiceResponsePair::underlying_instrument() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamExoticIndicesServiceResponsePair.underlying_instrument)
  return _internal_underlying_instrument();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamExoticIndicesServiceResponsePair::set_underlying_instrument(ArgT0&& arg0, ArgT... args) {
 
 _impl_.underlying_instrument_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamExoticIndicesServiceResponsePair.underlying_instrument)
}
inline std::string* StreamExoticIndicesServiceResponsePair::mutable_underlying_instrument() {
  std::string* _s = _internal_mutable_underlying_instrument();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamExoticIndicesServiceResponsePair.underlying_instrument)
  return _s;
}
inline const std::string& StreamExoticIndicesServiceResponsePair::_internal_underlying_instrument() const {
  return _impl_.underlying_instrument_.Get();
}
inline void StreamExoticIndicesServiceResponsePair::_internal_set_underlying_instrument(const std::string& value) {
  
  _impl_.underlying_instrument_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamExoticIndicesServiceResponsePair::_internal_mutable_underlying_instrument() {
  
  return _impl_.underlying_instrument_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamExoticIndicesServiceResponsePair::release_underlying_instrument() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamExoticIndicesServiceResponsePair.underlying_instrument)
  return _impl_.underlying_instrument_.Release();
}
inline void StreamExoticIndicesServiceResponsePair::set_allocated_underlying_instrument(std::string* underlying_instrument) {
  if (underlying_instrument != nullptr) {
    
  } else {
    
  }
  _impl_.underlying_instrument_.SetAllocated(underlying_instrument, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.underlying_instrument_.IsDefault()) {
    _impl_.underlying_instrument_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamExoticIndicesServiceResponsePair.underlying_instrument)
}

// .google.protobuf.DoubleValue underlying_price = 2;
inline bool StreamExoticIndicesServiceResponsePair::_internal_has_underlying_price() const {
  return this != internal_default_instance() && _impl_.underlying_price_ != nullptr;
}
inline bool StreamExoticIndicesServiceResponsePair::has_underlying_price() const {
  return _internal_has_underlying_price();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& StreamExoticIndicesServiceResponsePair::_internal_underlying_price() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.underlying_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& StreamExoticIndicesServiceResponsePair::underlying_price() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamExoticIndicesServiceResponsePair.underlying_price)
  return _internal_underlying_price();
}
inline void StreamExoticIndicesServiceResponsePair::unsafe_arena_set_allocated_underlying_price(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* underlying_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.underlying_price_);
  }
  _impl_.underlying_price_ = underlying_price;
  if (underlying_price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamExoticIndicesServiceResponsePair.underlying_price)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* StreamExoticIndicesServiceResponsePair::release_underlying_price() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.underlying_price_;
  _impl_.underlying_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* StreamExoticIndicesServiceResponsePair::unsafe_arena_release_underlying_price() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamExoticIndicesServiceResponsePair.underlying_price)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.underlying_price_;
  _impl_.underlying_price_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* StreamExoticIndicesServiceResponsePair::_internal_mutable_underlying_price() {
  
  if (_impl_.underlying_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.underlying_price_ = p;
  }
  return _impl_.underlying_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* StreamExoticIndicesServiceResponsePair::mutable_underlying_price() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_underlying_price();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamExoticIndicesServiceResponsePair.underlying_price)
  return _msg;
}
inline void StreamExoticIndicesServiceResponsePair::set_allocated_underlying_price(::PROTOBUF_NAMESPACE_ID::DoubleValue* underlying_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.underlying_price_);
  }
  if (underlying_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(underlying_price));
    if (message_arena != submessage_arena) {
      underlying_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, underlying_price, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.underlying_price_ = underlying_price;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamExoticIndicesServiceResponsePair.underlying_price)
}

// double weighting_factor = 3;
inline void StreamExoticIndicesServiceResponsePair::clear_weighting_factor() {
  _impl_.weighting_factor_ = 0;
}
inline double StreamExoticIndicesServiceResponsePair::_internal_weighting_factor() const {
  return _impl_.weighting_factor_;
}
inline double StreamExoticIndicesServiceResponsePair::weighting_factor() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamExoticIndicesServiceResponsePair.weighting_factor)
  return _internal_weighting_factor();
}
inline void StreamExoticIndicesServiceResponsePair::_internal_set_weighting_factor(double value) {
  
  _impl_.weighting_factor_ = value;
}
inline void StreamExoticIndicesServiceResponsePair::set_weighting_factor(double value) {
  _internal_set_weighting_factor(value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamExoticIndicesServiceResponsePair.weighting_factor)
}

// double capping_factor = 4;
inline void StreamExoticIndicesServiceResponsePair::clear_capping_factor() {
  _impl_.capping_factor_ = 0;
}
inline double StreamExoticIndicesServiceResponsePair::_internal_capping_factor() const {
  return _impl_.capping_factor_;
}
inline double StreamExoticIndicesServiceResponsePair::capping_factor() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamExoticIndicesServiceResponsePair.capping_factor)
  return _internal_capping_factor();
}
inline void StreamExoticIndicesServiceResponsePair::_internal_set_capping_factor(double value) {
  
  _impl_.capping_factor_ = value;
}
inline void StreamExoticIndicesServiceResponsePair::set_capping_factor(double value) {
  _internal_set_capping_factor(value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamExoticIndicesServiceResponsePair.capping_factor)
}

// double currency_conversion_factor = 5;
inline void StreamExoticIndicesServiceResponsePair::clear_currency_conversion_factor() {
  _impl_.currency_conversion_factor_ = 0;
}
inline double StreamExoticIndicesServiceResponsePair::_internal_currency_conversion_factor() const {
  return _impl_.currency_conversion_factor_;
}
inline double StreamExoticIndicesServiceResponsePair::currency_conversion_factor() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamExoticIndicesServiceResponsePair.currency_conversion_factor)
  return _internal_currency_conversion_factor();
}
inline void StreamExoticIndicesServiceResponsePair::_internal_set_currency_conversion_factor(double value) {
  
  _impl_.currency_conversion_factor_ = value;
}
inline void StreamExoticIndicesServiceResponsePair::set_currency_conversion_factor(double value) {
  _internal_set_currency_conversion_factor(value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamExoticIndicesServiceResponsePair.currency_conversion_factor)
}

// .kaikosdk.StreamExoticIndicesPosition position = 6;
inline void StreamExoticIndicesServiceResponsePair::clear_position() {
  _impl_.position_ = 0;
}
inline ::kaikosdk::StreamExoticIndicesPosition StreamExoticIndicesServiceResponsePair::_internal_position() const {
  return static_cast< ::kaikosdk::StreamExoticIndicesPosition >(_impl_.position_);
}
inline ::kaikosdk::StreamExoticIndicesPosition StreamExoticIndicesServiceResponsePair::position() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamExoticIndicesServiceResponsePair.position)
  return _internal_position();
}
inline void StreamExoticIndicesServiceResponsePair::_internal_set_position(::kaikosdk::StreamExoticIndicesPosition value) {
  
  _impl_.position_ = value;
}
inline void StreamExoticIndicesServiceResponsePair::set_position(::kaikosdk::StreamExoticIndicesPosition value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamExoticIndicesServiceResponsePair.position)
}

// -------------------------------------------------------------------

// StreamExoticIndicesServiceResponsePrices

// double index_value = 1;
inline void StreamExoticIndicesServiceResponsePrices::clear_index_value() {
  _impl_.index_value_ = 0;
}
inline double StreamExoticIndicesServiceResponsePrices::_internal_index_value() const {
  return _impl_.index_value_;
}
inline double StreamExoticIndicesServiceResponsePrices::index_value() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamExoticIndicesServiceResponsePrices.index_value)
  return _internal_index_value();
}
inline void StreamExoticIndicesServiceResponsePrices::_internal_set_index_value(double value) {
  
  _impl_.index_value_ = value;
}
inline void StreamExoticIndicesServiceResponsePrices::set_index_value(double value) {
  _internal_set_index_value(value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamExoticIndicesServiceResponsePrices.index_value)
}

// double divisor = 2;
inline void StreamExoticIndicesServiceResponsePrices::clear_divisor() {
  _impl_.divisor_ = 0;
}
inline double StreamExoticIndicesServiceResponsePrices::_internal_divisor() const {
  return _impl_.divisor_;
}
inline double StreamExoticIndicesServiceResponsePrices::divisor() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamExoticIndicesServiceResponsePrices.divisor)
  return _internal_divisor();
}
inline void StreamExoticIndicesServiceResponsePrices::_internal_set_divisor(double value) {
  
  _impl_.divisor_ = value;
}
inline void StreamExoticIndicesServiceResponsePrices::set_divisor(double value) {
  _internal_set_divisor(value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamExoticIndicesServiceResponsePrices.divisor)
}

// repeated .kaikosdk.StreamExoticIndicesServiceResponsePair pairs = 3;
inline int StreamExoticIndicesServiceResponsePrices::_internal_pairs_size() const {
  return _impl_.pairs_.size();
}
inline int StreamExoticIndicesServiceResponsePrices::pairs_size() const {
  return _internal_pairs_size();
}
inline void StreamExoticIndicesServiceResponsePrices::clear_pairs() {
  _impl_.pairs_.Clear();
}
inline ::kaikosdk::StreamExoticIndicesServiceResponsePair* StreamExoticIndicesServiceResponsePrices::mutable_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamExoticIndicesServiceResponsePrices.pairs)
  return _impl_.pairs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::StreamExoticIndicesServiceResponsePair >*
StreamExoticIndicesServiceResponsePrices::mutable_pairs() {
  // @@protoc_insertion_point(field_mutable_list:kaikosdk.StreamExoticIndicesServiceResponsePrices.pairs)
  return &_impl_.pairs_;
}
inline const ::kaikosdk::StreamExoticIndicesServiceResponsePair& StreamExoticIndicesServiceResponsePrices::_internal_pairs(int index) const {
  return _impl_.pairs_.Get(index);
}
inline const ::kaikosdk::StreamExoticIndicesServiceResponsePair& StreamExoticIndicesServiceResponsePrices::pairs(int index) const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamExoticIndicesServiceResponsePrices.pairs)
  return _internal_pairs(index);
}
inline ::kaikosdk::StreamExoticIndicesServiceResponsePair* StreamExoticIndicesServiceResponsePrices::_internal_add_pairs() {
  return _impl_.pairs_.Add();
}
inline ::kaikosdk::StreamExoticIndicesServiceResponsePair* StreamExoticIndicesServiceResponsePrices::add_pairs() {
  ::kaikosdk::StreamExoticIndicesServiceResponsePair* _add = _internal_add_pairs();
  // @@protoc_insertion_point(field_add:kaikosdk.StreamExoticIndicesServiceResponsePrices.pairs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::StreamExoticIndicesServiceResponsePair >&
StreamExoticIndicesServiceResponsePrices::pairs() const {
  // @@protoc_insertion_point(field_list:kaikosdk.StreamExoticIndicesServiceResponsePrices.pairs)
  return _impl_.pairs_;
}

// -------------------------------------------------------------------

// StreamExoticIndicesServiceResponseV1

// .kaikosdk.StreamIndexCommodity commodity = 1;
inline void StreamExoticIndicesServiceResponseV1::clear_commodity() {
  _impl_.commodity_ = 0;
}
inline ::kaikosdk::StreamIndexCommodity StreamExoticIndicesServiceResponseV1::_internal_commodity() const {
  return static_cast< ::kaikosdk::StreamIndexCommodity >(_impl_.commodity_);
}
inline ::kaikosdk::StreamIndexCommodity StreamExoticIndicesServiceResponseV1::commodity() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamExoticIndicesServiceResponseV1.commodity)
  return _internal_commodity();
}
inline void StreamExoticIndicesServiceResponseV1::_internal_set_commodity(::kaikosdk::StreamIndexCommodity value) {
  
  _impl_.commodity_ = value;
}
inline void StreamExoticIndicesServiceResponseV1::set_commodity(::kaikosdk::StreamIndexCommodity value) {
  _internal_set_commodity(value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamExoticIndicesServiceResponseV1.commodity)
}

// string index_code = 2;
inline void StreamExoticIndicesServiceResponseV1::clear_index_code() {
  _impl_.index_code_.ClearToEmpty();
}
inline const std::string& StreamExoticIndicesServiceResponseV1::index_code() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamExoticIndicesServiceResponseV1.index_code)
  return _internal_index_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamExoticIndicesServiceResponseV1::set_index_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.index_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamExoticIndicesServiceResponseV1.index_code)
}
inline std::string* StreamExoticIndicesServiceResponseV1::mutable_index_code() {
  std::string* _s = _internal_mutable_index_code();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamExoticIndicesServiceResponseV1.index_code)
  return _s;
}
inline const std::string& StreamExoticIndicesServiceResponseV1::_internal_index_code() const {
  return _impl_.index_code_.Get();
}
inline void StreamExoticIndicesServiceResponseV1::_internal_set_index_code(const std::string& value) {
  
  _impl_.index_code_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamExoticIndicesServiceResponseV1::_internal_mutable_index_code() {
  
  return _impl_.index_code_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamExoticIndicesServiceResponseV1::release_index_code() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamExoticIndicesServiceResponseV1.index_code)
  return _impl_.index_code_.Release();
}
inline void StreamExoticIndicesServiceResponseV1::set_allocated_index_code(std::string* index_code) {
  if (index_code != nullptr) {
    
  } else {
    
  }
  _impl_.index_code_.SetAllocated(index_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.index_code_.IsDefault()) {
    _impl_.index_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamExoticIndicesServiceResponseV1.index_code)
}

// .kaikosdk.DataInterval interval = 3;
inline bool StreamExoticIndicesServiceResponseV1::_internal_has_interval() const {
  return this != internal_default_instance() && _impl_.interval_ != nullptr;
}
inline bool StreamExoticIndicesServiceResponseV1::has_interval() const {
  return _internal_has_interval();
}
inline const ::kaikosdk::DataInterval& StreamExoticIndicesServiceResponseV1::_internal_interval() const {
  const ::kaikosdk::DataInterval* p = _impl_.interval_;
  return p != nullptr ? *p : reinterpret_cast<const ::kaikosdk::DataInterval&>(
      ::kaikosdk::_DataInterval_default_instance_);
}
inline const ::kaikosdk::DataInterval& StreamExoticIndicesServiceResponseV1::interval() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamExoticIndicesServiceResponseV1.interval)
  return _internal_interval();
}
inline void StreamExoticIndicesServiceResponseV1::unsafe_arena_set_allocated_interval(
    ::kaikosdk::DataInterval* interval) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_);
  }
  _impl_.interval_ = interval;
  if (interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamExoticIndicesServiceResponseV1.interval)
}
inline ::kaikosdk::DataInterval* StreamExoticIndicesServiceResponseV1::release_interval() {
  
  ::kaikosdk::DataInterval* temp = _impl_.interval_;
  _impl_.interval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kaikosdk::DataInterval* StreamExoticIndicesServiceResponseV1::unsafe_arena_release_interval() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamExoticIndicesServiceResponseV1.interval)
  
  ::kaikosdk::DataInterval* temp = _impl_.interval_;
  _impl_.interval_ = nullptr;
  return temp;
}
inline ::kaikosdk::DataInterval* StreamExoticIndicesServiceResponseV1::_internal_mutable_interval() {
  
  if (_impl_.interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::kaikosdk::DataInterval>(GetArenaForAllocation());
    _impl_.interval_ = p;
  }
  return _impl_.interval_;
}
inline ::kaikosdk::DataInterval* StreamExoticIndicesServiceResponseV1::mutable_interval() {
  ::kaikosdk::DataInterval* _msg = _internal_mutable_interval();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamExoticIndicesServiceResponseV1.interval)
  return _msg;
}
inline void StreamExoticIndicesServiceResponseV1::set_allocated_interval(::kaikosdk::DataInterval* interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_);
  }
  if (interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval));
    if (message_arena != submessage_arena) {
      interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.interval_ = interval;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamExoticIndicesServiceResponseV1.interval)
}

// string main_quote = 4;
inline void StreamExoticIndicesServiceResponseV1::clear_main_quote() {
  _impl_.main_quote_.ClearToEmpty();
}
inline const std::string& StreamExoticIndicesServiceResponseV1::main_quote() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamExoticIndicesServiceResponseV1.main_quote)
  return _internal_main_quote();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamExoticIndicesServiceResponseV1::set_main_quote(ArgT0&& arg0, ArgT... args) {
 
 _impl_.main_quote_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamExoticIndicesServiceResponseV1.main_quote)
}
inline std::string* StreamExoticIndicesServiceResponseV1::mutable_main_quote() {
  std::string* _s = _internal_mutable_main_quote();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamExoticIndicesServiceResponseV1.main_quote)
  return _s;
}
inline const std::string& StreamExoticIndicesServiceResponseV1::_internal_main_quote() const {
  return _impl_.main_quote_.Get();
}
inline void StreamExoticIndicesServiceResponseV1::_internal_set_main_quote(const std::string& value) {
  
  _impl_.main_quote_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamExoticIndicesServiceResponseV1::_internal_mutable_main_quote() {
  
  return _impl_.main_quote_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamExoticIndicesServiceResponseV1::release_main_quote() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamExoticIndicesServiceResponseV1.main_quote)
  return _impl_.main_quote_.Release();
}
inline void StreamExoticIndicesServiceResponseV1::set_allocated_main_quote(std::string* main_quote) {
  if (main_quote != nullptr) {
    
  } else {
    
  }
  _impl_.main_quote_.SetAllocated(main_quote, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.main_quote_.IsDefault()) {
    _impl_.main_quote_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamExoticIndicesServiceResponseV1.main_quote)
}

// repeated .kaikosdk.StreamExoticIndicesServiceResponseComposition compositions = 5;
inline int StreamExoticIndicesServiceResponseV1::_internal_compositions_size() const {
  return _impl_.compositions_.size();
}
inline int StreamExoticIndicesServiceResponseV1::compositions_size() const {
  return _internal_compositions_size();
}
inline void StreamExoticIndicesServiceResponseV1::clear_compositions() {
  _impl_.compositions_.Clear();
}
inline ::kaikosdk::StreamExoticIndicesServiceResponseComposition* StreamExoticIndicesServiceResponseV1::mutable_compositions(int index) {
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamExoticIndicesServiceResponseV1.compositions)
  return _impl_.compositions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::StreamExoticIndicesServiceResponseComposition >*
StreamExoticIndicesServiceResponseV1::mutable_compositions() {
  // @@protoc_insertion_point(field_mutable_list:kaikosdk.StreamExoticIndicesServiceResponseV1.compositions)
  return &_impl_.compositions_;
}
inline const ::kaikosdk::StreamExoticIndicesServiceResponseComposition& StreamExoticIndicesServiceResponseV1::_internal_compositions(int index) const {
  return _impl_.compositions_.Get(index);
}
inline const ::kaikosdk::StreamExoticIndicesServiceResponseComposition& StreamExoticIndicesServiceResponseV1::compositions(int index) const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamExoticIndicesServiceResponseV1.compositions)
  return _internal_compositions(index);
}
inline ::kaikosdk::StreamExoticIndicesServiceResponseComposition* StreamExoticIndicesServiceResponseV1::_internal_add_compositions() {
  return _impl_.compositions_.Add();
}
inline ::kaikosdk::StreamExoticIndicesServiceResponseComposition* StreamExoticIndicesServiceResponseV1::add_compositions() {
  ::kaikosdk::StreamExoticIndicesServiceResponseComposition* _add = _internal_add_compositions();
  // @@protoc_insertion_point(field_add:kaikosdk.StreamExoticIndicesServiceResponseV1.compositions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::StreamExoticIndicesServiceResponseComposition >&
StreamExoticIndicesServiceResponseV1::compositions() const {
  // @@protoc_insertion_point(field_list:kaikosdk.StreamExoticIndicesServiceResponseV1.compositions)
  return _impl_.compositions_;
}

// .kaikosdk.StreamExoticIndicesServiceResponsePrices price = 6;
inline bool StreamExoticIndicesServiceResponseV1::_internal_has_price() const {
  return this != internal_default_instance() && _impl_.price_ != nullptr;
}
inline bool StreamExoticIndicesServiceResponseV1::has_price() const {
  return _internal_has_price();
}
inline void StreamExoticIndicesServiceResponseV1::clear_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
}
inline const ::kaikosdk::StreamExoticIndicesServiceResponsePrices& StreamExoticIndicesServiceResponseV1::_internal_price() const {
  const ::kaikosdk::StreamExoticIndicesServiceResponsePrices* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::kaikosdk::StreamExoticIndicesServiceResponsePrices&>(
      ::kaikosdk::_StreamExoticIndicesServiceResponsePrices_default_instance_);
}
inline const ::kaikosdk::StreamExoticIndicesServiceResponsePrices& StreamExoticIndicesServiceResponseV1::price() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamExoticIndicesServiceResponseV1.price)
  return _internal_price();
}
inline void StreamExoticIndicesServiceResponseV1::unsafe_arena_set_allocated_price(
    ::kaikosdk::StreamExoticIndicesServiceResponsePrices* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = price;
  if (price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamExoticIndicesServiceResponseV1.price)
}
inline ::kaikosdk::StreamExoticIndicesServiceResponsePrices* StreamExoticIndicesServiceResponseV1::release_price() {
  
  ::kaikosdk::StreamExoticIndicesServiceResponsePrices* temp = _impl_.price_;
  _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kaikosdk::StreamExoticIndicesServiceResponsePrices* StreamExoticIndicesServiceResponseV1::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamExoticIndicesServiceResponseV1.price)
  
  ::kaikosdk::StreamExoticIndicesServiceResponsePrices* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::kaikosdk::StreamExoticIndicesServiceResponsePrices* StreamExoticIndicesServiceResponseV1::_internal_mutable_price() {
  
  if (_impl_.price_ == nullptr) {
    auto* p = CreateMaybeMessage<::kaikosdk::StreamExoticIndicesServiceResponsePrices>(GetArenaForAllocation());
    _impl_.price_ = p;
  }
  return _impl_.price_;
}
inline ::kaikosdk::StreamExoticIndicesServiceResponsePrices* StreamExoticIndicesServiceResponseV1::mutable_price() {
  ::kaikosdk::StreamExoticIndicesServiceResponsePrices* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamExoticIndicesServiceResponseV1.price)
  return _msg;
}
inline void StreamExoticIndicesServiceResponseV1::set_allocated_price(::kaikosdk::StreamExoticIndicesServiceResponsePrices* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.price_;
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(price);
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamExoticIndicesServiceResponseV1.price)
}

// .google.protobuf.Timestamp ts_event = 7;
inline bool StreamExoticIndicesServiceResponseV1::_internal_has_ts_event() const {
  return this != internal_default_instance() && _impl_.ts_event_ != nullptr;
}
inline bool StreamExoticIndicesServiceResponseV1::has_ts_event() const {
  return _internal_has_ts_event();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamExoticIndicesServiceResponseV1::_internal_ts_event() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.ts_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamExoticIndicesServiceResponseV1::ts_event() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamExoticIndicesServiceResponseV1.ts_event)
  return _internal_ts_event();
}
inline void StreamExoticIndicesServiceResponseV1::unsafe_arena_set_allocated_ts_event(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_event_);
  }
  _impl_.ts_event_ = ts_event;
  if (ts_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamExoticIndicesServiceResponseV1.ts_event)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamExoticIndicesServiceResponseV1::release_ts_event() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_event_;
  _impl_.ts_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamExoticIndicesServiceResponseV1::unsafe_arena_release_ts_event() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamExoticIndicesServiceResponseV1.ts_event)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_event_;
  _impl_.ts_event_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamExoticIndicesServiceResponseV1::_internal_mutable_ts_event() {
  
  if (_impl_.ts_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.ts_event_ = p;
  }
  return _impl_.ts_event_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamExoticIndicesServiceResponseV1::mutable_ts_event() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_ts_event();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamExoticIndicesServiceResponseV1.ts_event)
  return _msg;
}
inline void StreamExoticIndicesServiceResponseV1::set_allocated_ts_event(::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_event_);
  }
  if (ts_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_event));
    if (message_arena != submessage_arena) {
      ts_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts_event, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ts_event_ = ts_event;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamExoticIndicesServiceResponseV1.ts_event)
}

// .google.protobuf.Timestamp ts_compute = 8;
inline bool StreamExoticIndicesServiceResponseV1::_internal_has_ts_compute() const {
  return this != internal_default_instance() && _impl_.ts_compute_ != nullptr;
}
inline bool StreamExoticIndicesServiceResponseV1::has_ts_compute() const {
  return _internal_has_ts_compute();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamExoticIndicesServiceResponseV1::_internal_ts_compute() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.ts_compute_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamExoticIndicesServiceResponseV1::ts_compute() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamExoticIndicesServiceResponseV1.ts_compute)
  return _internal_ts_compute();
}
inline void StreamExoticIndicesServiceResponseV1::unsafe_arena_set_allocated_ts_compute(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_compute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_compute_);
  }
  _impl_.ts_compute_ = ts_compute;
  if (ts_compute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamExoticIndicesServiceResponseV1.ts_compute)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamExoticIndicesServiceResponseV1::release_ts_compute() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_compute_;
  _impl_.ts_compute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamExoticIndicesServiceResponseV1::unsafe_arena_release_ts_compute() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamExoticIndicesServiceResponseV1.ts_compute)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_compute_;
  _impl_.ts_compute_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamExoticIndicesServiceResponseV1::_internal_mutable_ts_compute() {
  
  if (_impl_.ts_compute_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.ts_compute_ = p;
  }
  return _impl_.ts_compute_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamExoticIndicesServiceResponseV1::mutable_ts_compute() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_ts_compute();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamExoticIndicesServiceResponseV1.ts_compute)
  return _msg;
}
inline void StreamExoticIndicesServiceResponseV1::set_allocated_ts_compute(::PROTOBUF_NAMESPACE_ID::Timestamp* ts_compute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_compute_);
  }
  if (ts_compute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_compute));
    if (message_arena != submessage_arena) {
      ts_compute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts_compute, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ts_compute_ = ts_compute;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamExoticIndicesServiceResponseV1.ts_compute)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kaikosdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::kaikosdk::StreamExoticIndicesPosition> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kaikosdk::StreamExoticIndicesPosition>() {
  return ::kaikosdk::StreamExoticIndicesPosition_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto
