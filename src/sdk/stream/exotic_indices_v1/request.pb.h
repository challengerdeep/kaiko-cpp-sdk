// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk/stream/exotic_indices_v1/request.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2fexotic_5findices_5fv1_2frequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2fexotic_5findices_5fv1_2frequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "sdk/core/data_interval.pb.h"
#include "sdk/stream/index_v1/commodity.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sdk_2fstream_2fexotic_5findices_5fv1_2frequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sdk_2fstream_2fexotic_5findices_5fv1_2frequest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sdk_2fstream_2fexotic_5findices_5fv1_2frequest_2eproto;
namespace kaikosdk {
class StreamExoticIndicesServiceRequestV1;
struct StreamExoticIndicesServiceRequestV1DefaultTypeInternal;
extern StreamExoticIndicesServiceRequestV1DefaultTypeInternal _StreamExoticIndicesServiceRequestV1_default_instance_;
}  // namespace kaikosdk
PROTOBUF_NAMESPACE_OPEN
template<> ::kaikosdk::StreamExoticIndicesServiceRequestV1* Arena::CreateMaybeMessage<::kaikosdk::StreamExoticIndicesServiceRequestV1>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kaikosdk {

// ===================================================================

class StreamExoticIndicesServiceRequestV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.StreamExoticIndicesServiceRequestV1) */ {
 public:
  inline StreamExoticIndicesServiceRequestV1() : StreamExoticIndicesServiceRequestV1(nullptr) {}
  ~StreamExoticIndicesServiceRequestV1() override;
  explicit PROTOBUF_CONSTEXPR StreamExoticIndicesServiceRequestV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamExoticIndicesServiceRequestV1(const StreamExoticIndicesServiceRequestV1& from);
  StreamExoticIndicesServiceRequestV1(StreamExoticIndicesServiceRequestV1&& from) noexcept
    : StreamExoticIndicesServiceRequestV1() {
    *this = ::std::move(from);
  }

  inline StreamExoticIndicesServiceRequestV1& operator=(const StreamExoticIndicesServiceRequestV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamExoticIndicesServiceRequestV1& operator=(StreamExoticIndicesServiceRequestV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamExoticIndicesServiceRequestV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamExoticIndicesServiceRequestV1* internal_default_instance() {
    return reinterpret_cast<const StreamExoticIndicesServiceRequestV1*>(
               &_StreamExoticIndicesServiceRequestV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StreamExoticIndicesServiceRequestV1& a, StreamExoticIndicesServiceRequestV1& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamExoticIndicesServiceRequestV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamExoticIndicesServiceRequestV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamExoticIndicesServiceRequestV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamExoticIndicesServiceRequestV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamExoticIndicesServiceRequestV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamExoticIndicesServiceRequestV1& from) {
    StreamExoticIndicesServiceRequestV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamExoticIndicesServiceRequestV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.StreamExoticIndicesServiceRequestV1";
  }
  protected:
  explicit StreamExoticIndicesServiceRequestV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommoditiesFieldNumber = 2,
    kIndexCodeFieldNumber = 1,
    kIntervalFieldNumber = 3,
  };
  // repeated .kaikosdk.StreamIndexCommodity commodities = 2;
  int commodities_size() const;
  private:
  int _internal_commodities_size() const;
  public:
  void clear_commodities();
  private:
  ::kaikosdk::StreamIndexCommodity _internal_commodities(int index) const;
  void _internal_add_commodities(::kaikosdk::StreamIndexCommodity value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_commodities();
  public:
  ::kaikosdk::StreamIndexCommodity commodities(int index) const;
  void set_commodities(int index, ::kaikosdk::StreamIndexCommodity value);
  void add_commodities(::kaikosdk::StreamIndexCommodity value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& commodities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_commodities();

  // string index_code = 1;
  void clear_index_code();
  const std::string& index_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_code();
  PROTOBUF_NODISCARD std::string* release_index_code();
  void set_allocated_index_code(std::string* index_code);
  private:
  const std::string& _internal_index_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_code(const std::string& value);
  std::string* _internal_mutable_index_code();
  public:

  // .kaikosdk.DataInterval interval = 3;
  bool has_interval() const;
  private:
  bool _internal_has_interval() const;
  public:
  void clear_interval();
  const ::kaikosdk::DataInterval& interval() const;
  PROTOBUF_NODISCARD ::kaikosdk::DataInterval* release_interval();
  ::kaikosdk::DataInterval* mutable_interval();
  void set_allocated_interval(::kaikosdk::DataInterval* interval);
  private:
  const ::kaikosdk::DataInterval& _internal_interval() const;
  ::kaikosdk::DataInterval* _internal_mutable_interval();
  public:
  void unsafe_arena_set_allocated_interval(
      ::kaikosdk::DataInterval* interval);
  ::kaikosdk::DataInterval* unsafe_arena_release_interval();

  // @@protoc_insertion_point(class_scope:kaikosdk.StreamExoticIndicesServiceRequestV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> commodities_;
    mutable std::atomic<int> _commodities_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_code_;
    ::kaikosdk::DataInterval* interval_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2fstream_2fexotic_5findices_5fv1_2frequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StreamExoticIndicesServiceRequestV1

// string index_code = 1;
inline void StreamExoticIndicesServiceRequestV1::clear_index_code() {
  _impl_.index_code_.ClearToEmpty();
}
inline const std::string& StreamExoticIndicesServiceRequestV1::index_code() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamExoticIndicesServiceRequestV1.index_code)
  return _internal_index_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamExoticIndicesServiceRequestV1::set_index_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.index_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamExoticIndicesServiceRequestV1.index_code)
}
inline std::string* StreamExoticIndicesServiceRequestV1::mutable_index_code() {
  std::string* _s = _internal_mutable_index_code();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamExoticIndicesServiceRequestV1.index_code)
  return _s;
}
inline const std::string& StreamExoticIndicesServiceRequestV1::_internal_index_code() const {
  return _impl_.index_code_.Get();
}
inline void StreamExoticIndicesServiceRequestV1::_internal_set_index_code(const std::string& value) {
  
  _impl_.index_code_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamExoticIndicesServiceRequestV1::_internal_mutable_index_code() {
  
  return _impl_.index_code_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamExoticIndicesServiceRequestV1::release_index_code() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamExoticIndicesServiceRequestV1.index_code)
  return _impl_.index_code_.Release();
}
inline void StreamExoticIndicesServiceRequestV1::set_allocated_index_code(std::string* index_code) {
  if (index_code != nullptr) {
    
  } else {
    
  }
  _impl_.index_code_.SetAllocated(index_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.index_code_.IsDefault()) {
    _impl_.index_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamExoticIndicesServiceRequestV1.index_code)
}

// repeated .kaikosdk.StreamIndexCommodity commodities = 2;
inline int StreamExoticIndicesServiceRequestV1::_internal_commodities_size() const {
  return _impl_.commodities_.size();
}
inline int StreamExoticIndicesServiceRequestV1::commodities_size() const {
  return _internal_commodities_size();
}
inline void StreamExoticIndicesServiceRequestV1::clear_commodities() {
  _impl_.commodities_.Clear();
}
inline ::kaikosdk::StreamIndexCommodity StreamExoticIndicesServiceRequestV1::_internal_commodities(int index) const {
  return static_cast< ::kaikosdk::StreamIndexCommodity >(_impl_.commodities_.Get(index));
}
inline ::kaikosdk::StreamIndexCommodity StreamExoticIndicesServiceRequestV1::commodities(int index) const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamExoticIndicesServiceRequestV1.commodities)
  return _internal_commodities(index);
}
inline void StreamExoticIndicesServiceRequestV1::set_commodities(int index, ::kaikosdk::StreamIndexCommodity value) {
  _impl_.commodities_.Set(index, value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamExoticIndicesServiceRequestV1.commodities)
}
inline void StreamExoticIndicesServiceRequestV1::_internal_add_commodities(::kaikosdk::StreamIndexCommodity value) {
  _impl_.commodities_.Add(value);
}
inline void StreamExoticIndicesServiceRequestV1::add_commodities(::kaikosdk::StreamIndexCommodity value) {
  _internal_add_commodities(value);
  // @@protoc_insertion_point(field_add:kaikosdk.StreamExoticIndicesServiceRequestV1.commodities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
StreamExoticIndicesServiceRequestV1::commodities() const {
  // @@protoc_insertion_point(field_list:kaikosdk.StreamExoticIndicesServiceRequestV1.commodities)
  return _impl_.commodities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
StreamExoticIndicesServiceRequestV1::_internal_mutable_commodities() {
  return &_impl_.commodities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
StreamExoticIndicesServiceRequestV1::mutable_commodities() {
  // @@protoc_insertion_point(field_mutable_list:kaikosdk.StreamExoticIndicesServiceRequestV1.commodities)
  return _internal_mutable_commodities();
}

// .kaikosdk.DataInterval interval = 3;
inline bool StreamExoticIndicesServiceRequestV1::_internal_has_interval() const {
  return this != internal_default_instance() && _impl_.interval_ != nullptr;
}
inline bool StreamExoticIndicesServiceRequestV1::has_interval() const {
  return _internal_has_interval();
}
inline const ::kaikosdk::DataInterval& StreamExoticIndicesServiceRequestV1::_internal_interval() const {
  const ::kaikosdk::DataInterval* p = _impl_.interval_;
  return p != nullptr ? *p : reinterpret_cast<const ::kaikosdk::DataInterval&>(
      ::kaikosdk::_DataInterval_default_instance_);
}
inline const ::kaikosdk::DataInterval& StreamExoticIndicesServiceRequestV1::interval() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamExoticIndicesServiceRequestV1.interval)
  return _internal_interval();
}
inline void StreamExoticIndicesServiceRequestV1::unsafe_arena_set_allocated_interval(
    ::kaikosdk::DataInterval* interval) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_);
  }
  _impl_.interval_ = interval;
  if (interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamExoticIndicesServiceRequestV1.interval)
}
inline ::kaikosdk::DataInterval* StreamExoticIndicesServiceRequestV1::release_interval() {
  
  ::kaikosdk::DataInterval* temp = _impl_.interval_;
  _impl_.interval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kaikosdk::DataInterval* StreamExoticIndicesServiceRequestV1::unsafe_arena_release_interval() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamExoticIndicesServiceRequestV1.interval)
  
  ::kaikosdk::DataInterval* temp = _impl_.interval_;
  _impl_.interval_ = nullptr;
  return temp;
}
inline ::kaikosdk::DataInterval* StreamExoticIndicesServiceRequestV1::_internal_mutable_interval() {
  
  if (_impl_.interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::kaikosdk::DataInterval>(GetArenaForAllocation());
    _impl_.interval_ = p;
  }
  return _impl_.interval_;
}
inline ::kaikosdk::DataInterval* StreamExoticIndicesServiceRequestV1::mutable_interval() {
  ::kaikosdk::DataInterval* _msg = _internal_mutable_interval();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamExoticIndicesServiceRequestV1.interval)
  return _msg;
}
inline void StreamExoticIndicesServiceRequestV1::set_allocated_interval(::kaikosdk::DataInterval* interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_);
  }
  if (interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval));
    if (message_arena != submessage_arena) {
      interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.interval_ = interval;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamExoticIndicesServiceRequestV1.interval)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace kaikosdk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2fexotic_5findices_5fv1_2frequest_2eproto
