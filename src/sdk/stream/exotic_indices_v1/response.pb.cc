// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk/stream/exotic_indices_v1/response.proto

#include "sdk/stream/exotic_indices_v1/response.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace kaikosdk {
PROTOBUF_CONSTEXPR StreamExoticIndicesServiceResponseComposition::StreamExoticIndicesServiceResponseComposition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.underlying_instrument_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.base_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.quote_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.currency_conversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ts_event_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamExoticIndicesServiceResponseCompositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamExoticIndicesServiceResponseCompositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamExoticIndicesServiceResponseCompositionDefaultTypeInternal() {}
  union {
    StreamExoticIndicesServiceResponseComposition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamExoticIndicesServiceResponseCompositionDefaultTypeInternal _StreamExoticIndicesServiceResponseComposition_default_instance_;
PROTOBUF_CONSTEXPR StreamExoticIndicesServiceResponsePair::StreamExoticIndicesServiceResponsePair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.underlying_instrument_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.underlying_price_)*/nullptr
  , /*decltype(_impl_.weighting_factor_)*/0
  , /*decltype(_impl_.capping_factor_)*/0
  , /*decltype(_impl_.currency_conversion_factor_)*/0
  , /*decltype(_impl_.position_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamExoticIndicesServiceResponsePairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamExoticIndicesServiceResponsePairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamExoticIndicesServiceResponsePairDefaultTypeInternal() {}
  union {
    StreamExoticIndicesServiceResponsePair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamExoticIndicesServiceResponsePairDefaultTypeInternal _StreamExoticIndicesServiceResponsePair_default_instance_;
PROTOBUF_CONSTEXPR StreamExoticIndicesServiceResponsePrices::StreamExoticIndicesServiceResponsePrices(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pairs_)*/{}
  , /*decltype(_impl_.index_value_)*/0
  , /*decltype(_impl_.divisor_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamExoticIndicesServiceResponsePricesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamExoticIndicesServiceResponsePricesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamExoticIndicesServiceResponsePricesDefaultTypeInternal() {}
  union {
    StreamExoticIndicesServiceResponsePrices _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamExoticIndicesServiceResponsePricesDefaultTypeInternal _StreamExoticIndicesServiceResponsePrices_default_instance_;
PROTOBUF_CONSTEXPR StreamExoticIndicesServiceResponseV1::StreamExoticIndicesServiceResponseV1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.compositions_)*/{}
  , /*decltype(_impl_.index_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.main_quote_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.interval_)*/nullptr
  , /*decltype(_impl_.price_)*/nullptr
  , /*decltype(_impl_.ts_event_)*/nullptr
  , /*decltype(_impl_.ts_compute_)*/nullptr
  , /*decltype(_impl_.commodity_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamExoticIndicesServiceResponseV1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamExoticIndicesServiceResponseV1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamExoticIndicesServiceResponseV1DefaultTypeInternal() {}
  union {
    StreamExoticIndicesServiceResponseV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamExoticIndicesServiceResponseV1DefaultTypeInternal _StreamExoticIndicesServiceResponseV1_default_instance_;
}  // namespace kaikosdk
static ::_pb::Metadata file_level_metadata_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto = nullptr;

const uint32_t TableStruct_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamExoticIndicesServiceResponseComposition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamExoticIndicesServiceResponseComposition, _impl_.underlying_instrument_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamExoticIndicesServiceResponseComposition, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamExoticIndicesServiceResponseComposition, _impl_.quote_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamExoticIndicesServiceResponseComposition, _impl_.currency_conversion_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamExoticIndicesServiceResponseComposition, _impl_.ts_event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamExoticIndicesServiceResponsePair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamExoticIndicesServiceResponsePair, _impl_.underlying_instrument_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamExoticIndicesServiceResponsePair, _impl_.underlying_price_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamExoticIndicesServiceResponsePair, _impl_.weighting_factor_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamExoticIndicesServiceResponsePair, _impl_.capping_factor_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamExoticIndicesServiceResponsePair, _impl_.currency_conversion_factor_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamExoticIndicesServiceResponsePair, _impl_.position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamExoticIndicesServiceResponsePrices, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamExoticIndicesServiceResponsePrices, _impl_.index_value_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamExoticIndicesServiceResponsePrices, _impl_.divisor_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamExoticIndicesServiceResponsePrices, _impl_.pairs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamExoticIndicesServiceResponseV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamExoticIndicesServiceResponseV1, _impl_.commodity_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamExoticIndicesServiceResponseV1, _impl_.index_code_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamExoticIndicesServiceResponseV1, _impl_.interval_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamExoticIndicesServiceResponseV1, _impl_.main_quote_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamExoticIndicesServiceResponseV1, _impl_.compositions_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamExoticIndicesServiceResponseV1, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamExoticIndicesServiceResponseV1, _impl_.ts_event_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamExoticIndicesServiceResponseV1, _impl_.ts_compute_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::kaikosdk::StreamExoticIndicesServiceResponseComposition)},
  { 11, -1, -1, sizeof(::kaikosdk::StreamExoticIndicesServiceResponsePair)},
  { 23, -1, -1, sizeof(::kaikosdk::StreamExoticIndicesServiceResponsePrices)},
  { 32, -1, -1, sizeof(::kaikosdk::StreamExoticIndicesServiceResponseV1)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::kaikosdk::_StreamExoticIndicesServiceResponseComposition_default_instance_._instance,
  &::kaikosdk::_StreamExoticIndicesServiceResponsePair_default_instance_._instance,
  &::kaikosdk::_StreamExoticIndicesServiceResponsePrices_default_instance_._instance,
  &::kaikosdk::_StreamExoticIndicesServiceResponseV1_default_instance_._instance,
};

const char descriptor_table_protodef_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+sdk/stream/exotic_indices_v1/response."
  "proto\022\010kaikosdk\032\037google/protobuf/timesta"
  "mp.proto\032\036google/protobuf/wrappers.proto"
  "\032\034sdk/core/data_interval.proto\032#sdk/stre"
  "am/index_v1/commodity.proto\"\266\001\n-StreamEx"
  "oticIndicesServiceResponseComposition\022\035\n"
  "\025underlying_instrument\030\001 \001(\t\022\014\n\004base\030\002 \001"
  "(\t\022\r\n\005quote\030\003 \001(\t\022\033\n\023currency_conversion"
  "\030\006 \001(\t\022,\n\010ts_event\030\007 \001(\0132\032.google.protob"
  "uf.Timestamp\"\216\002\n&StreamExoticIndicesServ"
  "iceResponsePair\022\035\n\025underlying_instrument"
  "\030\001 \001(\t\0226\n\020underlying_price\030\002 \001(\0132\034.googl"
  "e.protobuf.DoubleValue\022\030\n\020weighting_fact"
  "or\030\003 \001(\001\022\026\n\016capping_factor\030\004 \001(\001\022\"\n\032curr"
  "ency_conversion_factor\030\005 \001(\001\0227\n\010position"
  "\030\006 \001(\0162%.kaikosdk.StreamExoticIndicesPos"
  "ition\"\221\001\n(StreamExoticIndicesServiceResp"
  "onsePrices\022\023\n\013index_value\030\001 \001(\001\022\017\n\007divis"
  "or\030\002 \001(\001\022\?\n\005pairs\030\003 \003(\01320.kaikosdk.Strea"
  "mExoticIndicesServiceResponsePair\"\233\003\n$St"
  "reamExoticIndicesServiceResponseV1\0221\n\tco"
  "mmodity\030\001 \001(\0162\036.kaikosdk.StreamIndexComm"
  "odity\022\022\n\nindex_code\030\002 \001(\t\022(\n\010interval\030\003 "
  "\001(\0132\026.kaikosdk.DataInterval\022\022\n\nmain_quot"
  "e\030\004 \001(\t\022M\n\014compositions\030\005 \003(\01327.kaikosdk"
  ".StreamExoticIndicesServiceResponseCompo"
  "sition\022A\n\005price\030\006 \001(\01322.kaikosdk.StreamE"
  "xoticIndicesServiceResponsePrices\022,\n\010ts_"
  "event\030\007 \001(\0132\032.google.protobuf.Timestamp\022"
  ".\n\nts_compute\030\010 \001(\0132\032.google.protobuf.Ti"
  "mestamp*W\n\033StreamExoticIndicesPosition\022\031"
  "\n\025SEIP_POSITION_UNKNOWN\020\000\022\r\n\tSEIP_LONG\020\001"
  "\022\016\n\nSEIP_SHORT\020\002B\232\001\n&com.kaiko.sdk.strea"
  "m.exotic_indices_v1P\001ZLgithub.com/kaikod"
  "ata/kaiko-go-sdk/stream/exotic_indices_v"
  "1;exotic_indices_v1\252\002\037KaikoSdk.Stream.Ex"
  "oticIndicesV1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto_deps[4] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_sdk_2fcore_2fdata_5finterval_2eproto,
  &::descriptor_table_sdk_2fstream_2findex_5fv1_2fcommodity_2eproto,
};
static ::_pbi::once_flag descriptor_table_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto = {
    false, false, 1461, descriptor_table_protodef_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto,
    "sdk/stream/exotic_indices_v1/response.proto",
    &descriptor_table_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto_once, descriptor_table_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto_deps, 4, 4,
    schemas, file_default_instances, TableStruct_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto::offsets,
    file_level_metadata_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto, file_level_enum_descriptors_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto,
    file_level_service_descriptors_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto_getter() {
  return &descriptor_table_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto(&descriptor_table_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto);
namespace kaikosdk {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamExoticIndicesPosition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto);
  return file_level_enum_descriptors_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto[0];
}
bool StreamExoticIndicesPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class StreamExoticIndicesServiceResponseComposition::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts_event(const StreamExoticIndicesServiceResponseComposition* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
StreamExoticIndicesServiceResponseComposition::_Internal::ts_event(const StreamExoticIndicesServiceResponseComposition* msg) {
  return *msg->_impl_.ts_event_;
}
void StreamExoticIndicesServiceResponseComposition::clear_ts_event() {
  if (GetArenaForAllocation() == nullptr && _impl_.ts_event_ != nullptr) {
    delete _impl_.ts_event_;
  }
  _impl_.ts_event_ = nullptr;
}
StreamExoticIndicesServiceResponseComposition::StreamExoticIndicesServiceResponseComposition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaikosdk.StreamExoticIndicesServiceResponseComposition)
}
StreamExoticIndicesServiceResponseComposition::StreamExoticIndicesServiceResponseComposition(const StreamExoticIndicesServiceResponseComposition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamExoticIndicesServiceResponseComposition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.underlying_instrument_){}
    , decltype(_impl_.base_){}
    , decltype(_impl_.quote_){}
    , decltype(_impl_.currency_conversion_){}
    , decltype(_impl_.ts_event_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.underlying_instrument_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.underlying_instrument_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_underlying_instrument().empty()) {
    _this->_impl_.underlying_instrument_.Set(from._internal_underlying_instrument(), 
      _this->GetArenaForAllocation());
  }
  _impl_.base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.base_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base().empty()) {
    _this->_impl_.base_.Set(from._internal_base(), 
      _this->GetArenaForAllocation());
  }
  _impl_.quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.quote_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote().empty()) {
    _this->_impl_.quote_.Set(from._internal_quote(), 
      _this->GetArenaForAllocation());
  }
  _impl_.currency_conversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_conversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_currency_conversion().empty()) {
    _this->_impl_.currency_conversion_.Set(from._internal_currency_conversion(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ts_event()) {
    _this->_impl_.ts_event_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.ts_event_);
  }
  // @@protoc_insertion_point(copy_constructor:kaikosdk.StreamExoticIndicesServiceResponseComposition)
}

inline void StreamExoticIndicesServiceResponseComposition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.underlying_instrument_){}
    , decltype(_impl_.base_){}
    , decltype(_impl_.quote_){}
    , decltype(_impl_.currency_conversion_){}
    , decltype(_impl_.ts_event_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.underlying_instrument_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.underlying_instrument_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.base_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.quote_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.currency_conversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_conversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamExoticIndicesServiceResponseComposition::~StreamExoticIndicesServiceResponseComposition() {
  // @@protoc_insertion_point(destructor:kaikosdk.StreamExoticIndicesServiceResponseComposition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamExoticIndicesServiceResponseComposition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.underlying_instrument_.Destroy();
  _impl_.base_.Destroy();
  _impl_.quote_.Destroy();
  _impl_.currency_conversion_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ts_event_;
}

void StreamExoticIndicesServiceResponseComposition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamExoticIndicesServiceResponseComposition::Clear() {
// @@protoc_insertion_point(message_clear_start:kaikosdk.StreamExoticIndicesServiceResponseComposition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.underlying_instrument_.ClearToEmpty();
  _impl_.base_.ClearToEmpty();
  _impl_.quote_.ClearToEmpty();
  _impl_.currency_conversion_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ts_event_ != nullptr) {
    delete _impl_.ts_event_;
  }
  _impl_.ts_event_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamExoticIndicesServiceResponseComposition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string underlying_instrument = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_underlying_instrument();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamExoticIndicesServiceResponseComposition.underlying_instrument"));
        } else
          goto handle_unusual;
        continue;
      // string base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_base();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamExoticIndicesServiceResponseComposition.base"));
        } else
          goto handle_unusual;
        continue;
      // string quote = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_quote();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamExoticIndicesServiceResponseComposition.quote"));
        } else
          goto handle_unusual;
        continue;
      // string currency_conversion = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_currency_conversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamExoticIndicesServiceResponseComposition.currency_conversion"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp ts_event = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ts_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamExoticIndicesServiceResponseComposition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaikosdk.StreamExoticIndicesServiceResponseComposition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string underlying_instrument = 1;
  if (!this->_internal_underlying_instrument().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_underlying_instrument().data(), static_cast<int>(this->_internal_underlying_instrument().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamExoticIndicesServiceResponseComposition.underlying_instrument");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_underlying_instrument(), target);
  }

  // string base = 2;
  if (!this->_internal_base().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_base().data(), static_cast<int>(this->_internal_base().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamExoticIndicesServiceResponseComposition.base");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_base(), target);
  }

  // string quote = 3;
  if (!this->_internal_quote().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quote().data(), static_cast<int>(this->_internal_quote().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamExoticIndicesServiceResponseComposition.quote");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_quote(), target);
  }

  // string currency_conversion = 6;
  if (!this->_internal_currency_conversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency_conversion().data(), static_cast<int>(this->_internal_currency_conversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamExoticIndicesServiceResponseComposition.currency_conversion");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_currency_conversion(), target);
  }

  // .google.protobuf.Timestamp ts_event = 7;
  if (this->_internal_has_ts_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::ts_event(this),
        _Internal::ts_event(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaikosdk.StreamExoticIndicesServiceResponseComposition)
  return target;
}

size_t StreamExoticIndicesServiceResponseComposition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaikosdk.StreamExoticIndicesServiceResponseComposition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string underlying_instrument = 1;
  if (!this->_internal_underlying_instrument().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_underlying_instrument());
  }

  // string base = 2;
  if (!this->_internal_base().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base());
  }

  // string quote = 3;
  if (!this->_internal_quote().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quote());
  }

  // string currency_conversion = 6;
  if (!this->_internal_currency_conversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency_conversion());
  }

  // .google.protobuf.Timestamp ts_event = 7;
  if (this->_internal_has_ts_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ts_event_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamExoticIndicesServiceResponseComposition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamExoticIndicesServiceResponseComposition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamExoticIndicesServiceResponseComposition::GetClassData() const { return &_class_data_; }


void StreamExoticIndicesServiceResponseComposition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamExoticIndicesServiceResponseComposition*>(&to_msg);
  auto& from = static_cast<const StreamExoticIndicesServiceResponseComposition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaikosdk.StreamExoticIndicesServiceResponseComposition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_underlying_instrument().empty()) {
    _this->_internal_set_underlying_instrument(from._internal_underlying_instrument());
  }
  if (!from._internal_base().empty()) {
    _this->_internal_set_base(from._internal_base());
  }
  if (!from._internal_quote().empty()) {
    _this->_internal_set_quote(from._internal_quote());
  }
  if (!from._internal_currency_conversion().empty()) {
    _this->_internal_set_currency_conversion(from._internal_currency_conversion());
  }
  if (from._internal_has_ts_event()) {
    _this->_internal_mutable_ts_event()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_ts_event());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamExoticIndicesServiceResponseComposition::CopyFrom(const StreamExoticIndicesServiceResponseComposition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaikosdk.StreamExoticIndicesServiceResponseComposition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamExoticIndicesServiceResponseComposition::IsInitialized() const {
  return true;
}

void StreamExoticIndicesServiceResponseComposition::InternalSwap(StreamExoticIndicesServiceResponseComposition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.underlying_instrument_, lhs_arena,
      &other->_impl_.underlying_instrument_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.base_, lhs_arena,
      &other->_impl_.base_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.quote_, lhs_arena,
      &other->_impl_.quote_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_conversion_, lhs_arena,
      &other->_impl_.currency_conversion_, rhs_arena
  );
  swap(_impl_.ts_event_, other->_impl_.ts_event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamExoticIndicesServiceResponseComposition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto_getter, &descriptor_table_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto_once,
      file_level_metadata_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto[0]);
}

// ===================================================================

class StreamExoticIndicesServiceResponsePair::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& underlying_price(const StreamExoticIndicesServiceResponsePair* msg);
};

const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
StreamExoticIndicesServiceResponsePair::_Internal::underlying_price(const StreamExoticIndicesServiceResponsePair* msg) {
  return *msg->_impl_.underlying_price_;
}
void StreamExoticIndicesServiceResponsePair::clear_underlying_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.underlying_price_ != nullptr) {
    delete _impl_.underlying_price_;
  }
  _impl_.underlying_price_ = nullptr;
}
StreamExoticIndicesServiceResponsePair::StreamExoticIndicesServiceResponsePair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaikosdk.StreamExoticIndicesServiceResponsePair)
}
StreamExoticIndicesServiceResponsePair::StreamExoticIndicesServiceResponsePair(const StreamExoticIndicesServiceResponsePair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamExoticIndicesServiceResponsePair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.underlying_instrument_){}
    , decltype(_impl_.underlying_price_){nullptr}
    , decltype(_impl_.weighting_factor_){}
    , decltype(_impl_.capping_factor_){}
    , decltype(_impl_.currency_conversion_factor_){}
    , decltype(_impl_.position_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.underlying_instrument_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.underlying_instrument_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_underlying_instrument().empty()) {
    _this->_impl_.underlying_instrument_.Set(from._internal_underlying_instrument(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_underlying_price()) {
    _this->_impl_.underlying_price_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from._impl_.underlying_price_);
  }
  ::memcpy(&_impl_.weighting_factor_, &from._impl_.weighting_factor_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.position_) -
    reinterpret_cast<char*>(&_impl_.weighting_factor_)) + sizeof(_impl_.position_));
  // @@protoc_insertion_point(copy_constructor:kaikosdk.StreamExoticIndicesServiceResponsePair)
}

inline void StreamExoticIndicesServiceResponsePair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.underlying_instrument_){}
    , decltype(_impl_.underlying_price_){nullptr}
    , decltype(_impl_.weighting_factor_){0}
    , decltype(_impl_.capping_factor_){0}
    , decltype(_impl_.currency_conversion_factor_){0}
    , decltype(_impl_.position_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.underlying_instrument_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.underlying_instrument_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamExoticIndicesServiceResponsePair::~StreamExoticIndicesServiceResponsePair() {
  // @@protoc_insertion_point(destructor:kaikosdk.StreamExoticIndicesServiceResponsePair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamExoticIndicesServiceResponsePair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.underlying_instrument_.Destroy();
  if (this != internal_default_instance()) delete _impl_.underlying_price_;
}

void StreamExoticIndicesServiceResponsePair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamExoticIndicesServiceResponsePair::Clear() {
// @@protoc_insertion_point(message_clear_start:kaikosdk.StreamExoticIndicesServiceResponsePair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.underlying_instrument_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.underlying_price_ != nullptr) {
    delete _impl_.underlying_price_;
  }
  _impl_.underlying_price_ = nullptr;
  ::memset(&_impl_.weighting_factor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.position_) -
      reinterpret_cast<char*>(&_impl_.weighting_factor_)) + sizeof(_impl_.position_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamExoticIndicesServiceResponsePair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string underlying_instrument = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_underlying_instrument();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamExoticIndicesServiceResponsePair.underlying_instrument"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue underlying_price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_underlying_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double weighting_factor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.weighting_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double capping_factor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.capping_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double currency_conversion_factor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.currency_conversion_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .kaikosdk.StreamExoticIndicesPosition position = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_position(static_cast<::kaikosdk::StreamExoticIndicesPosition>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamExoticIndicesServiceResponsePair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaikosdk.StreamExoticIndicesServiceResponsePair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string underlying_instrument = 1;
  if (!this->_internal_underlying_instrument().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_underlying_instrument().data(), static_cast<int>(this->_internal_underlying_instrument().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamExoticIndicesServiceResponsePair.underlying_instrument");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_underlying_instrument(), target);
  }

  // .google.protobuf.DoubleValue underlying_price = 2;
  if (this->_internal_has_underlying_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::underlying_price(this),
        _Internal::underlying_price(this).GetCachedSize(), target, stream);
  }

  // double weighting_factor = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weighting_factor = this->_internal_weighting_factor();
  uint64_t raw_weighting_factor;
  memcpy(&raw_weighting_factor, &tmp_weighting_factor, sizeof(tmp_weighting_factor));
  if (raw_weighting_factor != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_weighting_factor(), target);
  }

  // double capping_factor = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_capping_factor = this->_internal_capping_factor();
  uint64_t raw_capping_factor;
  memcpy(&raw_capping_factor, &tmp_capping_factor, sizeof(tmp_capping_factor));
  if (raw_capping_factor != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_capping_factor(), target);
  }

  // double currency_conversion_factor = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_currency_conversion_factor = this->_internal_currency_conversion_factor();
  uint64_t raw_currency_conversion_factor;
  memcpy(&raw_currency_conversion_factor, &tmp_currency_conversion_factor, sizeof(tmp_currency_conversion_factor));
  if (raw_currency_conversion_factor != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_currency_conversion_factor(), target);
  }

  // .kaikosdk.StreamExoticIndicesPosition position = 6;
  if (this->_internal_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaikosdk.StreamExoticIndicesServiceResponsePair)
  return target;
}

size_t StreamExoticIndicesServiceResponsePair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaikosdk.StreamExoticIndicesServiceResponsePair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string underlying_instrument = 1;
  if (!this->_internal_underlying_instrument().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_underlying_instrument());
  }

  // .google.protobuf.DoubleValue underlying_price = 2;
  if (this->_internal_has_underlying_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.underlying_price_);
  }

  // double weighting_factor = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weighting_factor = this->_internal_weighting_factor();
  uint64_t raw_weighting_factor;
  memcpy(&raw_weighting_factor, &tmp_weighting_factor, sizeof(tmp_weighting_factor));
  if (raw_weighting_factor != 0) {
    total_size += 1 + 8;
  }

  // double capping_factor = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_capping_factor = this->_internal_capping_factor();
  uint64_t raw_capping_factor;
  memcpy(&raw_capping_factor, &tmp_capping_factor, sizeof(tmp_capping_factor));
  if (raw_capping_factor != 0) {
    total_size += 1 + 8;
  }

  // double currency_conversion_factor = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_currency_conversion_factor = this->_internal_currency_conversion_factor();
  uint64_t raw_currency_conversion_factor;
  memcpy(&raw_currency_conversion_factor, &tmp_currency_conversion_factor, sizeof(tmp_currency_conversion_factor));
  if (raw_currency_conversion_factor != 0) {
    total_size += 1 + 8;
  }

  // .kaikosdk.StreamExoticIndicesPosition position = 6;
  if (this->_internal_position() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_position());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamExoticIndicesServiceResponsePair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamExoticIndicesServiceResponsePair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamExoticIndicesServiceResponsePair::GetClassData() const { return &_class_data_; }


void StreamExoticIndicesServiceResponsePair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamExoticIndicesServiceResponsePair*>(&to_msg);
  auto& from = static_cast<const StreamExoticIndicesServiceResponsePair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaikosdk.StreamExoticIndicesServiceResponsePair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_underlying_instrument().empty()) {
    _this->_internal_set_underlying_instrument(from._internal_underlying_instrument());
  }
  if (from._internal_has_underlying_price()) {
    _this->_internal_mutable_underlying_price()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(
        from._internal_underlying_price());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weighting_factor = from._internal_weighting_factor();
  uint64_t raw_weighting_factor;
  memcpy(&raw_weighting_factor, &tmp_weighting_factor, sizeof(tmp_weighting_factor));
  if (raw_weighting_factor != 0) {
    _this->_internal_set_weighting_factor(from._internal_weighting_factor());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_capping_factor = from._internal_capping_factor();
  uint64_t raw_capping_factor;
  memcpy(&raw_capping_factor, &tmp_capping_factor, sizeof(tmp_capping_factor));
  if (raw_capping_factor != 0) {
    _this->_internal_set_capping_factor(from._internal_capping_factor());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_currency_conversion_factor = from._internal_currency_conversion_factor();
  uint64_t raw_currency_conversion_factor;
  memcpy(&raw_currency_conversion_factor, &tmp_currency_conversion_factor, sizeof(tmp_currency_conversion_factor));
  if (raw_currency_conversion_factor != 0) {
    _this->_internal_set_currency_conversion_factor(from._internal_currency_conversion_factor());
  }
  if (from._internal_position() != 0) {
    _this->_internal_set_position(from._internal_position());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamExoticIndicesServiceResponsePair::CopyFrom(const StreamExoticIndicesServiceResponsePair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaikosdk.StreamExoticIndicesServiceResponsePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamExoticIndicesServiceResponsePair::IsInitialized() const {
  return true;
}

void StreamExoticIndicesServiceResponsePair::InternalSwap(StreamExoticIndicesServiceResponsePair* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.underlying_instrument_, lhs_arena,
      &other->_impl_.underlying_instrument_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamExoticIndicesServiceResponsePair, _impl_.position_)
      + sizeof(StreamExoticIndicesServiceResponsePair::_impl_.position_)
      - PROTOBUF_FIELD_OFFSET(StreamExoticIndicesServiceResponsePair, _impl_.underlying_price_)>(
          reinterpret_cast<char*>(&_impl_.underlying_price_),
          reinterpret_cast<char*>(&other->_impl_.underlying_price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamExoticIndicesServiceResponsePair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto_getter, &descriptor_table_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto_once,
      file_level_metadata_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto[1]);
}

// ===================================================================

class StreamExoticIndicesServiceResponsePrices::_Internal {
 public:
};

StreamExoticIndicesServiceResponsePrices::StreamExoticIndicesServiceResponsePrices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaikosdk.StreamExoticIndicesServiceResponsePrices)
}
StreamExoticIndicesServiceResponsePrices::StreamExoticIndicesServiceResponsePrices(const StreamExoticIndicesServiceResponsePrices& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamExoticIndicesServiceResponsePrices* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pairs_){from._impl_.pairs_}
    , decltype(_impl_.index_value_){}
    , decltype(_impl_.divisor_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_value_, &from._impl_.index_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.divisor_) -
    reinterpret_cast<char*>(&_impl_.index_value_)) + sizeof(_impl_.divisor_));
  // @@protoc_insertion_point(copy_constructor:kaikosdk.StreamExoticIndicesServiceResponsePrices)
}

inline void StreamExoticIndicesServiceResponsePrices::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pairs_){arena}
    , decltype(_impl_.index_value_){0}
    , decltype(_impl_.divisor_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StreamExoticIndicesServiceResponsePrices::~StreamExoticIndicesServiceResponsePrices() {
  // @@protoc_insertion_point(destructor:kaikosdk.StreamExoticIndicesServiceResponsePrices)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamExoticIndicesServiceResponsePrices::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pairs_.~RepeatedPtrField();
}

void StreamExoticIndicesServiceResponsePrices::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamExoticIndicesServiceResponsePrices::Clear() {
// @@protoc_insertion_point(message_clear_start:kaikosdk.StreamExoticIndicesServiceResponsePrices)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pairs_.Clear();
  ::memset(&_impl_.index_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.divisor_) -
      reinterpret_cast<char*>(&_impl_.index_value_)) + sizeof(_impl_.divisor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamExoticIndicesServiceResponsePrices::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double index_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.index_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double divisor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.divisor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .kaikosdk.StreamExoticIndicesServiceResponsePair pairs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pairs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamExoticIndicesServiceResponsePrices::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaikosdk.StreamExoticIndicesServiceResponsePrices)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double index_value = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_index_value = this->_internal_index_value();
  uint64_t raw_index_value;
  memcpy(&raw_index_value, &tmp_index_value, sizeof(tmp_index_value));
  if (raw_index_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_index_value(), target);
  }

  // double divisor = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_divisor = this->_internal_divisor();
  uint64_t raw_divisor;
  memcpy(&raw_divisor, &tmp_divisor, sizeof(tmp_divisor));
  if (raw_divisor != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_divisor(), target);
  }

  // repeated .kaikosdk.StreamExoticIndicesServiceResponsePair pairs = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pairs_size()); i < n; i++) {
    const auto& repfield = this->_internal_pairs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaikosdk.StreamExoticIndicesServiceResponsePrices)
  return target;
}

size_t StreamExoticIndicesServiceResponsePrices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaikosdk.StreamExoticIndicesServiceResponsePrices)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kaikosdk.StreamExoticIndicesServiceResponsePair pairs = 3;
  total_size += 1UL * this->_internal_pairs_size();
  for (const auto& msg : this->_impl_.pairs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // double index_value = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_index_value = this->_internal_index_value();
  uint64_t raw_index_value;
  memcpy(&raw_index_value, &tmp_index_value, sizeof(tmp_index_value));
  if (raw_index_value != 0) {
    total_size += 1 + 8;
  }

  // double divisor = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_divisor = this->_internal_divisor();
  uint64_t raw_divisor;
  memcpy(&raw_divisor, &tmp_divisor, sizeof(tmp_divisor));
  if (raw_divisor != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamExoticIndicesServiceResponsePrices::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamExoticIndicesServiceResponsePrices::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamExoticIndicesServiceResponsePrices::GetClassData() const { return &_class_data_; }


void StreamExoticIndicesServiceResponsePrices::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamExoticIndicesServiceResponsePrices*>(&to_msg);
  auto& from = static_cast<const StreamExoticIndicesServiceResponsePrices&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaikosdk.StreamExoticIndicesServiceResponsePrices)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pairs_.MergeFrom(from._impl_.pairs_);
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_index_value = from._internal_index_value();
  uint64_t raw_index_value;
  memcpy(&raw_index_value, &tmp_index_value, sizeof(tmp_index_value));
  if (raw_index_value != 0) {
    _this->_internal_set_index_value(from._internal_index_value());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_divisor = from._internal_divisor();
  uint64_t raw_divisor;
  memcpy(&raw_divisor, &tmp_divisor, sizeof(tmp_divisor));
  if (raw_divisor != 0) {
    _this->_internal_set_divisor(from._internal_divisor());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamExoticIndicesServiceResponsePrices::CopyFrom(const StreamExoticIndicesServiceResponsePrices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaikosdk.StreamExoticIndicesServiceResponsePrices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamExoticIndicesServiceResponsePrices::IsInitialized() const {
  return true;
}

void StreamExoticIndicesServiceResponsePrices::InternalSwap(StreamExoticIndicesServiceResponsePrices* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pairs_.InternalSwap(&other->_impl_.pairs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamExoticIndicesServiceResponsePrices, _impl_.divisor_)
      + sizeof(StreamExoticIndicesServiceResponsePrices::_impl_.divisor_)
      - PROTOBUF_FIELD_OFFSET(StreamExoticIndicesServiceResponsePrices, _impl_.index_value_)>(
          reinterpret_cast<char*>(&_impl_.index_value_),
          reinterpret_cast<char*>(&other->_impl_.index_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamExoticIndicesServiceResponsePrices::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto_getter, &descriptor_table_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto_once,
      file_level_metadata_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto[2]);
}

// ===================================================================

class StreamExoticIndicesServiceResponseV1::_Internal {
 public:
  static const ::kaikosdk::DataInterval& interval(const StreamExoticIndicesServiceResponseV1* msg);
  static const ::kaikosdk::StreamExoticIndicesServiceResponsePrices& price(const StreamExoticIndicesServiceResponseV1* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts_event(const StreamExoticIndicesServiceResponseV1* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts_compute(const StreamExoticIndicesServiceResponseV1* msg);
};

const ::kaikosdk::DataInterval&
StreamExoticIndicesServiceResponseV1::_Internal::interval(const StreamExoticIndicesServiceResponseV1* msg) {
  return *msg->_impl_.interval_;
}
const ::kaikosdk::StreamExoticIndicesServiceResponsePrices&
StreamExoticIndicesServiceResponseV1::_Internal::price(const StreamExoticIndicesServiceResponseV1* msg) {
  return *msg->_impl_.price_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
StreamExoticIndicesServiceResponseV1::_Internal::ts_event(const StreamExoticIndicesServiceResponseV1* msg) {
  return *msg->_impl_.ts_event_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
StreamExoticIndicesServiceResponseV1::_Internal::ts_compute(const StreamExoticIndicesServiceResponseV1* msg) {
  return *msg->_impl_.ts_compute_;
}
void StreamExoticIndicesServiceResponseV1::clear_interval() {
  if (GetArenaForAllocation() == nullptr && _impl_.interval_ != nullptr) {
    delete _impl_.interval_;
  }
  _impl_.interval_ = nullptr;
}
void StreamExoticIndicesServiceResponseV1::clear_ts_event() {
  if (GetArenaForAllocation() == nullptr && _impl_.ts_event_ != nullptr) {
    delete _impl_.ts_event_;
  }
  _impl_.ts_event_ = nullptr;
}
void StreamExoticIndicesServiceResponseV1::clear_ts_compute() {
  if (GetArenaForAllocation() == nullptr && _impl_.ts_compute_ != nullptr) {
    delete _impl_.ts_compute_;
  }
  _impl_.ts_compute_ = nullptr;
}
StreamExoticIndicesServiceResponseV1::StreamExoticIndicesServiceResponseV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaikosdk.StreamExoticIndicesServiceResponseV1)
}
StreamExoticIndicesServiceResponseV1::StreamExoticIndicesServiceResponseV1(const StreamExoticIndicesServiceResponseV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamExoticIndicesServiceResponseV1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.compositions_){from._impl_.compositions_}
    , decltype(_impl_.index_code_){}
    , decltype(_impl_.main_quote_){}
    , decltype(_impl_.interval_){nullptr}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.ts_event_){nullptr}
    , decltype(_impl_.ts_compute_){nullptr}
    , decltype(_impl_.commodity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.index_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index_code().empty()) {
    _this->_impl_.index_code_.Set(from._internal_index_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.main_quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.main_quote_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_main_quote().empty()) {
    _this->_impl_.main_quote_.Set(from._internal_main_quote(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_interval()) {
    _this->_impl_.interval_ = new ::kaikosdk::DataInterval(*from._impl_.interval_);
  }
  if (from._internal_has_price()) {
    _this->_impl_.price_ = new ::kaikosdk::StreamExoticIndicesServiceResponsePrices(*from._impl_.price_);
  }
  if (from._internal_has_ts_event()) {
    _this->_impl_.ts_event_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.ts_event_);
  }
  if (from._internal_has_ts_compute()) {
    _this->_impl_.ts_compute_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.ts_compute_);
  }
  _this->_impl_.commodity_ = from._impl_.commodity_;
  // @@protoc_insertion_point(copy_constructor:kaikosdk.StreamExoticIndicesServiceResponseV1)
}

inline void StreamExoticIndicesServiceResponseV1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.compositions_){arena}
    , decltype(_impl_.index_code_){}
    , decltype(_impl_.main_quote_){}
    , decltype(_impl_.interval_){nullptr}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.ts_event_){nullptr}
    , decltype(_impl_.ts_compute_){nullptr}
    , decltype(_impl_.commodity_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.index_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.index_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.main_quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.main_quote_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamExoticIndicesServiceResponseV1::~StreamExoticIndicesServiceResponseV1() {
  // @@protoc_insertion_point(destructor:kaikosdk.StreamExoticIndicesServiceResponseV1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamExoticIndicesServiceResponseV1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.compositions_.~RepeatedPtrField();
  _impl_.index_code_.Destroy();
  _impl_.main_quote_.Destroy();
  if (this != internal_default_instance()) delete _impl_.interval_;
  if (this != internal_default_instance()) delete _impl_.price_;
  if (this != internal_default_instance()) delete _impl_.ts_event_;
  if (this != internal_default_instance()) delete _impl_.ts_compute_;
}

void StreamExoticIndicesServiceResponseV1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamExoticIndicesServiceResponseV1::Clear() {
// @@protoc_insertion_point(message_clear_start:kaikosdk.StreamExoticIndicesServiceResponseV1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.compositions_.Clear();
  _impl_.index_code_.ClearToEmpty();
  _impl_.main_quote_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.interval_ != nullptr) {
    delete _impl_.interval_;
  }
  _impl_.interval_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ts_event_ != nullptr) {
    delete _impl_.ts_event_;
  }
  _impl_.ts_event_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ts_compute_ != nullptr) {
    delete _impl_.ts_compute_;
  }
  _impl_.ts_compute_ = nullptr;
  _impl_.commodity_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamExoticIndicesServiceResponseV1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .kaikosdk.StreamIndexCommodity commodity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_commodity(static_cast<::kaikosdk::StreamIndexCommodity>(val));
        } else
          goto handle_unusual;
        continue;
      // string index_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_index_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamExoticIndicesServiceResponseV1.index_code"));
        } else
          goto handle_unusual;
        continue;
      // .kaikosdk.DataInterval interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string main_quote = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_main_quote();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamExoticIndicesServiceResponseV1.main_quote"));
        } else
          goto handle_unusual;
        continue;
      // repeated .kaikosdk.StreamExoticIndicesServiceResponseComposition compositions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_compositions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .kaikosdk.StreamExoticIndicesServiceResponsePrices price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp ts_event = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ts_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp ts_compute = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ts_compute(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamExoticIndicesServiceResponseV1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaikosdk.StreamExoticIndicesServiceResponseV1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .kaikosdk.StreamIndexCommodity commodity = 1;
  if (this->_internal_commodity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_commodity(), target);
  }

  // string index_code = 2;
  if (!this->_internal_index_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_code().data(), static_cast<int>(this->_internal_index_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamExoticIndicesServiceResponseV1.index_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_index_code(), target);
  }

  // .kaikosdk.DataInterval interval = 3;
  if (this->_internal_has_interval()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::interval(this),
        _Internal::interval(this).GetCachedSize(), target, stream);
  }

  // string main_quote = 4;
  if (!this->_internal_main_quote().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_main_quote().data(), static_cast<int>(this->_internal_main_quote().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamExoticIndicesServiceResponseV1.main_quote");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_main_quote(), target);
  }

  // repeated .kaikosdk.StreamExoticIndicesServiceResponseComposition compositions = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_compositions_size()); i < n; i++) {
    const auto& repfield = this->_internal_compositions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .kaikosdk.StreamExoticIndicesServiceResponsePrices price = 6;
  if (this->_internal_has_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp ts_event = 7;
  if (this->_internal_has_ts_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::ts_event(this),
        _Internal::ts_event(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp ts_compute = 8;
  if (this->_internal_has_ts_compute()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::ts_compute(this),
        _Internal::ts_compute(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaikosdk.StreamExoticIndicesServiceResponseV1)
  return target;
}

size_t StreamExoticIndicesServiceResponseV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaikosdk.StreamExoticIndicesServiceResponseV1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kaikosdk.StreamExoticIndicesServiceResponseComposition compositions = 5;
  total_size += 1UL * this->_internal_compositions_size();
  for (const auto& msg : this->_impl_.compositions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string index_code = 2;
  if (!this->_internal_index_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_code());
  }

  // string main_quote = 4;
  if (!this->_internal_main_quote().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_main_quote());
  }

  // .kaikosdk.DataInterval interval = 3;
  if (this->_internal_has_interval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.interval_);
  }

  // .kaikosdk.StreamExoticIndicesServiceResponsePrices price = 6;
  if (this->_internal_has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_);
  }

  // .google.protobuf.Timestamp ts_event = 7;
  if (this->_internal_has_ts_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ts_event_);
  }

  // .google.protobuf.Timestamp ts_compute = 8;
  if (this->_internal_has_ts_compute()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ts_compute_);
  }

  // .kaikosdk.StreamIndexCommodity commodity = 1;
  if (this->_internal_commodity() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_commodity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamExoticIndicesServiceResponseV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamExoticIndicesServiceResponseV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamExoticIndicesServiceResponseV1::GetClassData() const { return &_class_data_; }


void StreamExoticIndicesServiceResponseV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamExoticIndicesServiceResponseV1*>(&to_msg);
  auto& from = static_cast<const StreamExoticIndicesServiceResponseV1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaikosdk.StreamExoticIndicesServiceResponseV1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.compositions_.MergeFrom(from._impl_.compositions_);
  if (!from._internal_index_code().empty()) {
    _this->_internal_set_index_code(from._internal_index_code());
  }
  if (!from._internal_main_quote().empty()) {
    _this->_internal_set_main_quote(from._internal_main_quote());
  }
  if (from._internal_has_interval()) {
    _this->_internal_mutable_interval()->::kaikosdk::DataInterval::MergeFrom(
        from._internal_interval());
  }
  if (from._internal_has_price()) {
    _this->_internal_mutable_price()->::kaikosdk::StreamExoticIndicesServiceResponsePrices::MergeFrom(
        from._internal_price());
  }
  if (from._internal_has_ts_event()) {
    _this->_internal_mutable_ts_event()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_ts_event());
  }
  if (from._internal_has_ts_compute()) {
    _this->_internal_mutable_ts_compute()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_ts_compute());
  }
  if (from._internal_commodity() != 0) {
    _this->_internal_set_commodity(from._internal_commodity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamExoticIndicesServiceResponseV1::CopyFrom(const StreamExoticIndicesServiceResponseV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaikosdk.StreamExoticIndicesServiceResponseV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamExoticIndicesServiceResponseV1::IsInitialized() const {
  return true;
}

void StreamExoticIndicesServiceResponseV1::InternalSwap(StreamExoticIndicesServiceResponseV1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.compositions_.InternalSwap(&other->_impl_.compositions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.index_code_, lhs_arena,
      &other->_impl_.index_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.main_quote_, lhs_arena,
      &other->_impl_.main_quote_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamExoticIndicesServiceResponseV1, _impl_.commodity_)
      + sizeof(StreamExoticIndicesServiceResponseV1::_impl_.commodity_)
      - PROTOBUF_FIELD_OFFSET(StreamExoticIndicesServiceResponseV1, _impl_.interval_)>(
          reinterpret_cast<char*>(&_impl_.interval_),
          reinterpret_cast<char*>(&other->_impl_.interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamExoticIndicesServiceResponseV1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto_getter, &descriptor_table_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto_once,
      file_level_metadata_sdk_2fstream_2fexotic_5findices_5fv1_2fresponse_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace kaikosdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kaikosdk::StreamExoticIndicesServiceResponseComposition*
Arena::CreateMaybeMessage< ::kaikosdk::StreamExoticIndicesServiceResponseComposition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaikosdk::StreamExoticIndicesServiceResponseComposition >(arena);
}
template<> PROTOBUF_NOINLINE ::kaikosdk::StreamExoticIndicesServiceResponsePair*
Arena::CreateMaybeMessage< ::kaikosdk::StreamExoticIndicesServiceResponsePair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaikosdk::StreamExoticIndicesServiceResponsePair >(arena);
}
template<> PROTOBUF_NOINLINE ::kaikosdk::StreamExoticIndicesServiceResponsePrices*
Arena::CreateMaybeMessage< ::kaikosdk::StreamExoticIndicesServiceResponsePrices >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaikosdk::StreamExoticIndicesServiceResponsePrices >(arena);
}
template<> PROTOBUF_NOINLINE ::kaikosdk::StreamExoticIndicesServiceResponseV1*
Arena::CreateMaybeMessage< ::kaikosdk::StreamExoticIndicesServiceResponseV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaikosdk::StreamExoticIndicesServiceResponseV1 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
