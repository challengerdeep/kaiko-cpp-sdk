// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk/stream/index_multi_assets_v1/response.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2findex_5fmulti_5fassets_5fv1_2fresponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2findex_5fmulti_5fassets_5fv1_2fresponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
#include "sdk/core/data_interval.pb.h"
#include "sdk/stream/index_v1/commodity.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sdk_2fstream_2findex_5fmulti_5fassets_5fv1_2fresponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sdk_2fstream_2findex_5fmulti_5fassets_5fv1_2fresponse_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sdk_2fstream_2findex_5fmulti_5fassets_5fv1_2fresponse_2eproto;
namespace kaikosdk {
class StreamIndexMultiAssetsServiceResponseComposition;
struct StreamIndexMultiAssetsServiceResponseCompositionDefaultTypeInternal;
extern StreamIndexMultiAssetsServiceResponseCompositionDefaultTypeInternal _StreamIndexMultiAssetsServiceResponseComposition_default_instance_;
class StreamIndexMultiAssetsServiceResponsePair;
struct StreamIndexMultiAssetsServiceResponsePairDefaultTypeInternal;
extern StreamIndexMultiAssetsServiceResponsePairDefaultTypeInternal _StreamIndexMultiAssetsServiceResponsePair_default_instance_;
class StreamIndexMultiAssetsServiceResponsePrices;
struct StreamIndexMultiAssetsServiceResponsePricesDefaultTypeInternal;
extern StreamIndexMultiAssetsServiceResponsePricesDefaultTypeInternal _StreamIndexMultiAssetsServiceResponsePrices_default_instance_;
class StreamIndexMultiAssetsServiceResponseV1;
struct StreamIndexMultiAssetsServiceResponseV1DefaultTypeInternal;
extern StreamIndexMultiAssetsServiceResponseV1DefaultTypeInternal _StreamIndexMultiAssetsServiceResponseV1_default_instance_;
}  // namespace kaikosdk
PROTOBUF_NAMESPACE_OPEN
template<> ::kaikosdk::StreamIndexMultiAssetsServiceResponseComposition* Arena::CreateMaybeMessage<::kaikosdk::StreamIndexMultiAssetsServiceResponseComposition>(Arena*);
template<> ::kaikosdk::StreamIndexMultiAssetsServiceResponsePair* Arena::CreateMaybeMessage<::kaikosdk::StreamIndexMultiAssetsServiceResponsePair>(Arena*);
template<> ::kaikosdk::StreamIndexMultiAssetsServiceResponsePrices* Arena::CreateMaybeMessage<::kaikosdk::StreamIndexMultiAssetsServiceResponsePrices>(Arena*);
template<> ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1* Arena::CreateMaybeMessage<::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kaikosdk {

// ===================================================================

class StreamIndexMultiAssetsServiceResponseComposition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition) */ {
 public:
  inline StreamIndexMultiAssetsServiceResponseComposition() : StreamIndexMultiAssetsServiceResponseComposition(nullptr) {}
  ~StreamIndexMultiAssetsServiceResponseComposition() override;
  explicit PROTOBUF_CONSTEXPR StreamIndexMultiAssetsServiceResponseComposition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamIndexMultiAssetsServiceResponseComposition(const StreamIndexMultiAssetsServiceResponseComposition& from);
  StreamIndexMultiAssetsServiceResponseComposition(StreamIndexMultiAssetsServiceResponseComposition&& from) noexcept
    : StreamIndexMultiAssetsServiceResponseComposition() {
    *this = ::std::move(from);
  }

  inline StreamIndexMultiAssetsServiceResponseComposition& operator=(const StreamIndexMultiAssetsServiceResponseComposition& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamIndexMultiAssetsServiceResponseComposition& operator=(StreamIndexMultiAssetsServiceResponseComposition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamIndexMultiAssetsServiceResponseComposition& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamIndexMultiAssetsServiceResponseComposition* internal_default_instance() {
    return reinterpret_cast<const StreamIndexMultiAssetsServiceResponseComposition*>(
               &_StreamIndexMultiAssetsServiceResponseComposition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StreamIndexMultiAssetsServiceResponseComposition& a, StreamIndexMultiAssetsServiceResponseComposition& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamIndexMultiAssetsServiceResponseComposition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamIndexMultiAssetsServiceResponseComposition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamIndexMultiAssetsServiceResponseComposition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamIndexMultiAssetsServiceResponseComposition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamIndexMultiAssetsServiceResponseComposition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamIndexMultiAssetsServiceResponseComposition& from) {
    StreamIndexMultiAssetsServiceResponseComposition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamIndexMultiAssetsServiceResponseComposition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.StreamIndexMultiAssetsServiceResponseComposition";
  }
  protected:
  explicit StreamIndexMultiAssetsServiceResponseComposition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExchangesFieldNumber = 4,
    kUnderlyingInstrumentFieldNumber = 1,
    kBaseFieldNumber = 2,
    kQuoteFieldNumber = 3,
    kCurrencyConversionFieldNumber = 6,
    kInstrumentIntervalFieldNumber = 5,
    kTsEventFieldNumber = 7,
  };
  // repeated string exchanges = 4;
  int exchanges_size() const;
  private:
  int _internal_exchanges_size() const;
  public:
  void clear_exchanges();
  const std::string& exchanges(int index) const;
  std::string* mutable_exchanges(int index);
  void set_exchanges(int index, const std::string& value);
  void set_exchanges(int index, std::string&& value);
  void set_exchanges(int index, const char* value);
  void set_exchanges(int index, const char* value, size_t size);
  std::string* add_exchanges();
  void add_exchanges(const std::string& value);
  void add_exchanges(std::string&& value);
  void add_exchanges(const char* value);
  void add_exchanges(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& exchanges() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_exchanges();
  private:
  const std::string& _internal_exchanges(int index) const;
  std::string* _internal_add_exchanges();
  public:

  // string underlying_instrument = 1;
  void clear_underlying_instrument();
  const std::string& underlying_instrument() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_underlying_instrument(ArgT0&& arg0, ArgT... args);
  std::string* mutable_underlying_instrument();
  PROTOBUF_NODISCARD std::string* release_underlying_instrument();
  void set_allocated_underlying_instrument(std::string* underlying_instrument);
  private:
  const std::string& _internal_underlying_instrument() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_underlying_instrument(const std::string& value);
  std::string* _internal_mutable_underlying_instrument();
  public:

  // string base = 2;
  void clear_base();
  const std::string& base() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_base(ArgT0&& arg0, ArgT... args);
  std::string* mutable_base();
  PROTOBUF_NODISCARD std::string* release_base();
  void set_allocated_base(std::string* base);
  private:
  const std::string& _internal_base() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base(const std::string& value);
  std::string* _internal_mutable_base();
  public:

  // string quote = 3;
  void clear_quote();
  const std::string& quote() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_quote(ArgT0&& arg0, ArgT... args);
  std::string* mutable_quote();
  PROTOBUF_NODISCARD std::string* release_quote();
  void set_allocated_quote(std::string* quote);
  private:
  const std::string& _internal_quote() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quote(const std::string& value);
  std::string* _internal_mutable_quote();
  public:

  // string currency_conversion = 6;
  void clear_currency_conversion();
  const std::string& currency_conversion() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency_conversion(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency_conversion();
  PROTOBUF_NODISCARD std::string* release_currency_conversion();
  void set_allocated_currency_conversion(std::string* currency_conversion);
  private:
  const std::string& _internal_currency_conversion() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency_conversion(const std::string& value);
  std::string* _internal_mutable_currency_conversion();
  public:

  // .kaikosdk.DataInterval instrument_interval = 5;
  bool has_instrument_interval() const;
  private:
  bool _internal_has_instrument_interval() const;
  public:
  void clear_instrument_interval();
  const ::kaikosdk::DataInterval& instrument_interval() const;
  PROTOBUF_NODISCARD ::kaikosdk::DataInterval* release_instrument_interval();
  ::kaikosdk::DataInterval* mutable_instrument_interval();
  void set_allocated_instrument_interval(::kaikosdk::DataInterval* instrument_interval);
  private:
  const ::kaikosdk::DataInterval& _internal_instrument_interval() const;
  ::kaikosdk::DataInterval* _internal_mutable_instrument_interval();
  public:
  void unsafe_arena_set_allocated_instrument_interval(
      ::kaikosdk::DataInterval* instrument_interval);
  ::kaikosdk::DataInterval* unsafe_arena_release_instrument_interval();

  // .google.protobuf.Timestamp ts_event = 7;
  bool has_ts_event() const;
  private:
  bool _internal_has_ts_event() const;
  public:
  void clear_ts_event();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts_event() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_ts_event();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_ts_event();
  void set_allocated_ts_event(::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_ts_event() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_ts_event();
  public:
  void unsafe_arena_set_allocated_ts_event(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_ts_event();

  // @@protoc_insertion_point(class_scope:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> exchanges_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr underlying_instrument_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quote_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_conversion_;
    ::kaikosdk::DataInterval* instrument_interval_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2fstream_2findex_5fmulti_5fassets_5fv1_2fresponse_2eproto;
};
// -------------------------------------------------------------------

class StreamIndexMultiAssetsServiceResponsePair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.StreamIndexMultiAssetsServiceResponsePair) */ {
 public:
  inline StreamIndexMultiAssetsServiceResponsePair() : StreamIndexMultiAssetsServiceResponsePair(nullptr) {}
  ~StreamIndexMultiAssetsServiceResponsePair() override;
  explicit PROTOBUF_CONSTEXPR StreamIndexMultiAssetsServiceResponsePair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamIndexMultiAssetsServiceResponsePair(const StreamIndexMultiAssetsServiceResponsePair& from);
  StreamIndexMultiAssetsServiceResponsePair(StreamIndexMultiAssetsServiceResponsePair&& from) noexcept
    : StreamIndexMultiAssetsServiceResponsePair() {
    *this = ::std::move(from);
  }

  inline StreamIndexMultiAssetsServiceResponsePair& operator=(const StreamIndexMultiAssetsServiceResponsePair& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamIndexMultiAssetsServiceResponsePair& operator=(StreamIndexMultiAssetsServiceResponsePair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamIndexMultiAssetsServiceResponsePair& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamIndexMultiAssetsServiceResponsePair* internal_default_instance() {
    return reinterpret_cast<const StreamIndexMultiAssetsServiceResponsePair*>(
               &_StreamIndexMultiAssetsServiceResponsePair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StreamIndexMultiAssetsServiceResponsePair& a, StreamIndexMultiAssetsServiceResponsePair& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamIndexMultiAssetsServiceResponsePair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamIndexMultiAssetsServiceResponsePair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamIndexMultiAssetsServiceResponsePair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamIndexMultiAssetsServiceResponsePair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamIndexMultiAssetsServiceResponsePair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamIndexMultiAssetsServiceResponsePair& from) {
    StreamIndexMultiAssetsServiceResponsePair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamIndexMultiAssetsServiceResponsePair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.StreamIndexMultiAssetsServiceResponsePair";
  }
  protected:
  explicit StreamIndexMultiAssetsServiceResponsePair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnderlyingInstrumentFieldNumber = 1,
    kUnderlyingPriceFieldNumber = 2,
    kWeightingFactorFieldNumber = 3,
    kCappingFactorFieldNumber = 4,
    kCurrencyConversionFactorFieldNumber = 5,
  };
  // string underlying_instrument = 1;
  void clear_underlying_instrument();
  const std::string& underlying_instrument() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_underlying_instrument(ArgT0&& arg0, ArgT... args);
  std::string* mutable_underlying_instrument();
  PROTOBUF_NODISCARD std::string* release_underlying_instrument();
  void set_allocated_underlying_instrument(std::string* underlying_instrument);
  private:
  const std::string& _internal_underlying_instrument() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_underlying_instrument(const std::string& value);
  std::string* _internal_mutable_underlying_instrument();
  public:

  // .google.protobuf.DoubleValue underlying_price = 2;
  bool has_underlying_price() const;
  private:
  bool _internal_has_underlying_price() const;
  public:
  void clear_underlying_price();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& underlying_price() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_underlying_price();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_underlying_price();
  void set_allocated_underlying_price(::PROTOBUF_NAMESPACE_ID::DoubleValue* underlying_price);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_underlying_price() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_underlying_price();
  public:
  void unsafe_arena_set_allocated_underlying_price(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* underlying_price);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_underlying_price();

  // double weighting_factor = 3;
  void clear_weighting_factor();
  double weighting_factor() const;
  void set_weighting_factor(double value);
  private:
  double _internal_weighting_factor() const;
  void _internal_set_weighting_factor(double value);
  public:

  // double capping_factor = 4;
  void clear_capping_factor();
  double capping_factor() const;
  void set_capping_factor(double value);
  private:
  double _internal_capping_factor() const;
  void _internal_set_capping_factor(double value);
  public:

  // double currency_conversion_factor = 5;
  void clear_currency_conversion_factor();
  double currency_conversion_factor() const;
  void set_currency_conversion_factor(double value);
  private:
  double _internal_currency_conversion_factor() const;
  void _internal_set_currency_conversion_factor(double value);
  public:

  // @@protoc_insertion_point(class_scope:kaikosdk.StreamIndexMultiAssetsServiceResponsePair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr underlying_instrument_;
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* underlying_price_;
    double weighting_factor_;
    double capping_factor_;
    double currency_conversion_factor_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2fstream_2findex_5fmulti_5fassets_5fv1_2fresponse_2eproto;
};
// -------------------------------------------------------------------

class StreamIndexMultiAssetsServiceResponsePrices final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.StreamIndexMultiAssetsServiceResponsePrices) */ {
 public:
  inline StreamIndexMultiAssetsServiceResponsePrices() : StreamIndexMultiAssetsServiceResponsePrices(nullptr) {}
  ~StreamIndexMultiAssetsServiceResponsePrices() override;
  explicit PROTOBUF_CONSTEXPR StreamIndexMultiAssetsServiceResponsePrices(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamIndexMultiAssetsServiceResponsePrices(const StreamIndexMultiAssetsServiceResponsePrices& from);
  StreamIndexMultiAssetsServiceResponsePrices(StreamIndexMultiAssetsServiceResponsePrices&& from) noexcept
    : StreamIndexMultiAssetsServiceResponsePrices() {
    *this = ::std::move(from);
  }

  inline StreamIndexMultiAssetsServiceResponsePrices& operator=(const StreamIndexMultiAssetsServiceResponsePrices& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamIndexMultiAssetsServiceResponsePrices& operator=(StreamIndexMultiAssetsServiceResponsePrices&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamIndexMultiAssetsServiceResponsePrices& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamIndexMultiAssetsServiceResponsePrices* internal_default_instance() {
    return reinterpret_cast<const StreamIndexMultiAssetsServiceResponsePrices*>(
               &_StreamIndexMultiAssetsServiceResponsePrices_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StreamIndexMultiAssetsServiceResponsePrices& a, StreamIndexMultiAssetsServiceResponsePrices& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamIndexMultiAssetsServiceResponsePrices* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamIndexMultiAssetsServiceResponsePrices* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamIndexMultiAssetsServiceResponsePrices* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamIndexMultiAssetsServiceResponsePrices>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamIndexMultiAssetsServiceResponsePrices& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamIndexMultiAssetsServiceResponsePrices& from) {
    StreamIndexMultiAssetsServiceResponsePrices::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamIndexMultiAssetsServiceResponsePrices* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.StreamIndexMultiAssetsServiceResponsePrices";
  }
  protected:
  explicit StreamIndexMultiAssetsServiceResponsePrices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPairsFieldNumber = 3,
    kIndexValueFieldNumber = 1,
    kDivisorFieldNumber = 2,
  };
  // repeated .kaikosdk.StreamIndexMultiAssetsServiceResponsePair pairs = 3;
  int pairs_size() const;
  private:
  int _internal_pairs_size() const;
  public:
  void clear_pairs();
  ::kaikosdk::StreamIndexMultiAssetsServiceResponsePair* mutable_pairs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::StreamIndexMultiAssetsServiceResponsePair >*
      mutable_pairs();
  private:
  const ::kaikosdk::StreamIndexMultiAssetsServiceResponsePair& _internal_pairs(int index) const;
  ::kaikosdk::StreamIndexMultiAssetsServiceResponsePair* _internal_add_pairs();
  public:
  const ::kaikosdk::StreamIndexMultiAssetsServiceResponsePair& pairs(int index) const;
  ::kaikosdk::StreamIndexMultiAssetsServiceResponsePair* add_pairs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::StreamIndexMultiAssetsServiceResponsePair >&
      pairs() const;

  // double index_value = 1;
  void clear_index_value();
  double index_value() const;
  void set_index_value(double value);
  private:
  double _internal_index_value() const;
  void _internal_set_index_value(double value);
  public:

  // double divisor = 2;
  void clear_divisor();
  double divisor() const;
  void set_divisor(double value);
  private:
  double _internal_divisor() const;
  void _internal_set_divisor(double value);
  public:

  // @@protoc_insertion_point(class_scope:kaikosdk.StreamIndexMultiAssetsServiceResponsePrices)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::StreamIndexMultiAssetsServiceResponsePair > pairs_;
    double index_value_;
    double divisor_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2fstream_2findex_5fmulti_5fassets_5fv1_2fresponse_2eproto;
};
// -------------------------------------------------------------------

class StreamIndexMultiAssetsServiceResponseV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.StreamIndexMultiAssetsServiceResponseV1) */ {
 public:
  inline StreamIndexMultiAssetsServiceResponseV1() : StreamIndexMultiAssetsServiceResponseV1(nullptr) {}
  ~StreamIndexMultiAssetsServiceResponseV1() override;
  explicit PROTOBUF_CONSTEXPR StreamIndexMultiAssetsServiceResponseV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamIndexMultiAssetsServiceResponseV1(const StreamIndexMultiAssetsServiceResponseV1& from);
  StreamIndexMultiAssetsServiceResponseV1(StreamIndexMultiAssetsServiceResponseV1&& from) noexcept
    : StreamIndexMultiAssetsServiceResponseV1() {
    *this = ::std::move(from);
  }

  inline StreamIndexMultiAssetsServiceResponseV1& operator=(const StreamIndexMultiAssetsServiceResponseV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamIndexMultiAssetsServiceResponseV1& operator=(StreamIndexMultiAssetsServiceResponseV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamIndexMultiAssetsServiceResponseV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamIndexMultiAssetsServiceResponseV1* internal_default_instance() {
    return reinterpret_cast<const StreamIndexMultiAssetsServiceResponseV1*>(
               &_StreamIndexMultiAssetsServiceResponseV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StreamIndexMultiAssetsServiceResponseV1& a, StreamIndexMultiAssetsServiceResponseV1& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamIndexMultiAssetsServiceResponseV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamIndexMultiAssetsServiceResponseV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamIndexMultiAssetsServiceResponseV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamIndexMultiAssetsServiceResponseV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamIndexMultiAssetsServiceResponseV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamIndexMultiAssetsServiceResponseV1& from) {
    StreamIndexMultiAssetsServiceResponseV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamIndexMultiAssetsServiceResponseV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.StreamIndexMultiAssetsServiceResponseV1";
  }
  protected:
  explicit StreamIndexMultiAssetsServiceResponseV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompositionsFieldNumber = 5,
    kIndexCodeFieldNumber = 2,
    kMainQuoteFieldNumber = 4,
    kIntervalFieldNumber = 3,
    kPriceFieldNumber = 6,
    kTsEventFieldNumber = 7,
    kTsComputeFieldNumber = 8,
    kCommodityFieldNumber = 1,
  };
  // repeated .kaikosdk.StreamIndexMultiAssetsServiceResponseComposition compositions = 5;
  int compositions_size() const;
  private:
  int _internal_compositions_size() const;
  public:
  void clear_compositions();
  ::kaikosdk::StreamIndexMultiAssetsServiceResponseComposition* mutable_compositions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::StreamIndexMultiAssetsServiceResponseComposition >*
      mutable_compositions();
  private:
  const ::kaikosdk::StreamIndexMultiAssetsServiceResponseComposition& _internal_compositions(int index) const;
  ::kaikosdk::StreamIndexMultiAssetsServiceResponseComposition* _internal_add_compositions();
  public:
  const ::kaikosdk::StreamIndexMultiAssetsServiceResponseComposition& compositions(int index) const;
  ::kaikosdk::StreamIndexMultiAssetsServiceResponseComposition* add_compositions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::StreamIndexMultiAssetsServiceResponseComposition >&
      compositions() const;

  // string index_code = 2;
  void clear_index_code();
  const std::string& index_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index_code();
  PROTOBUF_NODISCARD std::string* release_index_code();
  void set_allocated_index_code(std::string* index_code);
  private:
  const std::string& _internal_index_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index_code(const std::string& value);
  std::string* _internal_mutable_index_code();
  public:

  // string main_quote = 4;
  void clear_main_quote();
  const std::string& main_quote() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_main_quote(ArgT0&& arg0, ArgT... args);
  std::string* mutable_main_quote();
  PROTOBUF_NODISCARD std::string* release_main_quote();
  void set_allocated_main_quote(std::string* main_quote);
  private:
  const std::string& _internal_main_quote() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_main_quote(const std::string& value);
  std::string* _internal_mutable_main_quote();
  public:

  // .kaikosdk.DataInterval interval = 3;
  bool has_interval() const;
  private:
  bool _internal_has_interval() const;
  public:
  void clear_interval();
  const ::kaikosdk::DataInterval& interval() const;
  PROTOBUF_NODISCARD ::kaikosdk::DataInterval* release_interval();
  ::kaikosdk::DataInterval* mutable_interval();
  void set_allocated_interval(::kaikosdk::DataInterval* interval);
  private:
  const ::kaikosdk::DataInterval& _internal_interval() const;
  ::kaikosdk::DataInterval* _internal_mutable_interval();
  public:
  void unsafe_arena_set_allocated_interval(
      ::kaikosdk::DataInterval* interval);
  ::kaikosdk::DataInterval* unsafe_arena_release_interval();

  // .kaikosdk.StreamIndexMultiAssetsServiceResponsePrices price = 6;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::kaikosdk::StreamIndexMultiAssetsServiceResponsePrices& price() const;
  PROTOBUF_NODISCARD ::kaikosdk::StreamIndexMultiAssetsServiceResponsePrices* release_price();
  ::kaikosdk::StreamIndexMultiAssetsServiceResponsePrices* mutable_price();
  void set_allocated_price(::kaikosdk::StreamIndexMultiAssetsServiceResponsePrices* price);
  private:
  const ::kaikosdk::StreamIndexMultiAssetsServiceResponsePrices& _internal_price() const;
  ::kaikosdk::StreamIndexMultiAssetsServiceResponsePrices* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::kaikosdk::StreamIndexMultiAssetsServiceResponsePrices* price);
  ::kaikosdk::StreamIndexMultiAssetsServiceResponsePrices* unsafe_arena_release_price();

  // .google.protobuf.Timestamp ts_event = 7;
  bool has_ts_event() const;
  private:
  bool _internal_has_ts_event() const;
  public:
  void clear_ts_event();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts_event() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_ts_event();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_ts_event();
  void set_allocated_ts_event(::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_ts_event() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_ts_event();
  public:
  void unsafe_arena_set_allocated_ts_event(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_ts_event();

  // .google.protobuf.Timestamp ts_compute = 8;
  bool has_ts_compute() const;
  private:
  bool _internal_has_ts_compute() const;
  public:
  void clear_ts_compute();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts_compute() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_ts_compute();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_ts_compute();
  void set_allocated_ts_compute(::PROTOBUF_NAMESPACE_ID::Timestamp* ts_compute);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_ts_compute() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_ts_compute();
  public:
  void unsafe_arena_set_allocated_ts_compute(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_compute);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_ts_compute();

  // .kaikosdk.StreamIndexCommodity commodity = 1;
  void clear_commodity();
  ::kaikosdk::StreamIndexCommodity commodity() const;
  void set_commodity(::kaikosdk::StreamIndexCommodity value);
  private:
  ::kaikosdk::StreamIndexCommodity _internal_commodity() const;
  void _internal_set_commodity(::kaikosdk::StreamIndexCommodity value);
  public:

  // @@protoc_insertion_point(class_scope:kaikosdk.StreamIndexMultiAssetsServiceResponseV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::StreamIndexMultiAssetsServiceResponseComposition > compositions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr main_quote_;
    ::kaikosdk::DataInterval* interval_;
    ::kaikosdk::StreamIndexMultiAssetsServiceResponsePrices* price_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_compute_;
    int commodity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2fstream_2findex_5fmulti_5fassets_5fv1_2fresponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StreamIndexMultiAssetsServiceResponseComposition

// string underlying_instrument = 1;
inline void StreamIndexMultiAssetsServiceResponseComposition::clear_underlying_instrument() {
  _impl_.underlying_instrument_.ClearToEmpty();
}
inline const std::string& StreamIndexMultiAssetsServiceResponseComposition::underlying_instrument() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.underlying_instrument)
  return _internal_underlying_instrument();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamIndexMultiAssetsServiceResponseComposition::set_underlying_instrument(ArgT0&& arg0, ArgT... args) {
 
 _impl_.underlying_instrument_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.underlying_instrument)
}
inline std::string* StreamIndexMultiAssetsServiceResponseComposition::mutable_underlying_instrument() {
  std::string* _s = _internal_mutable_underlying_instrument();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.underlying_instrument)
  return _s;
}
inline const std::string& StreamIndexMultiAssetsServiceResponseComposition::_internal_underlying_instrument() const {
  return _impl_.underlying_instrument_.Get();
}
inline void StreamIndexMultiAssetsServiceResponseComposition::_internal_set_underlying_instrument(const std::string& value) {
  
  _impl_.underlying_instrument_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamIndexMultiAssetsServiceResponseComposition::_internal_mutable_underlying_instrument() {
  
  return _impl_.underlying_instrument_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamIndexMultiAssetsServiceResponseComposition::release_underlying_instrument() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.underlying_instrument)
  return _impl_.underlying_instrument_.Release();
}
inline void StreamIndexMultiAssetsServiceResponseComposition::set_allocated_underlying_instrument(std::string* underlying_instrument) {
  if (underlying_instrument != nullptr) {
    
  } else {
    
  }
  _impl_.underlying_instrument_.SetAllocated(underlying_instrument, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.underlying_instrument_.IsDefault()) {
    _impl_.underlying_instrument_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.underlying_instrument)
}

// string base = 2;
inline void StreamIndexMultiAssetsServiceResponseComposition::clear_base() {
  _impl_.base_.ClearToEmpty();
}
inline const std::string& StreamIndexMultiAssetsServiceResponseComposition::base() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.base)
  return _internal_base();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamIndexMultiAssetsServiceResponseComposition::set_base(ArgT0&& arg0, ArgT... args) {
 
 _impl_.base_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.base)
}
inline std::string* StreamIndexMultiAssetsServiceResponseComposition::mutable_base() {
  std::string* _s = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.base)
  return _s;
}
inline const std::string& StreamIndexMultiAssetsServiceResponseComposition::_internal_base() const {
  return _impl_.base_.Get();
}
inline void StreamIndexMultiAssetsServiceResponseComposition::_internal_set_base(const std::string& value) {
  
  _impl_.base_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamIndexMultiAssetsServiceResponseComposition::_internal_mutable_base() {
  
  return _impl_.base_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamIndexMultiAssetsServiceResponseComposition::release_base() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.base)
  return _impl_.base_.Release();
}
inline void StreamIndexMultiAssetsServiceResponseComposition::set_allocated_base(std::string* base) {
  if (base != nullptr) {
    
  } else {
    
  }
  _impl_.base_.SetAllocated(base, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.base_.IsDefault()) {
    _impl_.base_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.base)
}

// string quote = 3;
inline void StreamIndexMultiAssetsServiceResponseComposition::clear_quote() {
  _impl_.quote_.ClearToEmpty();
}
inline const std::string& StreamIndexMultiAssetsServiceResponseComposition::quote() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.quote)
  return _internal_quote();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamIndexMultiAssetsServiceResponseComposition::set_quote(ArgT0&& arg0, ArgT... args) {
 
 _impl_.quote_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.quote)
}
inline std::string* StreamIndexMultiAssetsServiceResponseComposition::mutable_quote() {
  std::string* _s = _internal_mutable_quote();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.quote)
  return _s;
}
inline const std::string& StreamIndexMultiAssetsServiceResponseComposition::_internal_quote() const {
  return _impl_.quote_.Get();
}
inline void StreamIndexMultiAssetsServiceResponseComposition::_internal_set_quote(const std::string& value) {
  
  _impl_.quote_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamIndexMultiAssetsServiceResponseComposition::_internal_mutable_quote() {
  
  return _impl_.quote_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamIndexMultiAssetsServiceResponseComposition::release_quote() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.quote)
  return _impl_.quote_.Release();
}
inline void StreamIndexMultiAssetsServiceResponseComposition::set_allocated_quote(std::string* quote) {
  if (quote != nullptr) {
    
  } else {
    
  }
  _impl_.quote_.SetAllocated(quote, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.quote_.IsDefault()) {
    _impl_.quote_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.quote)
}

// repeated string exchanges = 4;
inline int StreamIndexMultiAssetsServiceResponseComposition::_internal_exchanges_size() const {
  return _impl_.exchanges_.size();
}
inline int StreamIndexMultiAssetsServiceResponseComposition::exchanges_size() const {
  return _internal_exchanges_size();
}
inline void StreamIndexMultiAssetsServiceResponseComposition::clear_exchanges() {
  _impl_.exchanges_.Clear();
}
inline std::string* StreamIndexMultiAssetsServiceResponseComposition::add_exchanges() {
  std::string* _s = _internal_add_exchanges();
  // @@protoc_insertion_point(field_add_mutable:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.exchanges)
  return _s;
}
inline const std::string& StreamIndexMultiAssetsServiceResponseComposition::_internal_exchanges(int index) const {
  return _impl_.exchanges_.Get(index);
}
inline const std::string& StreamIndexMultiAssetsServiceResponseComposition::exchanges(int index) const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.exchanges)
  return _internal_exchanges(index);
}
inline std::string* StreamIndexMultiAssetsServiceResponseComposition::mutable_exchanges(int index) {
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.exchanges)
  return _impl_.exchanges_.Mutable(index);
}
inline void StreamIndexMultiAssetsServiceResponseComposition::set_exchanges(int index, const std::string& value) {
  _impl_.exchanges_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.exchanges)
}
inline void StreamIndexMultiAssetsServiceResponseComposition::set_exchanges(int index, std::string&& value) {
  _impl_.exchanges_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.exchanges)
}
inline void StreamIndexMultiAssetsServiceResponseComposition::set_exchanges(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.exchanges_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.exchanges)
}
inline void StreamIndexMultiAssetsServiceResponseComposition::set_exchanges(int index, const char* value, size_t size) {
  _impl_.exchanges_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.exchanges)
}
inline std::string* StreamIndexMultiAssetsServiceResponseComposition::_internal_add_exchanges() {
  return _impl_.exchanges_.Add();
}
inline void StreamIndexMultiAssetsServiceResponseComposition::add_exchanges(const std::string& value) {
  _impl_.exchanges_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.exchanges)
}
inline void StreamIndexMultiAssetsServiceResponseComposition::add_exchanges(std::string&& value) {
  _impl_.exchanges_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.exchanges)
}
inline void StreamIndexMultiAssetsServiceResponseComposition::add_exchanges(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.exchanges_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.exchanges)
}
inline void StreamIndexMultiAssetsServiceResponseComposition::add_exchanges(const char* value, size_t size) {
  _impl_.exchanges_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.exchanges)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StreamIndexMultiAssetsServiceResponseComposition::exchanges() const {
  // @@protoc_insertion_point(field_list:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.exchanges)
  return _impl_.exchanges_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StreamIndexMultiAssetsServiceResponseComposition::mutable_exchanges() {
  // @@protoc_insertion_point(field_mutable_list:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.exchanges)
  return &_impl_.exchanges_;
}

// .kaikosdk.DataInterval instrument_interval = 5;
inline bool StreamIndexMultiAssetsServiceResponseComposition::_internal_has_instrument_interval() const {
  return this != internal_default_instance() && _impl_.instrument_interval_ != nullptr;
}
inline bool StreamIndexMultiAssetsServiceResponseComposition::has_instrument_interval() const {
  return _internal_has_instrument_interval();
}
inline const ::kaikosdk::DataInterval& StreamIndexMultiAssetsServiceResponseComposition::_internal_instrument_interval() const {
  const ::kaikosdk::DataInterval* p = _impl_.instrument_interval_;
  return p != nullptr ? *p : reinterpret_cast<const ::kaikosdk::DataInterval&>(
      ::kaikosdk::_DataInterval_default_instance_);
}
inline const ::kaikosdk::DataInterval& StreamIndexMultiAssetsServiceResponseComposition::instrument_interval() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.instrument_interval)
  return _internal_instrument_interval();
}
inline void StreamIndexMultiAssetsServiceResponseComposition::unsafe_arena_set_allocated_instrument_interval(
    ::kaikosdk::DataInterval* instrument_interval) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.instrument_interval_);
  }
  _impl_.instrument_interval_ = instrument_interval;
  if (instrument_interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.instrument_interval)
}
inline ::kaikosdk::DataInterval* StreamIndexMultiAssetsServiceResponseComposition::release_instrument_interval() {
  
  ::kaikosdk::DataInterval* temp = _impl_.instrument_interval_;
  _impl_.instrument_interval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kaikosdk::DataInterval* StreamIndexMultiAssetsServiceResponseComposition::unsafe_arena_release_instrument_interval() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.instrument_interval)
  
  ::kaikosdk::DataInterval* temp = _impl_.instrument_interval_;
  _impl_.instrument_interval_ = nullptr;
  return temp;
}
inline ::kaikosdk::DataInterval* StreamIndexMultiAssetsServiceResponseComposition::_internal_mutable_instrument_interval() {
  
  if (_impl_.instrument_interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::kaikosdk::DataInterval>(GetArenaForAllocation());
    _impl_.instrument_interval_ = p;
  }
  return _impl_.instrument_interval_;
}
inline ::kaikosdk::DataInterval* StreamIndexMultiAssetsServiceResponseComposition::mutable_instrument_interval() {
  ::kaikosdk::DataInterval* _msg = _internal_mutable_instrument_interval();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.instrument_interval)
  return _msg;
}
inline void StreamIndexMultiAssetsServiceResponseComposition::set_allocated_instrument_interval(::kaikosdk::DataInterval* instrument_interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.instrument_interval_);
  }
  if (instrument_interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(instrument_interval));
    if (message_arena != submessage_arena) {
      instrument_interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instrument_interval, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.instrument_interval_ = instrument_interval;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.instrument_interval)
}

// string currency_conversion = 6;
inline void StreamIndexMultiAssetsServiceResponseComposition::clear_currency_conversion() {
  _impl_.currency_conversion_.ClearToEmpty();
}
inline const std::string& StreamIndexMultiAssetsServiceResponseComposition::currency_conversion() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.currency_conversion)
  return _internal_currency_conversion();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamIndexMultiAssetsServiceResponseComposition::set_currency_conversion(ArgT0&& arg0, ArgT... args) {
 
 _impl_.currency_conversion_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.currency_conversion)
}
inline std::string* StreamIndexMultiAssetsServiceResponseComposition::mutable_currency_conversion() {
  std::string* _s = _internal_mutable_currency_conversion();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.currency_conversion)
  return _s;
}
inline const std::string& StreamIndexMultiAssetsServiceResponseComposition::_internal_currency_conversion() const {
  return _impl_.currency_conversion_.Get();
}
inline void StreamIndexMultiAssetsServiceResponseComposition::_internal_set_currency_conversion(const std::string& value) {
  
  _impl_.currency_conversion_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamIndexMultiAssetsServiceResponseComposition::_internal_mutable_currency_conversion() {
  
  return _impl_.currency_conversion_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamIndexMultiAssetsServiceResponseComposition::release_currency_conversion() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.currency_conversion)
  return _impl_.currency_conversion_.Release();
}
inline void StreamIndexMultiAssetsServiceResponseComposition::set_allocated_currency_conversion(std::string* currency_conversion) {
  if (currency_conversion != nullptr) {
    
  } else {
    
  }
  _impl_.currency_conversion_.SetAllocated(currency_conversion, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.currency_conversion_.IsDefault()) {
    _impl_.currency_conversion_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.currency_conversion)
}

// .google.protobuf.Timestamp ts_event = 7;
inline bool StreamIndexMultiAssetsServiceResponseComposition::_internal_has_ts_event() const {
  return this != internal_default_instance() && _impl_.ts_event_ != nullptr;
}
inline bool StreamIndexMultiAssetsServiceResponseComposition::has_ts_event() const {
  return _internal_has_ts_event();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamIndexMultiAssetsServiceResponseComposition::_internal_ts_event() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.ts_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamIndexMultiAssetsServiceResponseComposition::ts_event() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.ts_event)
  return _internal_ts_event();
}
inline void StreamIndexMultiAssetsServiceResponseComposition::unsafe_arena_set_allocated_ts_event(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_event_);
  }
  _impl_.ts_event_ = ts_event;
  if (ts_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.ts_event)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIndexMultiAssetsServiceResponseComposition::release_ts_event() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_event_;
  _impl_.ts_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIndexMultiAssetsServiceResponseComposition::unsafe_arena_release_ts_event() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.ts_event)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_event_;
  _impl_.ts_event_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIndexMultiAssetsServiceResponseComposition::_internal_mutable_ts_event() {
  
  if (_impl_.ts_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.ts_event_ = p;
  }
  return _impl_.ts_event_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIndexMultiAssetsServiceResponseComposition::mutable_ts_event() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_ts_event();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.ts_event)
  return _msg;
}
inline void StreamIndexMultiAssetsServiceResponseComposition::set_allocated_ts_event(::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_event_);
  }
  if (ts_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_event));
    if (message_arena != submessage_arena) {
      ts_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts_event, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ts_event_ = ts_event;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIndexMultiAssetsServiceResponseComposition.ts_event)
}

// -------------------------------------------------------------------

// StreamIndexMultiAssetsServiceResponsePair

// string underlying_instrument = 1;
inline void StreamIndexMultiAssetsServiceResponsePair::clear_underlying_instrument() {
  _impl_.underlying_instrument_.ClearToEmpty();
}
inline const std::string& StreamIndexMultiAssetsServiceResponsePair::underlying_instrument() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexMultiAssetsServiceResponsePair.underlying_instrument)
  return _internal_underlying_instrument();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamIndexMultiAssetsServiceResponsePair::set_underlying_instrument(ArgT0&& arg0, ArgT... args) {
 
 _impl_.underlying_instrument_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIndexMultiAssetsServiceResponsePair.underlying_instrument)
}
inline std::string* StreamIndexMultiAssetsServiceResponsePair::mutable_underlying_instrument() {
  std::string* _s = _internal_mutable_underlying_instrument();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIndexMultiAssetsServiceResponsePair.underlying_instrument)
  return _s;
}
inline const std::string& StreamIndexMultiAssetsServiceResponsePair::_internal_underlying_instrument() const {
  return _impl_.underlying_instrument_.Get();
}
inline void StreamIndexMultiAssetsServiceResponsePair::_internal_set_underlying_instrument(const std::string& value) {
  
  _impl_.underlying_instrument_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamIndexMultiAssetsServiceResponsePair::_internal_mutable_underlying_instrument() {
  
  return _impl_.underlying_instrument_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamIndexMultiAssetsServiceResponsePair::release_underlying_instrument() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIndexMultiAssetsServiceResponsePair.underlying_instrument)
  return _impl_.underlying_instrument_.Release();
}
inline void StreamIndexMultiAssetsServiceResponsePair::set_allocated_underlying_instrument(std::string* underlying_instrument) {
  if (underlying_instrument != nullptr) {
    
  } else {
    
  }
  _impl_.underlying_instrument_.SetAllocated(underlying_instrument, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.underlying_instrument_.IsDefault()) {
    _impl_.underlying_instrument_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIndexMultiAssetsServiceResponsePair.underlying_instrument)
}

// .google.protobuf.DoubleValue underlying_price = 2;
inline bool StreamIndexMultiAssetsServiceResponsePair::_internal_has_underlying_price() const {
  return this != internal_default_instance() && _impl_.underlying_price_ != nullptr;
}
inline bool StreamIndexMultiAssetsServiceResponsePair::has_underlying_price() const {
  return _internal_has_underlying_price();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& StreamIndexMultiAssetsServiceResponsePair::_internal_underlying_price() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = _impl_.underlying_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& StreamIndexMultiAssetsServiceResponsePair::underlying_price() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexMultiAssetsServiceResponsePair.underlying_price)
  return _internal_underlying_price();
}
inline void StreamIndexMultiAssetsServiceResponsePair::unsafe_arena_set_allocated_underlying_price(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* underlying_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.underlying_price_);
  }
  _impl_.underlying_price_ = underlying_price;
  if (underlying_price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamIndexMultiAssetsServiceResponsePair.underlying_price)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* StreamIndexMultiAssetsServiceResponsePair::release_underlying_price() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.underlying_price_;
  _impl_.underlying_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* StreamIndexMultiAssetsServiceResponsePair::unsafe_arena_release_underlying_price() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIndexMultiAssetsServiceResponsePair.underlying_price)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = _impl_.underlying_price_;
  _impl_.underlying_price_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* StreamIndexMultiAssetsServiceResponsePair::_internal_mutable_underlying_price() {
  
  if (_impl_.underlying_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    _impl_.underlying_price_ = p;
  }
  return _impl_.underlying_price_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* StreamIndexMultiAssetsServiceResponsePair::mutable_underlying_price() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_underlying_price();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIndexMultiAssetsServiceResponsePair.underlying_price)
  return _msg;
}
inline void StreamIndexMultiAssetsServiceResponsePair::set_allocated_underlying_price(::PROTOBUF_NAMESPACE_ID::DoubleValue* underlying_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.underlying_price_);
  }
  if (underlying_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(underlying_price));
    if (message_arena != submessage_arena) {
      underlying_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, underlying_price, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.underlying_price_ = underlying_price;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIndexMultiAssetsServiceResponsePair.underlying_price)
}

// double weighting_factor = 3;
inline void StreamIndexMultiAssetsServiceResponsePair::clear_weighting_factor() {
  _impl_.weighting_factor_ = 0;
}
inline double StreamIndexMultiAssetsServiceResponsePair::_internal_weighting_factor() const {
  return _impl_.weighting_factor_;
}
inline double StreamIndexMultiAssetsServiceResponsePair::weighting_factor() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexMultiAssetsServiceResponsePair.weighting_factor)
  return _internal_weighting_factor();
}
inline void StreamIndexMultiAssetsServiceResponsePair::_internal_set_weighting_factor(double value) {
  
  _impl_.weighting_factor_ = value;
}
inline void StreamIndexMultiAssetsServiceResponsePair::set_weighting_factor(double value) {
  _internal_set_weighting_factor(value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIndexMultiAssetsServiceResponsePair.weighting_factor)
}

// double capping_factor = 4;
inline void StreamIndexMultiAssetsServiceResponsePair::clear_capping_factor() {
  _impl_.capping_factor_ = 0;
}
inline double StreamIndexMultiAssetsServiceResponsePair::_internal_capping_factor() const {
  return _impl_.capping_factor_;
}
inline double StreamIndexMultiAssetsServiceResponsePair::capping_factor() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexMultiAssetsServiceResponsePair.capping_factor)
  return _internal_capping_factor();
}
inline void StreamIndexMultiAssetsServiceResponsePair::_internal_set_capping_factor(double value) {
  
  _impl_.capping_factor_ = value;
}
inline void StreamIndexMultiAssetsServiceResponsePair::set_capping_factor(double value) {
  _internal_set_capping_factor(value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIndexMultiAssetsServiceResponsePair.capping_factor)
}

// double currency_conversion_factor = 5;
inline void StreamIndexMultiAssetsServiceResponsePair::clear_currency_conversion_factor() {
  _impl_.currency_conversion_factor_ = 0;
}
inline double StreamIndexMultiAssetsServiceResponsePair::_internal_currency_conversion_factor() const {
  return _impl_.currency_conversion_factor_;
}
inline double StreamIndexMultiAssetsServiceResponsePair::currency_conversion_factor() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexMultiAssetsServiceResponsePair.currency_conversion_factor)
  return _internal_currency_conversion_factor();
}
inline void StreamIndexMultiAssetsServiceResponsePair::_internal_set_currency_conversion_factor(double value) {
  
  _impl_.currency_conversion_factor_ = value;
}
inline void StreamIndexMultiAssetsServiceResponsePair::set_currency_conversion_factor(double value) {
  _internal_set_currency_conversion_factor(value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIndexMultiAssetsServiceResponsePair.currency_conversion_factor)
}

// -------------------------------------------------------------------

// StreamIndexMultiAssetsServiceResponsePrices

// double index_value = 1;
inline void StreamIndexMultiAssetsServiceResponsePrices::clear_index_value() {
  _impl_.index_value_ = 0;
}
inline double StreamIndexMultiAssetsServiceResponsePrices::_internal_index_value() const {
  return _impl_.index_value_;
}
inline double StreamIndexMultiAssetsServiceResponsePrices::index_value() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexMultiAssetsServiceResponsePrices.index_value)
  return _internal_index_value();
}
inline void StreamIndexMultiAssetsServiceResponsePrices::_internal_set_index_value(double value) {
  
  _impl_.index_value_ = value;
}
inline void StreamIndexMultiAssetsServiceResponsePrices::set_index_value(double value) {
  _internal_set_index_value(value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIndexMultiAssetsServiceResponsePrices.index_value)
}

// double divisor = 2;
inline void StreamIndexMultiAssetsServiceResponsePrices::clear_divisor() {
  _impl_.divisor_ = 0;
}
inline double StreamIndexMultiAssetsServiceResponsePrices::_internal_divisor() const {
  return _impl_.divisor_;
}
inline double StreamIndexMultiAssetsServiceResponsePrices::divisor() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexMultiAssetsServiceResponsePrices.divisor)
  return _internal_divisor();
}
inline void StreamIndexMultiAssetsServiceResponsePrices::_internal_set_divisor(double value) {
  
  _impl_.divisor_ = value;
}
inline void StreamIndexMultiAssetsServiceResponsePrices::set_divisor(double value) {
  _internal_set_divisor(value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIndexMultiAssetsServiceResponsePrices.divisor)
}

// repeated .kaikosdk.StreamIndexMultiAssetsServiceResponsePair pairs = 3;
inline int StreamIndexMultiAssetsServiceResponsePrices::_internal_pairs_size() const {
  return _impl_.pairs_.size();
}
inline int StreamIndexMultiAssetsServiceResponsePrices::pairs_size() const {
  return _internal_pairs_size();
}
inline void StreamIndexMultiAssetsServiceResponsePrices::clear_pairs() {
  _impl_.pairs_.Clear();
}
inline ::kaikosdk::StreamIndexMultiAssetsServiceResponsePair* StreamIndexMultiAssetsServiceResponsePrices::mutable_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIndexMultiAssetsServiceResponsePrices.pairs)
  return _impl_.pairs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::StreamIndexMultiAssetsServiceResponsePair >*
StreamIndexMultiAssetsServiceResponsePrices::mutable_pairs() {
  // @@protoc_insertion_point(field_mutable_list:kaikosdk.StreamIndexMultiAssetsServiceResponsePrices.pairs)
  return &_impl_.pairs_;
}
inline const ::kaikosdk::StreamIndexMultiAssetsServiceResponsePair& StreamIndexMultiAssetsServiceResponsePrices::_internal_pairs(int index) const {
  return _impl_.pairs_.Get(index);
}
inline const ::kaikosdk::StreamIndexMultiAssetsServiceResponsePair& StreamIndexMultiAssetsServiceResponsePrices::pairs(int index) const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexMultiAssetsServiceResponsePrices.pairs)
  return _internal_pairs(index);
}
inline ::kaikosdk::StreamIndexMultiAssetsServiceResponsePair* StreamIndexMultiAssetsServiceResponsePrices::_internal_add_pairs() {
  return _impl_.pairs_.Add();
}
inline ::kaikosdk::StreamIndexMultiAssetsServiceResponsePair* StreamIndexMultiAssetsServiceResponsePrices::add_pairs() {
  ::kaikosdk::StreamIndexMultiAssetsServiceResponsePair* _add = _internal_add_pairs();
  // @@protoc_insertion_point(field_add:kaikosdk.StreamIndexMultiAssetsServiceResponsePrices.pairs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::StreamIndexMultiAssetsServiceResponsePair >&
StreamIndexMultiAssetsServiceResponsePrices::pairs() const {
  // @@protoc_insertion_point(field_list:kaikosdk.StreamIndexMultiAssetsServiceResponsePrices.pairs)
  return _impl_.pairs_;
}

// -------------------------------------------------------------------

// StreamIndexMultiAssetsServiceResponseV1

// .kaikosdk.StreamIndexCommodity commodity = 1;
inline void StreamIndexMultiAssetsServiceResponseV1::clear_commodity() {
  _impl_.commodity_ = 0;
}
inline ::kaikosdk::StreamIndexCommodity StreamIndexMultiAssetsServiceResponseV1::_internal_commodity() const {
  return static_cast< ::kaikosdk::StreamIndexCommodity >(_impl_.commodity_);
}
inline ::kaikosdk::StreamIndexCommodity StreamIndexMultiAssetsServiceResponseV1::commodity() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.commodity)
  return _internal_commodity();
}
inline void StreamIndexMultiAssetsServiceResponseV1::_internal_set_commodity(::kaikosdk::StreamIndexCommodity value) {
  
  _impl_.commodity_ = value;
}
inline void StreamIndexMultiAssetsServiceResponseV1::set_commodity(::kaikosdk::StreamIndexCommodity value) {
  _internal_set_commodity(value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.commodity)
}

// string index_code = 2;
inline void StreamIndexMultiAssetsServiceResponseV1::clear_index_code() {
  _impl_.index_code_.ClearToEmpty();
}
inline const std::string& StreamIndexMultiAssetsServiceResponseV1::index_code() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.index_code)
  return _internal_index_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamIndexMultiAssetsServiceResponseV1::set_index_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.index_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.index_code)
}
inline std::string* StreamIndexMultiAssetsServiceResponseV1::mutable_index_code() {
  std::string* _s = _internal_mutable_index_code();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.index_code)
  return _s;
}
inline const std::string& StreamIndexMultiAssetsServiceResponseV1::_internal_index_code() const {
  return _impl_.index_code_.Get();
}
inline void StreamIndexMultiAssetsServiceResponseV1::_internal_set_index_code(const std::string& value) {
  
  _impl_.index_code_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamIndexMultiAssetsServiceResponseV1::_internal_mutable_index_code() {
  
  return _impl_.index_code_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamIndexMultiAssetsServiceResponseV1::release_index_code() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.index_code)
  return _impl_.index_code_.Release();
}
inline void StreamIndexMultiAssetsServiceResponseV1::set_allocated_index_code(std::string* index_code) {
  if (index_code != nullptr) {
    
  } else {
    
  }
  _impl_.index_code_.SetAllocated(index_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.index_code_.IsDefault()) {
    _impl_.index_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.index_code)
}

// .kaikosdk.DataInterval interval = 3;
inline bool StreamIndexMultiAssetsServiceResponseV1::_internal_has_interval() const {
  return this != internal_default_instance() && _impl_.interval_ != nullptr;
}
inline bool StreamIndexMultiAssetsServiceResponseV1::has_interval() const {
  return _internal_has_interval();
}
inline const ::kaikosdk::DataInterval& StreamIndexMultiAssetsServiceResponseV1::_internal_interval() const {
  const ::kaikosdk::DataInterval* p = _impl_.interval_;
  return p != nullptr ? *p : reinterpret_cast<const ::kaikosdk::DataInterval&>(
      ::kaikosdk::_DataInterval_default_instance_);
}
inline const ::kaikosdk::DataInterval& StreamIndexMultiAssetsServiceResponseV1::interval() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.interval)
  return _internal_interval();
}
inline void StreamIndexMultiAssetsServiceResponseV1::unsafe_arena_set_allocated_interval(
    ::kaikosdk::DataInterval* interval) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_);
  }
  _impl_.interval_ = interval;
  if (interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.interval)
}
inline ::kaikosdk::DataInterval* StreamIndexMultiAssetsServiceResponseV1::release_interval() {
  
  ::kaikosdk::DataInterval* temp = _impl_.interval_;
  _impl_.interval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kaikosdk::DataInterval* StreamIndexMultiAssetsServiceResponseV1::unsafe_arena_release_interval() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.interval)
  
  ::kaikosdk::DataInterval* temp = _impl_.interval_;
  _impl_.interval_ = nullptr;
  return temp;
}
inline ::kaikosdk::DataInterval* StreamIndexMultiAssetsServiceResponseV1::_internal_mutable_interval() {
  
  if (_impl_.interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::kaikosdk::DataInterval>(GetArenaForAllocation());
    _impl_.interval_ = p;
  }
  return _impl_.interval_;
}
inline ::kaikosdk::DataInterval* StreamIndexMultiAssetsServiceResponseV1::mutable_interval() {
  ::kaikosdk::DataInterval* _msg = _internal_mutable_interval();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.interval)
  return _msg;
}
inline void StreamIndexMultiAssetsServiceResponseV1::set_allocated_interval(::kaikosdk::DataInterval* interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interval_);
  }
  if (interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval));
    if (message_arena != submessage_arena) {
      interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.interval_ = interval;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.interval)
}

// string main_quote = 4;
inline void StreamIndexMultiAssetsServiceResponseV1::clear_main_quote() {
  _impl_.main_quote_.ClearToEmpty();
}
inline const std::string& StreamIndexMultiAssetsServiceResponseV1::main_quote() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.main_quote)
  return _internal_main_quote();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamIndexMultiAssetsServiceResponseV1::set_main_quote(ArgT0&& arg0, ArgT... args) {
 
 _impl_.main_quote_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.main_quote)
}
inline std::string* StreamIndexMultiAssetsServiceResponseV1::mutable_main_quote() {
  std::string* _s = _internal_mutable_main_quote();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.main_quote)
  return _s;
}
inline const std::string& StreamIndexMultiAssetsServiceResponseV1::_internal_main_quote() const {
  return _impl_.main_quote_.Get();
}
inline void StreamIndexMultiAssetsServiceResponseV1::_internal_set_main_quote(const std::string& value) {
  
  _impl_.main_quote_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamIndexMultiAssetsServiceResponseV1::_internal_mutable_main_quote() {
  
  return _impl_.main_quote_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamIndexMultiAssetsServiceResponseV1::release_main_quote() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.main_quote)
  return _impl_.main_quote_.Release();
}
inline void StreamIndexMultiAssetsServiceResponseV1::set_allocated_main_quote(std::string* main_quote) {
  if (main_quote != nullptr) {
    
  } else {
    
  }
  _impl_.main_quote_.SetAllocated(main_quote, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.main_quote_.IsDefault()) {
    _impl_.main_quote_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.main_quote)
}

// repeated .kaikosdk.StreamIndexMultiAssetsServiceResponseComposition compositions = 5;
inline int StreamIndexMultiAssetsServiceResponseV1::_internal_compositions_size() const {
  return _impl_.compositions_.size();
}
inline int StreamIndexMultiAssetsServiceResponseV1::compositions_size() const {
  return _internal_compositions_size();
}
inline void StreamIndexMultiAssetsServiceResponseV1::clear_compositions() {
  _impl_.compositions_.Clear();
}
inline ::kaikosdk::StreamIndexMultiAssetsServiceResponseComposition* StreamIndexMultiAssetsServiceResponseV1::mutable_compositions(int index) {
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.compositions)
  return _impl_.compositions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::StreamIndexMultiAssetsServiceResponseComposition >*
StreamIndexMultiAssetsServiceResponseV1::mutable_compositions() {
  // @@protoc_insertion_point(field_mutable_list:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.compositions)
  return &_impl_.compositions_;
}
inline const ::kaikosdk::StreamIndexMultiAssetsServiceResponseComposition& StreamIndexMultiAssetsServiceResponseV1::_internal_compositions(int index) const {
  return _impl_.compositions_.Get(index);
}
inline const ::kaikosdk::StreamIndexMultiAssetsServiceResponseComposition& StreamIndexMultiAssetsServiceResponseV1::compositions(int index) const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.compositions)
  return _internal_compositions(index);
}
inline ::kaikosdk::StreamIndexMultiAssetsServiceResponseComposition* StreamIndexMultiAssetsServiceResponseV1::_internal_add_compositions() {
  return _impl_.compositions_.Add();
}
inline ::kaikosdk::StreamIndexMultiAssetsServiceResponseComposition* StreamIndexMultiAssetsServiceResponseV1::add_compositions() {
  ::kaikosdk::StreamIndexMultiAssetsServiceResponseComposition* _add = _internal_add_compositions();
  // @@protoc_insertion_point(field_add:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.compositions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::StreamIndexMultiAssetsServiceResponseComposition >&
StreamIndexMultiAssetsServiceResponseV1::compositions() const {
  // @@protoc_insertion_point(field_list:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.compositions)
  return _impl_.compositions_;
}

// .kaikosdk.StreamIndexMultiAssetsServiceResponsePrices price = 6;
inline bool StreamIndexMultiAssetsServiceResponseV1::_internal_has_price() const {
  return this != internal_default_instance() && _impl_.price_ != nullptr;
}
inline bool StreamIndexMultiAssetsServiceResponseV1::has_price() const {
  return _internal_has_price();
}
inline void StreamIndexMultiAssetsServiceResponseV1::clear_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
}
inline const ::kaikosdk::StreamIndexMultiAssetsServiceResponsePrices& StreamIndexMultiAssetsServiceResponseV1::_internal_price() const {
  const ::kaikosdk::StreamIndexMultiAssetsServiceResponsePrices* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::kaikosdk::StreamIndexMultiAssetsServiceResponsePrices&>(
      ::kaikosdk::_StreamIndexMultiAssetsServiceResponsePrices_default_instance_);
}
inline const ::kaikosdk::StreamIndexMultiAssetsServiceResponsePrices& StreamIndexMultiAssetsServiceResponseV1::price() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.price)
  return _internal_price();
}
inline void StreamIndexMultiAssetsServiceResponseV1::unsafe_arena_set_allocated_price(
    ::kaikosdk::StreamIndexMultiAssetsServiceResponsePrices* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = price;
  if (price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.price)
}
inline ::kaikosdk::StreamIndexMultiAssetsServiceResponsePrices* StreamIndexMultiAssetsServiceResponseV1::release_price() {
  
  ::kaikosdk::StreamIndexMultiAssetsServiceResponsePrices* temp = _impl_.price_;
  _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kaikosdk::StreamIndexMultiAssetsServiceResponsePrices* StreamIndexMultiAssetsServiceResponseV1::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.price)
  
  ::kaikosdk::StreamIndexMultiAssetsServiceResponsePrices* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::kaikosdk::StreamIndexMultiAssetsServiceResponsePrices* StreamIndexMultiAssetsServiceResponseV1::_internal_mutable_price() {
  
  if (_impl_.price_ == nullptr) {
    auto* p = CreateMaybeMessage<::kaikosdk::StreamIndexMultiAssetsServiceResponsePrices>(GetArenaForAllocation());
    _impl_.price_ = p;
  }
  return _impl_.price_;
}
inline ::kaikosdk::StreamIndexMultiAssetsServiceResponsePrices* StreamIndexMultiAssetsServiceResponseV1::mutable_price() {
  ::kaikosdk::StreamIndexMultiAssetsServiceResponsePrices* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.price)
  return _msg;
}
inline void StreamIndexMultiAssetsServiceResponseV1::set_allocated_price(::kaikosdk::StreamIndexMultiAssetsServiceResponsePrices* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.price_;
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(price);
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.price)
}

// .google.protobuf.Timestamp ts_event = 7;
inline bool StreamIndexMultiAssetsServiceResponseV1::_internal_has_ts_event() const {
  return this != internal_default_instance() && _impl_.ts_event_ != nullptr;
}
inline bool StreamIndexMultiAssetsServiceResponseV1::has_ts_event() const {
  return _internal_has_ts_event();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamIndexMultiAssetsServiceResponseV1::_internal_ts_event() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.ts_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamIndexMultiAssetsServiceResponseV1::ts_event() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.ts_event)
  return _internal_ts_event();
}
inline void StreamIndexMultiAssetsServiceResponseV1::unsafe_arena_set_allocated_ts_event(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_event_);
  }
  _impl_.ts_event_ = ts_event;
  if (ts_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.ts_event)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIndexMultiAssetsServiceResponseV1::release_ts_event() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_event_;
  _impl_.ts_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIndexMultiAssetsServiceResponseV1::unsafe_arena_release_ts_event() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.ts_event)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_event_;
  _impl_.ts_event_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIndexMultiAssetsServiceResponseV1::_internal_mutable_ts_event() {
  
  if (_impl_.ts_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.ts_event_ = p;
  }
  return _impl_.ts_event_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIndexMultiAssetsServiceResponseV1::mutable_ts_event() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_ts_event();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.ts_event)
  return _msg;
}
inline void StreamIndexMultiAssetsServiceResponseV1::set_allocated_ts_event(::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_event_);
  }
  if (ts_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_event));
    if (message_arena != submessage_arena) {
      ts_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts_event, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ts_event_ = ts_event;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.ts_event)
}

// .google.protobuf.Timestamp ts_compute = 8;
inline bool StreamIndexMultiAssetsServiceResponseV1::_internal_has_ts_compute() const {
  return this != internal_default_instance() && _impl_.ts_compute_ != nullptr;
}
inline bool StreamIndexMultiAssetsServiceResponseV1::has_ts_compute() const {
  return _internal_has_ts_compute();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamIndexMultiAssetsServiceResponseV1::_internal_ts_compute() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.ts_compute_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamIndexMultiAssetsServiceResponseV1::ts_compute() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.ts_compute)
  return _internal_ts_compute();
}
inline void StreamIndexMultiAssetsServiceResponseV1::unsafe_arena_set_allocated_ts_compute(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_compute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_compute_);
  }
  _impl_.ts_compute_ = ts_compute;
  if (ts_compute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.ts_compute)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIndexMultiAssetsServiceResponseV1::release_ts_compute() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_compute_;
  _impl_.ts_compute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIndexMultiAssetsServiceResponseV1::unsafe_arena_release_ts_compute() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.ts_compute)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_compute_;
  _impl_.ts_compute_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIndexMultiAssetsServiceResponseV1::_internal_mutable_ts_compute() {
  
  if (_impl_.ts_compute_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.ts_compute_ = p;
  }
  return _impl_.ts_compute_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIndexMultiAssetsServiceResponseV1::mutable_ts_compute() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_ts_compute();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.ts_compute)
  return _msg;
}
inline void StreamIndexMultiAssetsServiceResponseV1::set_allocated_ts_compute(::PROTOBUF_NAMESPACE_ID::Timestamp* ts_compute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_compute_);
  }
  if (ts_compute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_compute));
    if (message_arena != submessage_arena) {
      ts_compute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts_compute, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ts_compute_ = ts_compute;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIndexMultiAssetsServiceResponseV1.ts_compute)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kaikosdk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2findex_5fmulti_5fassets_5fv1_2fresponse_2eproto
