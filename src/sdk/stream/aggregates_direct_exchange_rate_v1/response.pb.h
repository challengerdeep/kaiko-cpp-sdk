// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk/stream/aggregates_direct_exchange_rate_v1/response.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2faggregates_5fdirect_5fexchange_5frate_5fv1_2fresponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2faggregates_5fdirect_5fexchange_5frate_5fv1_2fresponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "sdk/core/source_data.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sdk_2fstream_2faggregates_5fdirect_5fexchange_5frate_5fv1_2fresponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sdk_2fstream_2faggregates_5fdirect_5fexchange_5frate_5fv1_2fresponse_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sdk_2fstream_2faggregates_5fdirect_5fexchange_5frate_5fv1_2fresponse_2eproto;
namespace kaikosdk {
class StreamAggregatesDirectExchangeRateResponseV1;
struct StreamAggregatesDirectExchangeRateResponseV1DefaultTypeInternal;
extern StreamAggregatesDirectExchangeRateResponseV1DefaultTypeInternal _StreamAggregatesDirectExchangeRateResponseV1_default_instance_;
}  // namespace kaikosdk
PROTOBUF_NAMESPACE_OPEN
template<> ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1* Arena::CreateMaybeMessage<::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kaikosdk {

// ===================================================================

class StreamAggregatesDirectExchangeRateResponseV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1) */ {
 public:
  inline StreamAggregatesDirectExchangeRateResponseV1() : StreamAggregatesDirectExchangeRateResponseV1(nullptr) {}
  ~StreamAggregatesDirectExchangeRateResponseV1() override;
  explicit PROTOBUF_CONSTEXPR StreamAggregatesDirectExchangeRateResponseV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamAggregatesDirectExchangeRateResponseV1(const StreamAggregatesDirectExchangeRateResponseV1& from);
  StreamAggregatesDirectExchangeRateResponseV1(StreamAggregatesDirectExchangeRateResponseV1&& from) noexcept
    : StreamAggregatesDirectExchangeRateResponseV1() {
    *this = ::std::move(from);
  }

  inline StreamAggregatesDirectExchangeRateResponseV1& operator=(const StreamAggregatesDirectExchangeRateResponseV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamAggregatesDirectExchangeRateResponseV1& operator=(StreamAggregatesDirectExchangeRateResponseV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamAggregatesDirectExchangeRateResponseV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamAggregatesDirectExchangeRateResponseV1* internal_default_instance() {
    return reinterpret_cast<const StreamAggregatesDirectExchangeRateResponseV1*>(
               &_StreamAggregatesDirectExchangeRateResponseV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StreamAggregatesDirectExchangeRateResponseV1& a, StreamAggregatesDirectExchangeRateResponseV1& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamAggregatesDirectExchangeRateResponseV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamAggregatesDirectExchangeRateResponseV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamAggregatesDirectExchangeRateResponseV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamAggregatesDirectExchangeRateResponseV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamAggregatesDirectExchangeRateResponseV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamAggregatesDirectExchangeRateResponseV1& from) {
    StreamAggregatesDirectExchangeRateResponseV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamAggregatesDirectExchangeRateResponseV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.StreamAggregatesDirectExchangeRateResponseV1";
  }
  protected:
  explicit StreamAggregatesDirectExchangeRateResponseV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourcesFieldNumber = 5,
    kAggregateFieldNumber = 1,
    kCodeFieldNumber = 2,
    kPriceFieldNumber = 3,
    kSequenceIdFieldNumber = 4,
    kUidFieldNumber = 7,
    kTimestampFieldNumber = 6,
  };
  // repeated .kaikosdk.SourceData sources = 5;
  int sources_size() const;
  private:
  int _internal_sources_size() const;
  public:
  void clear_sources();
  ::kaikosdk::SourceData* mutable_sources(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::SourceData >*
      mutable_sources();
  private:
  const ::kaikosdk::SourceData& _internal_sources(int index) const;
  ::kaikosdk::SourceData* _internal_add_sources();
  public:
  const ::kaikosdk::SourceData& sources(int index) const;
  ::kaikosdk::SourceData* add_sources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::SourceData >&
      sources() const;

  // string aggregate = 1;
  void clear_aggregate();
  const std::string& aggregate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_aggregate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_aggregate();
  PROTOBUF_NODISCARD std::string* release_aggregate();
  void set_allocated_aggregate(std::string* aggregate);
  private:
  const std::string& _internal_aggregate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_aggregate(const std::string& value);
  std::string* _internal_mutable_aggregate();
  public:

  // string code = 2;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string price = 3;
  void clear_price();
  const std::string& price() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_price(ArgT0&& arg0, ArgT... args);
  std::string* mutable_price();
  PROTOBUF_NODISCARD std::string* release_price();
  void set_allocated_price(std::string* price);
  private:
  const std::string& _internal_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_price(const std::string& value);
  std::string* _internal_mutable_price();
  public:

  // string sequence_id = 4;
  void clear_sequence_id();
  const std::string& sequence_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sequence_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sequence_id();
  PROTOBUF_NODISCARD std::string* release_sequence_id();
  void set_allocated_sequence_id(std::string* sequence_id);
  private:
  const std::string& _internal_sequence_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sequence_id(const std::string& value);
  std::string* _internal_mutable_sequence_id();
  public:

  // string uid = 7;
  void clear_uid();
  const std::string& uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // .google.protobuf.Timestamp timestamp = 6;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // @@protoc_insertion_point(class_scope:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::SourceData > sources_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aggregate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sequence_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2fstream_2faggregates_5fdirect_5fexchange_5frate_5fv1_2fresponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StreamAggregatesDirectExchangeRateResponseV1

// string aggregate = 1;
inline void StreamAggregatesDirectExchangeRateResponseV1::clear_aggregate() {
  _impl_.aggregate_.ClearToEmpty();
}
inline const std::string& StreamAggregatesDirectExchangeRateResponseV1::aggregate() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.aggregate)
  return _internal_aggregate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamAggregatesDirectExchangeRateResponseV1::set_aggregate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.aggregate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.aggregate)
}
inline std::string* StreamAggregatesDirectExchangeRateResponseV1::mutable_aggregate() {
  std::string* _s = _internal_mutable_aggregate();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.aggregate)
  return _s;
}
inline const std::string& StreamAggregatesDirectExchangeRateResponseV1::_internal_aggregate() const {
  return _impl_.aggregate_.Get();
}
inline void StreamAggregatesDirectExchangeRateResponseV1::_internal_set_aggregate(const std::string& value) {
  
  _impl_.aggregate_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamAggregatesDirectExchangeRateResponseV1::_internal_mutable_aggregate() {
  
  return _impl_.aggregate_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamAggregatesDirectExchangeRateResponseV1::release_aggregate() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.aggregate)
  return _impl_.aggregate_.Release();
}
inline void StreamAggregatesDirectExchangeRateResponseV1::set_allocated_aggregate(std::string* aggregate) {
  if (aggregate != nullptr) {
    
  } else {
    
  }
  _impl_.aggregate_.SetAllocated(aggregate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.aggregate_.IsDefault()) {
    _impl_.aggregate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.aggregate)
}

// string code = 2;
inline void StreamAggregatesDirectExchangeRateResponseV1::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& StreamAggregatesDirectExchangeRateResponseV1::code() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamAggregatesDirectExchangeRateResponseV1::set_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.code)
}
inline std::string* StreamAggregatesDirectExchangeRateResponseV1::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.code)
  return _s;
}
inline const std::string& StreamAggregatesDirectExchangeRateResponseV1::_internal_code() const {
  return _impl_.code_.Get();
}
inline void StreamAggregatesDirectExchangeRateResponseV1::_internal_set_code(const std::string& value) {
  
  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamAggregatesDirectExchangeRateResponseV1::_internal_mutable_code() {
  
  return _impl_.code_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamAggregatesDirectExchangeRateResponseV1::release_code() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.code)
  return _impl_.code_.Release();
}
inline void StreamAggregatesDirectExchangeRateResponseV1::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  _impl_.code_.SetAllocated(code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.code_.IsDefault()) {
    _impl_.code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.code)
}

// string price = 3;
inline void StreamAggregatesDirectExchangeRateResponseV1::clear_price() {
  _impl_.price_.ClearToEmpty();
}
inline const std::string& StreamAggregatesDirectExchangeRateResponseV1::price() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.price)
  return _internal_price();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamAggregatesDirectExchangeRateResponseV1::set_price(ArgT0&& arg0, ArgT... args) {
 
 _impl_.price_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.price)
}
inline std::string* StreamAggregatesDirectExchangeRateResponseV1::mutable_price() {
  std::string* _s = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.price)
  return _s;
}
inline const std::string& StreamAggregatesDirectExchangeRateResponseV1::_internal_price() const {
  return _impl_.price_.Get();
}
inline void StreamAggregatesDirectExchangeRateResponseV1::_internal_set_price(const std::string& value) {
  
  _impl_.price_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamAggregatesDirectExchangeRateResponseV1::_internal_mutable_price() {
  
  return _impl_.price_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamAggregatesDirectExchangeRateResponseV1::release_price() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.price)
  return _impl_.price_.Release();
}
inline void StreamAggregatesDirectExchangeRateResponseV1::set_allocated_price(std::string* price) {
  if (price != nullptr) {
    
  } else {
    
  }
  _impl_.price_.SetAllocated(price, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.price_.IsDefault()) {
    _impl_.price_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.price)
}

// string sequence_id = 4;
inline void StreamAggregatesDirectExchangeRateResponseV1::clear_sequence_id() {
  _impl_.sequence_id_.ClearToEmpty();
}
inline const std::string& StreamAggregatesDirectExchangeRateResponseV1::sequence_id() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.sequence_id)
  return _internal_sequence_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamAggregatesDirectExchangeRateResponseV1::set_sequence_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sequence_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.sequence_id)
}
inline std::string* StreamAggregatesDirectExchangeRateResponseV1::mutable_sequence_id() {
  std::string* _s = _internal_mutable_sequence_id();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.sequence_id)
  return _s;
}
inline const std::string& StreamAggregatesDirectExchangeRateResponseV1::_internal_sequence_id() const {
  return _impl_.sequence_id_.Get();
}
inline void StreamAggregatesDirectExchangeRateResponseV1::_internal_set_sequence_id(const std::string& value) {
  
  _impl_.sequence_id_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamAggregatesDirectExchangeRateResponseV1::_internal_mutable_sequence_id() {
  
  return _impl_.sequence_id_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamAggregatesDirectExchangeRateResponseV1::release_sequence_id() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.sequence_id)
  return _impl_.sequence_id_.Release();
}
inline void StreamAggregatesDirectExchangeRateResponseV1::set_allocated_sequence_id(std::string* sequence_id) {
  if (sequence_id != nullptr) {
    
  } else {
    
  }
  _impl_.sequence_id_.SetAllocated(sequence_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sequence_id_.IsDefault()) {
    _impl_.sequence_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.sequence_id)
}

// repeated .kaikosdk.SourceData sources = 5;
inline int StreamAggregatesDirectExchangeRateResponseV1::_internal_sources_size() const {
  return _impl_.sources_.size();
}
inline int StreamAggregatesDirectExchangeRateResponseV1::sources_size() const {
  return _internal_sources_size();
}
inline ::kaikosdk::SourceData* StreamAggregatesDirectExchangeRateResponseV1::mutable_sources(int index) {
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.sources)
  return _impl_.sources_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::SourceData >*
StreamAggregatesDirectExchangeRateResponseV1::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_list:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.sources)
  return &_impl_.sources_;
}
inline const ::kaikosdk::SourceData& StreamAggregatesDirectExchangeRateResponseV1::_internal_sources(int index) const {
  return _impl_.sources_.Get(index);
}
inline const ::kaikosdk::SourceData& StreamAggregatesDirectExchangeRateResponseV1::sources(int index) const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.sources)
  return _internal_sources(index);
}
inline ::kaikosdk::SourceData* StreamAggregatesDirectExchangeRateResponseV1::_internal_add_sources() {
  return _impl_.sources_.Add();
}
inline ::kaikosdk::SourceData* StreamAggregatesDirectExchangeRateResponseV1::add_sources() {
  ::kaikosdk::SourceData* _add = _internal_add_sources();
  // @@protoc_insertion_point(field_add:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.sources)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kaikosdk::SourceData >&
StreamAggregatesDirectExchangeRateResponseV1::sources() const {
  // @@protoc_insertion_point(field_list:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.sources)
  return _impl_.sources_;
}

// .google.protobuf.Timestamp timestamp = 6;
inline bool StreamAggregatesDirectExchangeRateResponseV1::_internal_has_timestamp() const {
  return this != internal_default_instance() && _impl_.timestamp_ != nullptr;
}
inline bool StreamAggregatesDirectExchangeRateResponseV1::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamAggregatesDirectExchangeRateResponseV1::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamAggregatesDirectExchangeRateResponseV1::timestamp() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.timestamp)
  return _internal_timestamp();
}
inline void StreamAggregatesDirectExchangeRateResponseV1::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamAggregatesDirectExchangeRateResponseV1::release_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamAggregatesDirectExchangeRateResponseV1::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamAggregatesDirectExchangeRateResponseV1::_internal_mutable_timestamp() {
  
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamAggregatesDirectExchangeRateResponseV1::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.timestamp)
  return _msg;
}
inline void StreamAggregatesDirectExchangeRateResponseV1::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.timestamp)
}

// string uid = 7;
inline void StreamAggregatesDirectExchangeRateResponseV1::clear_uid() {
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& StreamAggregatesDirectExchangeRateResponseV1::uid() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.uid)
  return _internal_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamAggregatesDirectExchangeRateResponseV1::set_uid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.uid)
}
inline std::string* StreamAggregatesDirectExchangeRateResponseV1::mutable_uid() {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.uid)
  return _s;
}
inline const std::string& StreamAggregatesDirectExchangeRateResponseV1::_internal_uid() const {
  return _impl_.uid_.Get();
}
inline void StreamAggregatesDirectExchangeRateResponseV1::_internal_set_uid(const std::string& value) {
  
  _impl_.uid_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamAggregatesDirectExchangeRateResponseV1::_internal_mutable_uid() {
  
  return _impl_.uid_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamAggregatesDirectExchangeRateResponseV1::release_uid() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.uid)
  return _impl_.uid_.Release();
}
inline void StreamAggregatesDirectExchangeRateResponseV1::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  _impl_.uid_.SetAllocated(uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uid_.IsDefault()) {
    _impl_.uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamAggregatesDirectExchangeRateResponseV1.uid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace kaikosdk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2faggregates_5fdirect_5fexchange_5frate_5fv1_2fresponse_2eproto
