// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk/stream/aggregates_direct_exchange_rate_v1/response.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2faggregates_5fdirect_5fexchange_5frate_5fv1_2fresponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2faggregates_5fdirect_5fexchange_5frate_5fv1_2fresponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "sdk/core/assets.pb.h"
#include "sdk/core/window.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sdk_2fstream_2faggregates_5fdirect_5fexchange_5frate_5fv1_2fresponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sdk_2fstream_2faggregates_5fdirect_5fexchange_5frate_5fv1_2fresponse_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sdk_2fstream_2faggregates_5fdirect_5fexchange_5frate_5fv1_2fresponse_2eproto;
namespace kaikosdk {
class StreamAggregatesDirectExchangeRateV1ResponseV2;
struct StreamAggregatesDirectExchangeRateV1ResponseV2DefaultTypeInternal;
extern StreamAggregatesDirectExchangeRateV1ResponseV2DefaultTypeInternal _StreamAggregatesDirectExchangeRateV1ResponseV2_default_instance_;
}  // namespace kaikosdk
PROTOBUF_NAMESPACE_OPEN
template<> ::kaikosdk::StreamAggregatesDirectExchangeRateV1ResponseV2* Arena::CreateMaybeMessage<::kaikosdk::StreamAggregatesDirectExchangeRateV1ResponseV2>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kaikosdk {

// ===================================================================

class StreamAggregatesDirectExchangeRateV1ResponseV2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.StreamAggregatesDirectExchangeRateV1ResponseV2) */ {
 public:
  inline StreamAggregatesDirectExchangeRateV1ResponseV2() : StreamAggregatesDirectExchangeRateV1ResponseV2(nullptr) {}
  ~StreamAggregatesDirectExchangeRateV1ResponseV2() override;
  explicit PROTOBUF_CONSTEXPR StreamAggregatesDirectExchangeRateV1ResponseV2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamAggregatesDirectExchangeRateV1ResponseV2(const StreamAggregatesDirectExchangeRateV1ResponseV2& from);
  StreamAggregatesDirectExchangeRateV1ResponseV2(StreamAggregatesDirectExchangeRateV1ResponseV2&& from) noexcept
    : StreamAggregatesDirectExchangeRateV1ResponseV2() {
    *this = ::std::move(from);
  }

  inline StreamAggregatesDirectExchangeRateV1ResponseV2& operator=(const StreamAggregatesDirectExchangeRateV1ResponseV2& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamAggregatesDirectExchangeRateV1ResponseV2& operator=(StreamAggregatesDirectExchangeRateV1ResponseV2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamAggregatesDirectExchangeRateV1ResponseV2& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamAggregatesDirectExchangeRateV1ResponseV2* internal_default_instance() {
    return reinterpret_cast<const StreamAggregatesDirectExchangeRateV1ResponseV2*>(
               &_StreamAggregatesDirectExchangeRateV1ResponseV2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StreamAggregatesDirectExchangeRateV1ResponseV2& a, StreamAggregatesDirectExchangeRateV1ResponseV2& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamAggregatesDirectExchangeRateV1ResponseV2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamAggregatesDirectExchangeRateV1ResponseV2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamAggregatesDirectExchangeRateV1ResponseV2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamAggregatesDirectExchangeRateV1ResponseV2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamAggregatesDirectExchangeRateV1ResponseV2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamAggregatesDirectExchangeRateV1ResponseV2& from) {
    StreamAggregatesDirectExchangeRateV1ResponseV2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamAggregatesDirectExchangeRateV1ResponseV2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.StreamAggregatesDirectExchangeRateV1ResponseV2";
  }
  protected:
  explicit StreamAggregatesDirectExchangeRateV1ResponseV2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetsFieldNumber = 1,
    kTimestampFieldNumber = 3,
    kWindowFieldNumber = 4,
    kPriceFieldNumber = 2,
    kNoTradeFieldNumber = 5,
  };
  // .kaikosdk.Assets assets = 1;
  bool has_assets() const;
  private:
  bool _internal_has_assets() const;
  public:
  void clear_assets();
  const ::kaikosdk::Assets& assets() const;
  PROTOBUF_NODISCARD ::kaikosdk::Assets* release_assets();
  ::kaikosdk::Assets* mutable_assets();
  void set_allocated_assets(::kaikosdk::Assets* assets);
  private:
  const ::kaikosdk::Assets& _internal_assets() const;
  ::kaikosdk::Assets* _internal_mutable_assets();
  public:
  void unsafe_arena_set_allocated_assets(
      ::kaikosdk::Assets* assets);
  ::kaikosdk::Assets* unsafe_arena_release_assets();

  // .google.protobuf.Timestamp timestamp = 3;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .kaikosdk.Window window = 4;
  bool has_window() const;
  private:
  bool _internal_has_window() const;
  public:
  void clear_window();
  const ::kaikosdk::Window& window() const;
  PROTOBUF_NODISCARD ::kaikosdk::Window* release_window();
  ::kaikosdk::Window* mutable_window();
  void set_allocated_window(::kaikosdk::Window* window);
  private:
  const ::kaikosdk::Window& _internal_window() const;
  ::kaikosdk::Window* _internal_mutable_window();
  public:
  void unsafe_arena_set_allocated_window(
      ::kaikosdk::Window* window);
  ::kaikosdk::Window* unsafe_arena_release_window();

  // double price = 2;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // bool no_trade = 5;
  void clear_no_trade();
  bool no_trade() const;
  void set_no_trade(bool value);
  private:
  bool _internal_no_trade() const;
  void _internal_set_no_trade(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kaikosdk.StreamAggregatesDirectExchangeRateV1ResponseV2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::kaikosdk::Assets* assets_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
    ::kaikosdk::Window* window_;
    double price_;
    bool no_trade_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2fstream_2faggregates_5fdirect_5fexchange_5frate_5fv1_2fresponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StreamAggregatesDirectExchangeRateV1ResponseV2

// .kaikosdk.Assets assets = 1;
inline bool StreamAggregatesDirectExchangeRateV1ResponseV2::_internal_has_assets() const {
  return this != internal_default_instance() && _impl_.assets_ != nullptr;
}
inline bool StreamAggregatesDirectExchangeRateV1ResponseV2::has_assets() const {
  return _internal_has_assets();
}
inline const ::kaikosdk::Assets& StreamAggregatesDirectExchangeRateV1ResponseV2::_internal_assets() const {
  const ::kaikosdk::Assets* p = _impl_.assets_;
  return p != nullptr ? *p : reinterpret_cast<const ::kaikosdk::Assets&>(
      ::kaikosdk::_Assets_default_instance_);
}
inline const ::kaikosdk::Assets& StreamAggregatesDirectExchangeRateV1ResponseV2::assets() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamAggregatesDirectExchangeRateV1ResponseV2.assets)
  return _internal_assets();
}
inline void StreamAggregatesDirectExchangeRateV1ResponseV2::unsafe_arena_set_allocated_assets(
    ::kaikosdk::Assets* assets) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.assets_);
  }
  _impl_.assets_ = assets;
  if (assets) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamAggregatesDirectExchangeRateV1ResponseV2.assets)
}
inline ::kaikosdk::Assets* StreamAggregatesDirectExchangeRateV1ResponseV2::release_assets() {
  
  ::kaikosdk::Assets* temp = _impl_.assets_;
  _impl_.assets_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kaikosdk::Assets* StreamAggregatesDirectExchangeRateV1ResponseV2::unsafe_arena_release_assets() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamAggregatesDirectExchangeRateV1ResponseV2.assets)
  
  ::kaikosdk::Assets* temp = _impl_.assets_;
  _impl_.assets_ = nullptr;
  return temp;
}
inline ::kaikosdk::Assets* StreamAggregatesDirectExchangeRateV1ResponseV2::_internal_mutable_assets() {
  
  if (_impl_.assets_ == nullptr) {
    auto* p = CreateMaybeMessage<::kaikosdk::Assets>(GetArenaForAllocation());
    _impl_.assets_ = p;
  }
  return _impl_.assets_;
}
inline ::kaikosdk::Assets* StreamAggregatesDirectExchangeRateV1ResponseV2::mutable_assets() {
  ::kaikosdk::Assets* _msg = _internal_mutable_assets();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamAggregatesDirectExchangeRateV1ResponseV2.assets)
  return _msg;
}
inline void StreamAggregatesDirectExchangeRateV1ResponseV2::set_allocated_assets(::kaikosdk::Assets* assets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.assets_);
  }
  if (assets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(assets));
    if (message_arena != submessage_arena) {
      assets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, assets, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.assets_ = assets;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamAggregatesDirectExchangeRateV1ResponseV2.assets)
}

// double price = 2;
inline void StreamAggregatesDirectExchangeRateV1ResponseV2::clear_price() {
  _impl_.price_ = 0;
}
inline double StreamAggregatesDirectExchangeRateV1ResponseV2::_internal_price() const {
  return _impl_.price_;
}
inline double StreamAggregatesDirectExchangeRateV1ResponseV2::price() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamAggregatesDirectExchangeRateV1ResponseV2.price)
  return _internal_price();
}
inline void StreamAggregatesDirectExchangeRateV1ResponseV2::_internal_set_price(double value) {
  
  _impl_.price_ = value;
}
inline void StreamAggregatesDirectExchangeRateV1ResponseV2::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamAggregatesDirectExchangeRateV1ResponseV2.price)
}

// .google.protobuf.Timestamp timestamp = 3;
inline bool StreamAggregatesDirectExchangeRateV1ResponseV2::_internal_has_timestamp() const {
  return this != internal_default_instance() && _impl_.timestamp_ != nullptr;
}
inline bool StreamAggregatesDirectExchangeRateV1ResponseV2::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamAggregatesDirectExchangeRateV1ResponseV2::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamAggregatesDirectExchangeRateV1ResponseV2::timestamp() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamAggregatesDirectExchangeRateV1ResponseV2.timestamp)
  return _internal_timestamp();
}
inline void StreamAggregatesDirectExchangeRateV1ResponseV2::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamAggregatesDirectExchangeRateV1ResponseV2.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamAggregatesDirectExchangeRateV1ResponseV2::release_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamAggregatesDirectExchangeRateV1ResponseV2::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamAggregatesDirectExchangeRateV1ResponseV2.timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamAggregatesDirectExchangeRateV1ResponseV2::_internal_mutable_timestamp() {
  
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamAggregatesDirectExchangeRateV1ResponseV2::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamAggregatesDirectExchangeRateV1ResponseV2.timestamp)
  return _msg;
}
inline void StreamAggregatesDirectExchangeRateV1ResponseV2::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamAggregatesDirectExchangeRateV1ResponseV2.timestamp)
}

// .kaikosdk.Window window = 4;
inline bool StreamAggregatesDirectExchangeRateV1ResponseV2::_internal_has_window() const {
  return this != internal_default_instance() && _impl_.window_ != nullptr;
}
inline bool StreamAggregatesDirectExchangeRateV1ResponseV2::has_window() const {
  return _internal_has_window();
}
inline const ::kaikosdk::Window& StreamAggregatesDirectExchangeRateV1ResponseV2::_internal_window() const {
  const ::kaikosdk::Window* p = _impl_.window_;
  return p != nullptr ? *p : reinterpret_cast<const ::kaikosdk::Window&>(
      ::kaikosdk::_Window_default_instance_);
}
inline const ::kaikosdk::Window& StreamAggregatesDirectExchangeRateV1ResponseV2::window() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamAggregatesDirectExchangeRateV1ResponseV2.window)
  return _internal_window();
}
inline void StreamAggregatesDirectExchangeRateV1ResponseV2::unsafe_arena_set_allocated_window(
    ::kaikosdk::Window* window) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.window_);
  }
  _impl_.window_ = window;
  if (window) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamAggregatesDirectExchangeRateV1ResponseV2.window)
}
inline ::kaikosdk::Window* StreamAggregatesDirectExchangeRateV1ResponseV2::release_window() {
  
  ::kaikosdk::Window* temp = _impl_.window_;
  _impl_.window_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kaikosdk::Window* StreamAggregatesDirectExchangeRateV1ResponseV2::unsafe_arena_release_window() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamAggregatesDirectExchangeRateV1ResponseV2.window)
  
  ::kaikosdk::Window* temp = _impl_.window_;
  _impl_.window_ = nullptr;
  return temp;
}
inline ::kaikosdk::Window* StreamAggregatesDirectExchangeRateV1ResponseV2::_internal_mutable_window() {
  
  if (_impl_.window_ == nullptr) {
    auto* p = CreateMaybeMessage<::kaikosdk::Window>(GetArenaForAllocation());
    _impl_.window_ = p;
  }
  return _impl_.window_;
}
inline ::kaikosdk::Window* StreamAggregatesDirectExchangeRateV1ResponseV2::mutable_window() {
  ::kaikosdk::Window* _msg = _internal_mutable_window();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamAggregatesDirectExchangeRateV1ResponseV2.window)
  return _msg;
}
inline void StreamAggregatesDirectExchangeRateV1ResponseV2::set_allocated_window(::kaikosdk::Window* window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.window_);
  }
  if (window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(window));
    if (message_arena != submessage_arena) {
      window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.window_ = window;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamAggregatesDirectExchangeRateV1ResponseV2.window)
}

// bool no_trade = 5;
inline void StreamAggregatesDirectExchangeRateV1ResponseV2::clear_no_trade() {
  _impl_.no_trade_ = false;
}
inline bool StreamAggregatesDirectExchangeRateV1ResponseV2::_internal_no_trade() const {
  return _impl_.no_trade_;
}
inline bool StreamAggregatesDirectExchangeRateV1ResponseV2::no_trade() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamAggregatesDirectExchangeRateV1ResponseV2.no_trade)
  return _internal_no_trade();
}
inline void StreamAggregatesDirectExchangeRateV1ResponseV2::_internal_set_no_trade(bool value) {
  
  _impl_.no_trade_ = value;
}
inline void StreamAggregatesDirectExchangeRateV1ResponseV2::set_no_trade(bool value) {
  _internal_set_no_trade(value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamAggregatesDirectExchangeRateV1ResponseV2.no_trade)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace kaikosdk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2faggregates_5fdirect_5fexchange_5frate_5fv1_2fresponse_2eproto
