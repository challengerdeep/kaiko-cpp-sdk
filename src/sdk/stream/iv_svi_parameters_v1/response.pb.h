// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk/stream/iv_svi_parameters_v1/response.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2fiv_5fsvi_5fparameters_5fv1_2fresponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2fiv_5fsvi_5fparameters_5fv1_2fresponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sdk_2fstream_2fiv_5fsvi_5fparameters_5fv1_2fresponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sdk_2fstream_2fiv_5fsvi_5fparameters_5fv1_2fresponse_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sdk_2fstream_2fiv_5fsvi_5fparameters_5fv1_2fresponse_2eproto;
namespace kaikosdk {
class StreamIvSviParametersResponseV1;
struct StreamIvSviParametersResponseV1DefaultTypeInternal;
extern StreamIvSviParametersResponseV1DefaultTypeInternal _StreamIvSviParametersResponseV1_default_instance_;
}  // namespace kaikosdk
PROTOBUF_NAMESPACE_OPEN
template<> ::kaikosdk::StreamIvSviParametersResponseV1* Arena::CreateMaybeMessage<::kaikosdk::StreamIvSviParametersResponseV1>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kaikosdk {

// ===================================================================

class StreamIvSviParametersResponseV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.StreamIvSviParametersResponseV1) */ {
 public:
  inline StreamIvSviParametersResponseV1() : StreamIvSviParametersResponseV1(nullptr) {}
  ~StreamIvSviParametersResponseV1() override;
  explicit PROTOBUF_CONSTEXPR StreamIvSviParametersResponseV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamIvSviParametersResponseV1(const StreamIvSviParametersResponseV1& from);
  StreamIvSviParametersResponseV1(StreamIvSviParametersResponseV1&& from) noexcept
    : StreamIvSviParametersResponseV1() {
    *this = ::std::move(from);
  }

  inline StreamIvSviParametersResponseV1& operator=(const StreamIvSviParametersResponseV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamIvSviParametersResponseV1& operator=(StreamIvSviParametersResponseV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamIvSviParametersResponseV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamIvSviParametersResponseV1* internal_default_instance() {
    return reinterpret_cast<const StreamIvSviParametersResponseV1*>(
               &_StreamIvSviParametersResponseV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StreamIvSviParametersResponseV1& a, StreamIvSviParametersResponseV1& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamIvSviParametersResponseV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamIvSviParametersResponseV1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamIvSviParametersResponseV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamIvSviParametersResponseV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamIvSviParametersResponseV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamIvSviParametersResponseV1& from) {
    StreamIvSviParametersResponseV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamIvSviParametersResponseV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.StreamIvSviParametersResponseV1";
  }
  protected:
  explicit StreamIvSviParametersResponseV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExchangesFieldNumber = 4,
    kBaseFieldNumber = 5,
    kQuoteFieldNumber = 6,
    kTimeToExpiryFieldNumber = 7,
    kAtmImpliedVarianceFieldNumber = 8,
    kAtmSkewFieldNumber = 9,
    kLeftSlopeFieldNumber = 10,
    kRightSlopeFieldNumber = 11,
    kMinImpliedVarianceFieldNumber = 12,
    kCurrentSpotFieldNumber = 13,
    kInterestRateFieldNumber = 14,
    kDataStartTimeFieldNumber = 1,
    kDataEndTimeFieldNumber = 2,
    kExpiryFieldNumber = 3,
    kTsEventFieldNumber = 15,
  };
  // repeated string exchanges = 4;
  int exchanges_size() const;
  private:
  int _internal_exchanges_size() const;
  public:
  void clear_exchanges();
  const std::string& exchanges(int index) const;
  std::string* mutable_exchanges(int index);
  void set_exchanges(int index, const std::string& value);
  void set_exchanges(int index, std::string&& value);
  void set_exchanges(int index, const char* value);
  void set_exchanges(int index, const char* value, size_t size);
  std::string* add_exchanges();
  void add_exchanges(const std::string& value);
  void add_exchanges(std::string&& value);
  void add_exchanges(const char* value);
  void add_exchanges(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& exchanges() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_exchanges();
  private:
  const std::string& _internal_exchanges(int index) const;
  std::string* _internal_add_exchanges();
  public:

  // string base = 5;
  void clear_base();
  const std::string& base() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_base(ArgT0&& arg0, ArgT... args);
  std::string* mutable_base();
  PROTOBUF_NODISCARD std::string* release_base();
  void set_allocated_base(std::string* base);
  private:
  const std::string& _internal_base() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base(const std::string& value);
  std::string* _internal_mutable_base();
  public:

  // string quote = 6;
  void clear_quote();
  const std::string& quote() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_quote(ArgT0&& arg0, ArgT... args);
  std::string* mutable_quote();
  PROTOBUF_NODISCARD std::string* release_quote();
  void set_allocated_quote(std::string* quote);
  private:
  const std::string& _internal_quote() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quote(const std::string& value);
  std::string* _internal_mutable_quote();
  public:

  // string time_to_expiry = 7;
  void clear_time_to_expiry();
  const std::string& time_to_expiry() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_time_to_expiry(ArgT0&& arg0, ArgT... args);
  std::string* mutable_time_to_expiry();
  PROTOBUF_NODISCARD std::string* release_time_to_expiry();
  void set_allocated_time_to_expiry(std::string* time_to_expiry);
  private:
  const std::string& _internal_time_to_expiry() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time_to_expiry(const std::string& value);
  std::string* _internal_mutable_time_to_expiry();
  public:

  // string atm_implied_variance = 8;
  void clear_atm_implied_variance();
  const std::string& atm_implied_variance() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_atm_implied_variance(ArgT0&& arg0, ArgT... args);
  std::string* mutable_atm_implied_variance();
  PROTOBUF_NODISCARD std::string* release_atm_implied_variance();
  void set_allocated_atm_implied_variance(std::string* atm_implied_variance);
  private:
  const std::string& _internal_atm_implied_variance() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_atm_implied_variance(const std::string& value);
  std::string* _internal_mutable_atm_implied_variance();
  public:

  // string atm_skew = 9;
  void clear_atm_skew();
  const std::string& atm_skew() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_atm_skew(ArgT0&& arg0, ArgT... args);
  std::string* mutable_atm_skew();
  PROTOBUF_NODISCARD std::string* release_atm_skew();
  void set_allocated_atm_skew(std::string* atm_skew);
  private:
  const std::string& _internal_atm_skew() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_atm_skew(const std::string& value);
  std::string* _internal_mutable_atm_skew();
  public:

  // string left_slope = 10;
  void clear_left_slope();
  const std::string& left_slope() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_left_slope(ArgT0&& arg0, ArgT... args);
  std::string* mutable_left_slope();
  PROTOBUF_NODISCARD std::string* release_left_slope();
  void set_allocated_left_slope(std::string* left_slope);
  private:
  const std::string& _internal_left_slope() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_left_slope(const std::string& value);
  std::string* _internal_mutable_left_slope();
  public:

  // string right_slope = 11;
  void clear_right_slope();
  const std::string& right_slope() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_right_slope(ArgT0&& arg0, ArgT... args);
  std::string* mutable_right_slope();
  PROTOBUF_NODISCARD std::string* release_right_slope();
  void set_allocated_right_slope(std::string* right_slope);
  private:
  const std::string& _internal_right_slope() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_right_slope(const std::string& value);
  std::string* _internal_mutable_right_slope();
  public:

  // string min_implied_variance = 12;
  void clear_min_implied_variance();
  const std::string& min_implied_variance() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_min_implied_variance(ArgT0&& arg0, ArgT... args);
  std::string* mutable_min_implied_variance();
  PROTOBUF_NODISCARD std::string* release_min_implied_variance();
  void set_allocated_min_implied_variance(std::string* min_implied_variance);
  private:
  const std::string& _internal_min_implied_variance() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_min_implied_variance(const std::string& value);
  std::string* _internal_mutable_min_implied_variance();
  public:

  // string current_spot = 13;
  void clear_current_spot();
  const std::string& current_spot() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_current_spot(ArgT0&& arg0, ArgT... args);
  std::string* mutable_current_spot();
  PROTOBUF_NODISCARD std::string* release_current_spot();
  void set_allocated_current_spot(std::string* current_spot);
  private:
  const std::string& _internal_current_spot() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_current_spot(const std::string& value);
  std::string* _internal_mutable_current_spot();
  public:

  // string interest_rate = 14;
  void clear_interest_rate();
  const std::string& interest_rate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_interest_rate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_interest_rate();
  PROTOBUF_NODISCARD std::string* release_interest_rate();
  void set_allocated_interest_rate(std::string* interest_rate);
  private:
  const std::string& _internal_interest_rate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_interest_rate(const std::string& value);
  std::string* _internal_mutable_interest_rate();
  public:

  // .google.protobuf.Timestamp data_start_time = 1;
  bool has_data_start_time() const;
  private:
  bool _internal_has_data_start_time() const;
  public:
  void clear_data_start_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& data_start_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_data_start_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_data_start_time();
  void set_allocated_data_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* data_start_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_data_start_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_data_start_time();
  public:
  void unsafe_arena_set_allocated_data_start_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* data_start_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_data_start_time();

  // .google.protobuf.Timestamp data_end_time = 2;
  bool has_data_end_time() const;
  private:
  bool _internal_has_data_end_time() const;
  public:
  void clear_data_end_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& data_end_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_data_end_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_data_end_time();
  void set_allocated_data_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* data_end_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_data_end_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_data_end_time();
  public:
  void unsafe_arena_set_allocated_data_end_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* data_end_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_data_end_time();

  // .google.protobuf.Timestamp expiry = 3;
  bool has_expiry() const;
  private:
  bool _internal_has_expiry() const;
  public:
  void clear_expiry();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& expiry() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_expiry();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expiry();
  void set_allocated_expiry(::PROTOBUF_NAMESPACE_ID::Timestamp* expiry);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expiry() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expiry();
  public:
  void unsafe_arena_set_allocated_expiry(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* expiry);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expiry();

  // .google.protobuf.Timestamp ts_event = 15;
  bool has_ts_event() const;
  private:
  bool _internal_has_ts_event() const;
  public:
  void clear_ts_event();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts_event() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_ts_event();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_ts_event();
  void set_allocated_ts_event(::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_ts_event() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_ts_event();
  public:
  void unsafe_arena_set_allocated_ts_event(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_ts_event();

  // @@protoc_insertion_point(class_scope:kaikosdk.StreamIvSviParametersResponseV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> exchanges_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quote_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_to_expiry_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr atm_implied_variance_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr atm_skew_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr left_slope_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr right_slope_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr min_implied_variance_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr current_spot_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interest_rate_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* data_start_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* data_end_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expiry_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sdk_2fstream_2fiv_5fsvi_5fparameters_5fv1_2fresponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StreamIvSviParametersResponseV1

// .google.protobuf.Timestamp data_start_time = 1;
inline bool StreamIvSviParametersResponseV1::_internal_has_data_start_time() const {
  return this != internal_default_instance() && _impl_.data_start_time_ != nullptr;
}
inline bool StreamIvSviParametersResponseV1::has_data_start_time() const {
  return _internal_has_data_start_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamIvSviParametersResponseV1::_internal_data_start_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.data_start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamIvSviParametersResponseV1::data_start_time() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIvSviParametersResponseV1.data_start_time)
  return _internal_data_start_time();
}
inline void StreamIvSviParametersResponseV1::unsafe_arena_set_allocated_data_start_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* data_start_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_start_time_);
  }
  _impl_.data_start_time_ = data_start_time;
  if (data_start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamIvSviParametersResponseV1.data_start_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIvSviParametersResponseV1::release_data_start_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.data_start_time_;
  _impl_.data_start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIvSviParametersResponseV1::unsafe_arena_release_data_start_time() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIvSviParametersResponseV1.data_start_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.data_start_time_;
  _impl_.data_start_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIvSviParametersResponseV1::_internal_mutable_data_start_time() {
  
  if (_impl_.data_start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.data_start_time_ = p;
  }
  return _impl_.data_start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIvSviParametersResponseV1::mutable_data_start_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_data_start_time();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIvSviParametersResponseV1.data_start_time)
  return _msg;
}
inline void StreamIvSviParametersResponseV1::set_allocated_data_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* data_start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_start_time_);
  }
  if (data_start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_start_time));
    if (message_arena != submessage_arena) {
      data_start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_start_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_start_time_ = data_start_time;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIvSviParametersResponseV1.data_start_time)
}

// .google.protobuf.Timestamp data_end_time = 2;
inline bool StreamIvSviParametersResponseV1::_internal_has_data_end_time() const {
  return this != internal_default_instance() && _impl_.data_end_time_ != nullptr;
}
inline bool StreamIvSviParametersResponseV1::has_data_end_time() const {
  return _internal_has_data_end_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamIvSviParametersResponseV1::_internal_data_end_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.data_end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamIvSviParametersResponseV1::data_end_time() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIvSviParametersResponseV1.data_end_time)
  return _internal_data_end_time();
}
inline void StreamIvSviParametersResponseV1::unsafe_arena_set_allocated_data_end_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* data_end_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_end_time_);
  }
  _impl_.data_end_time_ = data_end_time;
  if (data_end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamIvSviParametersResponseV1.data_end_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIvSviParametersResponseV1::release_data_end_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.data_end_time_;
  _impl_.data_end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIvSviParametersResponseV1::unsafe_arena_release_data_end_time() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIvSviParametersResponseV1.data_end_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.data_end_time_;
  _impl_.data_end_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIvSviParametersResponseV1::_internal_mutable_data_end_time() {
  
  if (_impl_.data_end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.data_end_time_ = p;
  }
  return _impl_.data_end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIvSviParametersResponseV1::mutable_data_end_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_data_end_time();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIvSviParametersResponseV1.data_end_time)
  return _msg;
}
inline void StreamIvSviParametersResponseV1::set_allocated_data_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* data_end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_end_time_);
  }
  if (data_end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_end_time));
    if (message_arena != submessage_arena) {
      data_end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_end_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_end_time_ = data_end_time;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIvSviParametersResponseV1.data_end_time)
}

// .google.protobuf.Timestamp expiry = 3;
inline bool StreamIvSviParametersResponseV1::_internal_has_expiry() const {
  return this != internal_default_instance() && _impl_.expiry_ != nullptr;
}
inline bool StreamIvSviParametersResponseV1::has_expiry() const {
  return _internal_has_expiry();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamIvSviParametersResponseV1::_internal_expiry() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.expiry_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamIvSviParametersResponseV1::expiry() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIvSviParametersResponseV1.expiry)
  return _internal_expiry();
}
inline void StreamIvSviParametersResponseV1::unsafe_arena_set_allocated_expiry(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expiry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expiry_);
  }
  _impl_.expiry_ = expiry;
  if (expiry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamIvSviParametersResponseV1.expiry)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIvSviParametersResponseV1::release_expiry() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expiry_;
  _impl_.expiry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIvSviParametersResponseV1::unsafe_arena_release_expiry() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIvSviParametersResponseV1.expiry)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expiry_;
  _impl_.expiry_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIvSviParametersResponseV1::_internal_mutable_expiry() {
  
  if (_impl_.expiry_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.expiry_ = p;
  }
  return _impl_.expiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIvSviParametersResponseV1::mutable_expiry() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_expiry();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIvSviParametersResponseV1.expiry)
  return _msg;
}
inline void StreamIvSviParametersResponseV1::set_allocated_expiry(::PROTOBUF_NAMESPACE_ID::Timestamp* expiry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expiry_);
  }
  if (expiry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry));
    if (message_arena != submessage_arena) {
      expiry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiry, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expiry_ = expiry;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIvSviParametersResponseV1.expiry)
}

// repeated string exchanges = 4;
inline int StreamIvSviParametersResponseV1::_internal_exchanges_size() const {
  return _impl_.exchanges_.size();
}
inline int StreamIvSviParametersResponseV1::exchanges_size() const {
  return _internal_exchanges_size();
}
inline void StreamIvSviParametersResponseV1::clear_exchanges() {
  _impl_.exchanges_.Clear();
}
inline std::string* StreamIvSviParametersResponseV1::add_exchanges() {
  std::string* _s = _internal_add_exchanges();
  // @@protoc_insertion_point(field_add_mutable:kaikosdk.StreamIvSviParametersResponseV1.exchanges)
  return _s;
}
inline const std::string& StreamIvSviParametersResponseV1::_internal_exchanges(int index) const {
  return _impl_.exchanges_.Get(index);
}
inline const std::string& StreamIvSviParametersResponseV1::exchanges(int index) const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIvSviParametersResponseV1.exchanges)
  return _internal_exchanges(index);
}
inline std::string* StreamIvSviParametersResponseV1::mutable_exchanges(int index) {
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIvSviParametersResponseV1.exchanges)
  return _impl_.exchanges_.Mutable(index);
}
inline void StreamIvSviParametersResponseV1::set_exchanges(int index, const std::string& value) {
  _impl_.exchanges_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIvSviParametersResponseV1.exchanges)
}
inline void StreamIvSviParametersResponseV1::set_exchanges(int index, std::string&& value) {
  _impl_.exchanges_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIvSviParametersResponseV1.exchanges)
}
inline void StreamIvSviParametersResponseV1::set_exchanges(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.exchanges_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kaikosdk.StreamIvSviParametersResponseV1.exchanges)
}
inline void StreamIvSviParametersResponseV1::set_exchanges(int index, const char* value, size_t size) {
  _impl_.exchanges_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kaikosdk.StreamIvSviParametersResponseV1.exchanges)
}
inline std::string* StreamIvSviParametersResponseV1::_internal_add_exchanges() {
  return _impl_.exchanges_.Add();
}
inline void StreamIvSviParametersResponseV1::add_exchanges(const std::string& value) {
  _impl_.exchanges_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kaikosdk.StreamIvSviParametersResponseV1.exchanges)
}
inline void StreamIvSviParametersResponseV1::add_exchanges(std::string&& value) {
  _impl_.exchanges_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kaikosdk.StreamIvSviParametersResponseV1.exchanges)
}
inline void StreamIvSviParametersResponseV1::add_exchanges(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.exchanges_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kaikosdk.StreamIvSviParametersResponseV1.exchanges)
}
inline void StreamIvSviParametersResponseV1::add_exchanges(const char* value, size_t size) {
  _impl_.exchanges_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kaikosdk.StreamIvSviParametersResponseV1.exchanges)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StreamIvSviParametersResponseV1::exchanges() const {
  // @@protoc_insertion_point(field_list:kaikosdk.StreamIvSviParametersResponseV1.exchanges)
  return _impl_.exchanges_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StreamIvSviParametersResponseV1::mutable_exchanges() {
  // @@protoc_insertion_point(field_mutable_list:kaikosdk.StreamIvSviParametersResponseV1.exchanges)
  return &_impl_.exchanges_;
}

// string base = 5;
inline void StreamIvSviParametersResponseV1::clear_base() {
  _impl_.base_.ClearToEmpty();
}
inline const std::string& StreamIvSviParametersResponseV1::base() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIvSviParametersResponseV1.base)
  return _internal_base();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamIvSviParametersResponseV1::set_base(ArgT0&& arg0, ArgT... args) {
 
 _impl_.base_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIvSviParametersResponseV1.base)
}
inline std::string* StreamIvSviParametersResponseV1::mutable_base() {
  std::string* _s = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIvSviParametersResponseV1.base)
  return _s;
}
inline const std::string& StreamIvSviParametersResponseV1::_internal_base() const {
  return _impl_.base_.Get();
}
inline void StreamIvSviParametersResponseV1::_internal_set_base(const std::string& value) {
  
  _impl_.base_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamIvSviParametersResponseV1::_internal_mutable_base() {
  
  return _impl_.base_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamIvSviParametersResponseV1::release_base() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIvSviParametersResponseV1.base)
  return _impl_.base_.Release();
}
inline void StreamIvSviParametersResponseV1::set_allocated_base(std::string* base) {
  if (base != nullptr) {
    
  } else {
    
  }
  _impl_.base_.SetAllocated(base, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.base_.IsDefault()) {
    _impl_.base_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIvSviParametersResponseV1.base)
}

// string quote = 6;
inline void StreamIvSviParametersResponseV1::clear_quote() {
  _impl_.quote_.ClearToEmpty();
}
inline const std::string& StreamIvSviParametersResponseV1::quote() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIvSviParametersResponseV1.quote)
  return _internal_quote();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamIvSviParametersResponseV1::set_quote(ArgT0&& arg0, ArgT... args) {
 
 _impl_.quote_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIvSviParametersResponseV1.quote)
}
inline std::string* StreamIvSviParametersResponseV1::mutable_quote() {
  std::string* _s = _internal_mutable_quote();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIvSviParametersResponseV1.quote)
  return _s;
}
inline const std::string& StreamIvSviParametersResponseV1::_internal_quote() const {
  return _impl_.quote_.Get();
}
inline void StreamIvSviParametersResponseV1::_internal_set_quote(const std::string& value) {
  
  _impl_.quote_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamIvSviParametersResponseV1::_internal_mutable_quote() {
  
  return _impl_.quote_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamIvSviParametersResponseV1::release_quote() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIvSviParametersResponseV1.quote)
  return _impl_.quote_.Release();
}
inline void StreamIvSviParametersResponseV1::set_allocated_quote(std::string* quote) {
  if (quote != nullptr) {
    
  } else {
    
  }
  _impl_.quote_.SetAllocated(quote, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.quote_.IsDefault()) {
    _impl_.quote_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIvSviParametersResponseV1.quote)
}

// string time_to_expiry = 7;
inline void StreamIvSviParametersResponseV1::clear_time_to_expiry() {
  _impl_.time_to_expiry_.ClearToEmpty();
}
inline const std::string& StreamIvSviParametersResponseV1::time_to_expiry() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIvSviParametersResponseV1.time_to_expiry)
  return _internal_time_to_expiry();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamIvSviParametersResponseV1::set_time_to_expiry(ArgT0&& arg0, ArgT... args) {
 
 _impl_.time_to_expiry_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIvSviParametersResponseV1.time_to_expiry)
}
inline std::string* StreamIvSviParametersResponseV1::mutable_time_to_expiry() {
  std::string* _s = _internal_mutable_time_to_expiry();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIvSviParametersResponseV1.time_to_expiry)
  return _s;
}
inline const std::string& StreamIvSviParametersResponseV1::_internal_time_to_expiry() const {
  return _impl_.time_to_expiry_.Get();
}
inline void StreamIvSviParametersResponseV1::_internal_set_time_to_expiry(const std::string& value) {
  
  _impl_.time_to_expiry_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamIvSviParametersResponseV1::_internal_mutable_time_to_expiry() {
  
  return _impl_.time_to_expiry_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamIvSviParametersResponseV1::release_time_to_expiry() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIvSviParametersResponseV1.time_to_expiry)
  return _impl_.time_to_expiry_.Release();
}
inline void StreamIvSviParametersResponseV1::set_allocated_time_to_expiry(std::string* time_to_expiry) {
  if (time_to_expiry != nullptr) {
    
  } else {
    
  }
  _impl_.time_to_expiry_.SetAllocated(time_to_expiry, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.time_to_expiry_.IsDefault()) {
    _impl_.time_to_expiry_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIvSviParametersResponseV1.time_to_expiry)
}

// string atm_implied_variance = 8;
inline void StreamIvSviParametersResponseV1::clear_atm_implied_variance() {
  _impl_.atm_implied_variance_.ClearToEmpty();
}
inline const std::string& StreamIvSviParametersResponseV1::atm_implied_variance() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIvSviParametersResponseV1.atm_implied_variance)
  return _internal_atm_implied_variance();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamIvSviParametersResponseV1::set_atm_implied_variance(ArgT0&& arg0, ArgT... args) {
 
 _impl_.atm_implied_variance_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIvSviParametersResponseV1.atm_implied_variance)
}
inline std::string* StreamIvSviParametersResponseV1::mutable_atm_implied_variance() {
  std::string* _s = _internal_mutable_atm_implied_variance();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIvSviParametersResponseV1.atm_implied_variance)
  return _s;
}
inline const std::string& StreamIvSviParametersResponseV1::_internal_atm_implied_variance() const {
  return _impl_.atm_implied_variance_.Get();
}
inline void StreamIvSviParametersResponseV1::_internal_set_atm_implied_variance(const std::string& value) {
  
  _impl_.atm_implied_variance_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamIvSviParametersResponseV1::_internal_mutable_atm_implied_variance() {
  
  return _impl_.atm_implied_variance_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamIvSviParametersResponseV1::release_atm_implied_variance() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIvSviParametersResponseV1.atm_implied_variance)
  return _impl_.atm_implied_variance_.Release();
}
inline void StreamIvSviParametersResponseV1::set_allocated_atm_implied_variance(std::string* atm_implied_variance) {
  if (atm_implied_variance != nullptr) {
    
  } else {
    
  }
  _impl_.atm_implied_variance_.SetAllocated(atm_implied_variance, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.atm_implied_variance_.IsDefault()) {
    _impl_.atm_implied_variance_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIvSviParametersResponseV1.atm_implied_variance)
}

// string atm_skew = 9;
inline void StreamIvSviParametersResponseV1::clear_atm_skew() {
  _impl_.atm_skew_.ClearToEmpty();
}
inline const std::string& StreamIvSviParametersResponseV1::atm_skew() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIvSviParametersResponseV1.atm_skew)
  return _internal_atm_skew();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamIvSviParametersResponseV1::set_atm_skew(ArgT0&& arg0, ArgT... args) {
 
 _impl_.atm_skew_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIvSviParametersResponseV1.atm_skew)
}
inline std::string* StreamIvSviParametersResponseV1::mutable_atm_skew() {
  std::string* _s = _internal_mutable_atm_skew();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIvSviParametersResponseV1.atm_skew)
  return _s;
}
inline const std::string& StreamIvSviParametersResponseV1::_internal_atm_skew() const {
  return _impl_.atm_skew_.Get();
}
inline void StreamIvSviParametersResponseV1::_internal_set_atm_skew(const std::string& value) {
  
  _impl_.atm_skew_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamIvSviParametersResponseV1::_internal_mutable_atm_skew() {
  
  return _impl_.atm_skew_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamIvSviParametersResponseV1::release_atm_skew() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIvSviParametersResponseV1.atm_skew)
  return _impl_.atm_skew_.Release();
}
inline void StreamIvSviParametersResponseV1::set_allocated_atm_skew(std::string* atm_skew) {
  if (atm_skew != nullptr) {
    
  } else {
    
  }
  _impl_.atm_skew_.SetAllocated(atm_skew, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.atm_skew_.IsDefault()) {
    _impl_.atm_skew_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIvSviParametersResponseV1.atm_skew)
}

// string left_slope = 10;
inline void StreamIvSviParametersResponseV1::clear_left_slope() {
  _impl_.left_slope_.ClearToEmpty();
}
inline const std::string& StreamIvSviParametersResponseV1::left_slope() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIvSviParametersResponseV1.left_slope)
  return _internal_left_slope();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamIvSviParametersResponseV1::set_left_slope(ArgT0&& arg0, ArgT... args) {
 
 _impl_.left_slope_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIvSviParametersResponseV1.left_slope)
}
inline std::string* StreamIvSviParametersResponseV1::mutable_left_slope() {
  std::string* _s = _internal_mutable_left_slope();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIvSviParametersResponseV1.left_slope)
  return _s;
}
inline const std::string& StreamIvSviParametersResponseV1::_internal_left_slope() const {
  return _impl_.left_slope_.Get();
}
inline void StreamIvSviParametersResponseV1::_internal_set_left_slope(const std::string& value) {
  
  _impl_.left_slope_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamIvSviParametersResponseV1::_internal_mutable_left_slope() {
  
  return _impl_.left_slope_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamIvSviParametersResponseV1::release_left_slope() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIvSviParametersResponseV1.left_slope)
  return _impl_.left_slope_.Release();
}
inline void StreamIvSviParametersResponseV1::set_allocated_left_slope(std::string* left_slope) {
  if (left_slope != nullptr) {
    
  } else {
    
  }
  _impl_.left_slope_.SetAllocated(left_slope, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.left_slope_.IsDefault()) {
    _impl_.left_slope_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIvSviParametersResponseV1.left_slope)
}

// string right_slope = 11;
inline void StreamIvSviParametersResponseV1::clear_right_slope() {
  _impl_.right_slope_.ClearToEmpty();
}
inline const std::string& StreamIvSviParametersResponseV1::right_slope() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIvSviParametersResponseV1.right_slope)
  return _internal_right_slope();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamIvSviParametersResponseV1::set_right_slope(ArgT0&& arg0, ArgT... args) {
 
 _impl_.right_slope_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIvSviParametersResponseV1.right_slope)
}
inline std::string* StreamIvSviParametersResponseV1::mutable_right_slope() {
  std::string* _s = _internal_mutable_right_slope();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIvSviParametersResponseV1.right_slope)
  return _s;
}
inline const std::string& StreamIvSviParametersResponseV1::_internal_right_slope() const {
  return _impl_.right_slope_.Get();
}
inline void StreamIvSviParametersResponseV1::_internal_set_right_slope(const std::string& value) {
  
  _impl_.right_slope_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamIvSviParametersResponseV1::_internal_mutable_right_slope() {
  
  return _impl_.right_slope_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamIvSviParametersResponseV1::release_right_slope() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIvSviParametersResponseV1.right_slope)
  return _impl_.right_slope_.Release();
}
inline void StreamIvSviParametersResponseV1::set_allocated_right_slope(std::string* right_slope) {
  if (right_slope != nullptr) {
    
  } else {
    
  }
  _impl_.right_slope_.SetAllocated(right_slope, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.right_slope_.IsDefault()) {
    _impl_.right_slope_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIvSviParametersResponseV1.right_slope)
}

// string min_implied_variance = 12;
inline void StreamIvSviParametersResponseV1::clear_min_implied_variance() {
  _impl_.min_implied_variance_.ClearToEmpty();
}
inline const std::string& StreamIvSviParametersResponseV1::min_implied_variance() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIvSviParametersResponseV1.min_implied_variance)
  return _internal_min_implied_variance();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamIvSviParametersResponseV1::set_min_implied_variance(ArgT0&& arg0, ArgT... args) {
 
 _impl_.min_implied_variance_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIvSviParametersResponseV1.min_implied_variance)
}
inline std::string* StreamIvSviParametersResponseV1::mutable_min_implied_variance() {
  std::string* _s = _internal_mutable_min_implied_variance();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIvSviParametersResponseV1.min_implied_variance)
  return _s;
}
inline const std::string& StreamIvSviParametersResponseV1::_internal_min_implied_variance() const {
  return _impl_.min_implied_variance_.Get();
}
inline void StreamIvSviParametersResponseV1::_internal_set_min_implied_variance(const std::string& value) {
  
  _impl_.min_implied_variance_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamIvSviParametersResponseV1::_internal_mutable_min_implied_variance() {
  
  return _impl_.min_implied_variance_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamIvSviParametersResponseV1::release_min_implied_variance() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIvSviParametersResponseV1.min_implied_variance)
  return _impl_.min_implied_variance_.Release();
}
inline void StreamIvSviParametersResponseV1::set_allocated_min_implied_variance(std::string* min_implied_variance) {
  if (min_implied_variance != nullptr) {
    
  } else {
    
  }
  _impl_.min_implied_variance_.SetAllocated(min_implied_variance, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.min_implied_variance_.IsDefault()) {
    _impl_.min_implied_variance_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIvSviParametersResponseV1.min_implied_variance)
}

// string current_spot = 13;
inline void StreamIvSviParametersResponseV1::clear_current_spot() {
  _impl_.current_spot_.ClearToEmpty();
}
inline const std::string& StreamIvSviParametersResponseV1::current_spot() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIvSviParametersResponseV1.current_spot)
  return _internal_current_spot();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamIvSviParametersResponseV1::set_current_spot(ArgT0&& arg0, ArgT... args) {
 
 _impl_.current_spot_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIvSviParametersResponseV1.current_spot)
}
inline std::string* StreamIvSviParametersResponseV1::mutable_current_spot() {
  std::string* _s = _internal_mutable_current_spot();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIvSviParametersResponseV1.current_spot)
  return _s;
}
inline const std::string& StreamIvSviParametersResponseV1::_internal_current_spot() const {
  return _impl_.current_spot_.Get();
}
inline void StreamIvSviParametersResponseV1::_internal_set_current_spot(const std::string& value) {
  
  _impl_.current_spot_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamIvSviParametersResponseV1::_internal_mutable_current_spot() {
  
  return _impl_.current_spot_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamIvSviParametersResponseV1::release_current_spot() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIvSviParametersResponseV1.current_spot)
  return _impl_.current_spot_.Release();
}
inline void StreamIvSviParametersResponseV1::set_allocated_current_spot(std::string* current_spot) {
  if (current_spot != nullptr) {
    
  } else {
    
  }
  _impl_.current_spot_.SetAllocated(current_spot, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.current_spot_.IsDefault()) {
    _impl_.current_spot_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIvSviParametersResponseV1.current_spot)
}

// string interest_rate = 14;
inline void StreamIvSviParametersResponseV1::clear_interest_rate() {
  _impl_.interest_rate_.ClearToEmpty();
}
inline const std::string& StreamIvSviParametersResponseV1::interest_rate() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIvSviParametersResponseV1.interest_rate)
  return _internal_interest_rate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamIvSviParametersResponseV1::set_interest_rate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.interest_rate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.StreamIvSviParametersResponseV1.interest_rate)
}
inline std::string* StreamIvSviParametersResponseV1::mutable_interest_rate() {
  std::string* _s = _internal_mutable_interest_rate();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIvSviParametersResponseV1.interest_rate)
  return _s;
}
inline const std::string& StreamIvSviParametersResponseV1::_internal_interest_rate() const {
  return _impl_.interest_rate_.Get();
}
inline void StreamIvSviParametersResponseV1::_internal_set_interest_rate(const std::string& value) {
  
  _impl_.interest_rate_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamIvSviParametersResponseV1::_internal_mutable_interest_rate() {
  
  return _impl_.interest_rate_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamIvSviParametersResponseV1::release_interest_rate() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIvSviParametersResponseV1.interest_rate)
  return _impl_.interest_rate_.Release();
}
inline void StreamIvSviParametersResponseV1::set_allocated_interest_rate(std::string* interest_rate) {
  if (interest_rate != nullptr) {
    
  } else {
    
  }
  _impl_.interest_rate_.SetAllocated(interest_rate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.interest_rate_.IsDefault()) {
    _impl_.interest_rate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIvSviParametersResponseV1.interest_rate)
}

// .google.protobuf.Timestamp ts_event = 15;
inline bool StreamIvSviParametersResponseV1::_internal_has_ts_event() const {
  return this != internal_default_instance() && _impl_.ts_event_ != nullptr;
}
inline bool StreamIvSviParametersResponseV1::has_ts_event() const {
  return _internal_has_ts_event();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamIvSviParametersResponseV1::_internal_ts_event() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.ts_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& StreamIvSviParametersResponseV1::ts_event() const {
  // @@protoc_insertion_point(field_get:kaikosdk.StreamIvSviParametersResponseV1.ts_event)
  return _internal_ts_event();
}
inline void StreamIvSviParametersResponseV1::unsafe_arena_set_allocated_ts_event(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_event_);
  }
  _impl_.ts_event_ = ts_event;
  if (ts_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.StreamIvSviParametersResponseV1.ts_event)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIvSviParametersResponseV1::release_ts_event() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_event_;
  _impl_.ts_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIvSviParametersResponseV1::unsafe_arena_release_ts_event() {
  // @@protoc_insertion_point(field_release:kaikosdk.StreamIvSviParametersResponseV1.ts_event)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.ts_event_;
  _impl_.ts_event_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIvSviParametersResponseV1::_internal_mutable_ts_event() {
  
  if (_impl_.ts_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.ts_event_ = p;
  }
  return _impl_.ts_event_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* StreamIvSviParametersResponseV1::mutable_ts_event() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_ts_event();
  // @@protoc_insertion_point(field_mutable:kaikosdk.StreamIvSviParametersResponseV1.ts_event)
  return _msg;
}
inline void StreamIvSviParametersResponseV1::set_allocated_ts_event(::PROTOBUF_NAMESPACE_ID::Timestamp* ts_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ts_event_);
  }
  if (ts_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ts_event));
    if (message_arena != submessage_arena) {
      ts_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ts_event, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ts_event_ = ts_event;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.StreamIvSviParametersResponseV1.ts_event)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace kaikosdk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sdk_2fstream_2fiv_5fsvi_5fparameters_5fv1_2fresponse_2eproto
