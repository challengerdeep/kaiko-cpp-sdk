// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk/stream/iv_svi_parameters_v1/response.proto

#include "sdk/stream/iv_svi_parameters_v1/response.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace kaikosdk {
PROTOBUF_CONSTEXPR StreamIvSviParametersResponseV1::StreamIvSviParametersResponseV1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.exchanges_)*/{}
  , /*decltype(_impl_.base_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.quote_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_to_expiry_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.atm_implied_variance_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.atm_skew_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.left_slope_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.right_slope_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.min_implied_variance_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.current_spot_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.interest_rate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_start_time_)*/nullptr
  , /*decltype(_impl_.data_end_time_)*/nullptr
  , /*decltype(_impl_.expiry_)*/nullptr
  , /*decltype(_impl_.ts_event_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamIvSviParametersResponseV1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamIvSviParametersResponseV1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamIvSviParametersResponseV1DefaultTypeInternal() {}
  union {
    StreamIvSviParametersResponseV1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamIvSviParametersResponseV1DefaultTypeInternal _StreamIvSviParametersResponseV1_default_instance_;
}  // namespace kaikosdk
static ::_pb::Metadata file_level_metadata_sdk_2fstream_2fiv_5fsvi_5fparameters_5fv1_2fresponse_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_sdk_2fstream_2fiv_5fsvi_5fparameters_5fv1_2fresponse_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_sdk_2fstream_2fiv_5fsvi_5fparameters_5fv1_2fresponse_2eproto = nullptr;

const uint32_t TableStruct_sdk_2fstream_2fiv_5fsvi_5fparameters_5fv1_2fresponse_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIvSviParametersResponseV1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIvSviParametersResponseV1, _impl_.data_start_time_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIvSviParametersResponseV1, _impl_.data_end_time_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIvSviParametersResponseV1, _impl_.expiry_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIvSviParametersResponseV1, _impl_.exchanges_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIvSviParametersResponseV1, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIvSviParametersResponseV1, _impl_.quote_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIvSviParametersResponseV1, _impl_.time_to_expiry_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIvSviParametersResponseV1, _impl_.atm_implied_variance_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIvSviParametersResponseV1, _impl_.atm_skew_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIvSviParametersResponseV1, _impl_.left_slope_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIvSviParametersResponseV1, _impl_.right_slope_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIvSviParametersResponseV1, _impl_.min_implied_variance_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIvSviParametersResponseV1, _impl_.current_spot_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIvSviParametersResponseV1, _impl_.interest_rate_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::StreamIvSviParametersResponseV1, _impl_.ts_event_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::kaikosdk::StreamIvSviParametersResponseV1)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::kaikosdk::_StreamIvSviParametersResponseV1_default_instance_._instance,
};

const char descriptor_table_protodef_sdk_2fstream_2fiv_5fsvi_5fparameters_5fv1_2fresponse_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.sdk/stream/iv_svi_parameters_v1/respon"
  "se.proto\022\010kaikosdk\032\037google/protobuf/time"
  "stamp.proto\"\317\003\n\037StreamIvSviParametersRes"
  "ponseV1\0223\n\017data_start_time\030\001 \001(\0132\032.googl"
  "e.protobuf.Timestamp\0221\n\rdata_end_time\030\002 "
  "\001(\0132\032.google.protobuf.Timestamp\022*\n\006expir"
  "y\030\003 \001(\0132\032.google.protobuf.Timestamp\022\021\n\te"
  "xchanges\030\004 \003(\t\022\014\n\004base\030\005 \001(\t\022\r\n\005quote\030\006 "
  "\001(\t\022\026\n\016time_to_expiry\030\007 \001(\t\022\034\n\024atm_impli"
  "ed_variance\030\010 \001(\t\022\020\n\010atm_skew\030\t \001(\t\022\022\n\nl"
  "eft_slope\030\n \001(\t\022\023\n\013right_slope\030\013 \001(\t\022\034\n\024"
  "min_implied_variance\030\014 \001(\t\022\024\n\014current_sp"
  "ot\030\r \001(\t\022\025\n\rinterest_rate\030\016 \001(\t\022,\n\010ts_ev"
  "ent\030\017 \001(\0132\032.google.protobuf.TimestampB\244\001"
  "\n)com.kaiko.sdk.stream.iv_svi_parameters"
  "_v1P\001ZRgithub.com/kaikodata/kaiko-go-sdk"
  "/stream/iv_svi_parameters_v1;iv_svi_para"
  "meters_v1\252\002 KaikoSdk.Stream.IvSviParamet"
  "erV1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_sdk_2fstream_2fiv_5fsvi_5fparameters_5fv1_2fresponse_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_sdk_2fstream_2fiv_5fsvi_5fparameters_5fv1_2fresponse_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sdk_2fstream_2fiv_5fsvi_5fparameters_5fv1_2fresponse_2eproto = {
    false, false, 732, descriptor_table_protodef_sdk_2fstream_2fiv_5fsvi_5fparameters_5fv1_2fresponse_2eproto,
    "sdk/stream/iv_svi_parameters_v1/response.proto",
    &descriptor_table_sdk_2fstream_2fiv_5fsvi_5fparameters_5fv1_2fresponse_2eproto_once, descriptor_table_sdk_2fstream_2fiv_5fsvi_5fparameters_5fv1_2fresponse_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_sdk_2fstream_2fiv_5fsvi_5fparameters_5fv1_2fresponse_2eproto::offsets,
    file_level_metadata_sdk_2fstream_2fiv_5fsvi_5fparameters_5fv1_2fresponse_2eproto, file_level_enum_descriptors_sdk_2fstream_2fiv_5fsvi_5fparameters_5fv1_2fresponse_2eproto,
    file_level_service_descriptors_sdk_2fstream_2fiv_5fsvi_5fparameters_5fv1_2fresponse_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sdk_2fstream_2fiv_5fsvi_5fparameters_5fv1_2fresponse_2eproto_getter() {
  return &descriptor_table_sdk_2fstream_2fiv_5fsvi_5fparameters_5fv1_2fresponse_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sdk_2fstream_2fiv_5fsvi_5fparameters_5fv1_2fresponse_2eproto(&descriptor_table_sdk_2fstream_2fiv_5fsvi_5fparameters_5fv1_2fresponse_2eproto);
namespace kaikosdk {

// ===================================================================

class StreamIvSviParametersResponseV1::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& data_start_time(const StreamIvSviParametersResponseV1* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& data_end_time(const StreamIvSviParametersResponseV1* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& expiry(const StreamIvSviParametersResponseV1* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& ts_event(const StreamIvSviParametersResponseV1* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
StreamIvSviParametersResponseV1::_Internal::data_start_time(const StreamIvSviParametersResponseV1* msg) {
  return *msg->_impl_.data_start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
StreamIvSviParametersResponseV1::_Internal::data_end_time(const StreamIvSviParametersResponseV1* msg) {
  return *msg->_impl_.data_end_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
StreamIvSviParametersResponseV1::_Internal::expiry(const StreamIvSviParametersResponseV1* msg) {
  return *msg->_impl_.expiry_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
StreamIvSviParametersResponseV1::_Internal::ts_event(const StreamIvSviParametersResponseV1* msg) {
  return *msg->_impl_.ts_event_;
}
void StreamIvSviParametersResponseV1::clear_data_start_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_start_time_ != nullptr) {
    delete _impl_.data_start_time_;
  }
  _impl_.data_start_time_ = nullptr;
}
void StreamIvSviParametersResponseV1::clear_data_end_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_end_time_ != nullptr) {
    delete _impl_.data_end_time_;
  }
  _impl_.data_end_time_ = nullptr;
}
void StreamIvSviParametersResponseV1::clear_expiry() {
  if (GetArenaForAllocation() == nullptr && _impl_.expiry_ != nullptr) {
    delete _impl_.expiry_;
  }
  _impl_.expiry_ = nullptr;
}
void StreamIvSviParametersResponseV1::clear_ts_event() {
  if (GetArenaForAllocation() == nullptr && _impl_.ts_event_ != nullptr) {
    delete _impl_.ts_event_;
  }
  _impl_.ts_event_ = nullptr;
}
StreamIvSviParametersResponseV1::StreamIvSviParametersResponseV1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:kaikosdk.StreamIvSviParametersResponseV1)
}
StreamIvSviParametersResponseV1::StreamIvSviParametersResponseV1(const StreamIvSviParametersResponseV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamIvSviParametersResponseV1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.exchanges_){from._impl_.exchanges_}
    , decltype(_impl_.base_){}
    , decltype(_impl_.quote_){}
    , decltype(_impl_.time_to_expiry_){}
    , decltype(_impl_.atm_implied_variance_){}
    , decltype(_impl_.atm_skew_){}
    , decltype(_impl_.left_slope_){}
    , decltype(_impl_.right_slope_){}
    , decltype(_impl_.min_implied_variance_){}
    , decltype(_impl_.current_spot_){}
    , decltype(_impl_.interest_rate_){}
    , decltype(_impl_.data_start_time_){nullptr}
    , decltype(_impl_.data_end_time_){nullptr}
    , decltype(_impl_.expiry_){nullptr}
    , decltype(_impl_.ts_event_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.base_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base().empty()) {
    _this->_impl_.base_.Set(from._internal_base(), 
      _this->GetArenaForAllocation());
  }
  _impl_.quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.quote_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote().empty()) {
    _this->_impl_.quote_.Set(from._internal_quote(), 
      _this->GetArenaForAllocation());
  }
  _impl_.time_to_expiry_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_to_expiry_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_time_to_expiry().empty()) {
    _this->_impl_.time_to_expiry_.Set(from._internal_time_to_expiry(), 
      _this->GetArenaForAllocation());
  }
  _impl_.atm_implied_variance_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.atm_implied_variance_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_atm_implied_variance().empty()) {
    _this->_impl_.atm_implied_variance_.Set(from._internal_atm_implied_variance(), 
      _this->GetArenaForAllocation());
  }
  _impl_.atm_skew_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.atm_skew_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_atm_skew().empty()) {
    _this->_impl_.atm_skew_.Set(from._internal_atm_skew(), 
      _this->GetArenaForAllocation());
  }
  _impl_.left_slope_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.left_slope_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_left_slope().empty()) {
    _this->_impl_.left_slope_.Set(from._internal_left_slope(), 
      _this->GetArenaForAllocation());
  }
  _impl_.right_slope_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.right_slope_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_right_slope().empty()) {
    _this->_impl_.right_slope_.Set(from._internal_right_slope(), 
      _this->GetArenaForAllocation());
  }
  _impl_.min_implied_variance_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.min_implied_variance_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_implied_variance().empty()) {
    _this->_impl_.min_implied_variance_.Set(from._internal_min_implied_variance(), 
      _this->GetArenaForAllocation());
  }
  _impl_.current_spot_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_spot_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_current_spot().empty()) {
    _this->_impl_.current_spot_.Set(from._internal_current_spot(), 
      _this->GetArenaForAllocation());
  }
  _impl_.interest_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interest_rate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_interest_rate().empty()) {
    _this->_impl_.interest_rate_.Set(from._internal_interest_rate(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_data_start_time()) {
    _this->_impl_.data_start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.data_start_time_);
  }
  if (from._internal_has_data_end_time()) {
    _this->_impl_.data_end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.data_end_time_);
  }
  if (from._internal_has_expiry()) {
    _this->_impl_.expiry_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.expiry_);
  }
  if (from._internal_has_ts_event()) {
    _this->_impl_.ts_event_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.ts_event_);
  }
  // @@protoc_insertion_point(copy_constructor:kaikosdk.StreamIvSviParametersResponseV1)
}

inline void StreamIvSviParametersResponseV1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.exchanges_){arena}
    , decltype(_impl_.base_){}
    , decltype(_impl_.quote_){}
    , decltype(_impl_.time_to_expiry_){}
    , decltype(_impl_.atm_implied_variance_){}
    , decltype(_impl_.atm_skew_){}
    , decltype(_impl_.left_slope_){}
    , decltype(_impl_.right_slope_){}
    , decltype(_impl_.min_implied_variance_){}
    , decltype(_impl_.current_spot_){}
    , decltype(_impl_.interest_rate_){}
    , decltype(_impl_.data_start_time_){nullptr}
    , decltype(_impl_.data_end_time_){nullptr}
    , decltype(_impl_.expiry_){nullptr}
    , decltype(_impl_.ts_event_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.base_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.quote_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.time_to_expiry_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_to_expiry_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.atm_implied_variance_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.atm_implied_variance_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.atm_skew_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.atm_skew_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.left_slope_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.left_slope_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.right_slope_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.right_slope_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_implied_variance_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.min_implied_variance_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.current_spot_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.current_spot_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.interest_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interest_rate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamIvSviParametersResponseV1::~StreamIvSviParametersResponseV1() {
  // @@protoc_insertion_point(destructor:kaikosdk.StreamIvSviParametersResponseV1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamIvSviParametersResponseV1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.exchanges_.~RepeatedPtrField();
  _impl_.base_.Destroy();
  _impl_.quote_.Destroy();
  _impl_.time_to_expiry_.Destroy();
  _impl_.atm_implied_variance_.Destroy();
  _impl_.atm_skew_.Destroy();
  _impl_.left_slope_.Destroy();
  _impl_.right_slope_.Destroy();
  _impl_.min_implied_variance_.Destroy();
  _impl_.current_spot_.Destroy();
  _impl_.interest_rate_.Destroy();
  if (this != internal_default_instance()) delete _impl_.data_start_time_;
  if (this != internal_default_instance()) delete _impl_.data_end_time_;
  if (this != internal_default_instance()) delete _impl_.expiry_;
  if (this != internal_default_instance()) delete _impl_.ts_event_;
}

void StreamIvSviParametersResponseV1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamIvSviParametersResponseV1::Clear() {
// @@protoc_insertion_point(message_clear_start:kaikosdk.StreamIvSviParametersResponseV1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exchanges_.Clear();
  _impl_.base_.ClearToEmpty();
  _impl_.quote_.ClearToEmpty();
  _impl_.time_to_expiry_.ClearToEmpty();
  _impl_.atm_implied_variance_.ClearToEmpty();
  _impl_.atm_skew_.ClearToEmpty();
  _impl_.left_slope_.ClearToEmpty();
  _impl_.right_slope_.ClearToEmpty();
  _impl_.min_implied_variance_.ClearToEmpty();
  _impl_.current_spot_.ClearToEmpty();
  _impl_.interest_rate_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.data_start_time_ != nullptr) {
    delete _impl_.data_start_time_;
  }
  _impl_.data_start_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.data_end_time_ != nullptr) {
    delete _impl_.data_end_time_;
  }
  _impl_.data_end_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.expiry_ != nullptr) {
    delete _impl_.expiry_;
  }
  _impl_.expiry_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.ts_event_ != nullptr) {
    delete _impl_.ts_event_;
  }
  _impl_.ts_event_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamIvSviParametersResponseV1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp data_start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_start_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp data_end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_end_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expiry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string exchanges = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_exchanges();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamIvSviParametersResponseV1.exchanges"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string base = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_base();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamIvSviParametersResponseV1.base"));
        } else
          goto handle_unusual;
        continue;
      // string quote = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_quote();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamIvSviParametersResponseV1.quote"));
        } else
          goto handle_unusual;
        continue;
      // string time_to_expiry = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_time_to_expiry();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamIvSviParametersResponseV1.time_to_expiry"));
        } else
          goto handle_unusual;
        continue;
      // string atm_implied_variance = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_atm_implied_variance();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamIvSviParametersResponseV1.atm_implied_variance"));
        } else
          goto handle_unusual;
        continue;
      // string atm_skew = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_atm_skew();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamIvSviParametersResponseV1.atm_skew"));
        } else
          goto handle_unusual;
        continue;
      // string left_slope = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_left_slope();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamIvSviParametersResponseV1.left_slope"));
        } else
          goto handle_unusual;
        continue;
      // string right_slope = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_right_slope();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamIvSviParametersResponseV1.right_slope"));
        } else
          goto handle_unusual;
        continue;
      // string min_implied_variance = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_min_implied_variance();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamIvSviParametersResponseV1.min_implied_variance"));
        } else
          goto handle_unusual;
        continue;
      // string current_spot = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_current_spot();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamIvSviParametersResponseV1.current_spot"));
        } else
          goto handle_unusual;
        continue;
      // string interest_rate = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_interest_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "kaikosdk.StreamIvSviParametersResponseV1.interest_rate"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp ts_event = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_ts_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamIvSviParametersResponseV1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaikosdk.StreamIvSviParametersResponseV1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp data_start_time = 1;
  if (this->_internal_has_data_start_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data_start_time(this),
        _Internal::data_start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp data_end_time = 2;
  if (this->_internal_has_data_end_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data_end_time(this),
        _Internal::data_end_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp expiry = 3;
  if (this->_internal_has_expiry()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::expiry(this),
        _Internal::expiry(this).GetCachedSize(), target, stream);
  }

  // repeated string exchanges = 4;
  for (int i = 0, n = this->_internal_exchanges_size(); i < n; i++) {
    const auto& s = this->_internal_exchanges(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamIvSviParametersResponseV1.exchanges");
    target = stream->WriteString(4, s, target);
  }

  // string base = 5;
  if (!this->_internal_base().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_base().data(), static_cast<int>(this->_internal_base().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamIvSviParametersResponseV1.base");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_base(), target);
  }

  // string quote = 6;
  if (!this->_internal_quote().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quote().data(), static_cast<int>(this->_internal_quote().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamIvSviParametersResponseV1.quote");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_quote(), target);
  }

  // string time_to_expiry = 7;
  if (!this->_internal_time_to_expiry().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time_to_expiry().data(), static_cast<int>(this->_internal_time_to_expiry().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamIvSviParametersResponseV1.time_to_expiry");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_time_to_expiry(), target);
  }

  // string atm_implied_variance = 8;
  if (!this->_internal_atm_implied_variance().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_atm_implied_variance().data(), static_cast<int>(this->_internal_atm_implied_variance().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamIvSviParametersResponseV1.atm_implied_variance");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_atm_implied_variance(), target);
  }

  // string atm_skew = 9;
  if (!this->_internal_atm_skew().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_atm_skew().data(), static_cast<int>(this->_internal_atm_skew().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamIvSviParametersResponseV1.atm_skew");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_atm_skew(), target);
  }

  // string left_slope = 10;
  if (!this->_internal_left_slope().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_left_slope().data(), static_cast<int>(this->_internal_left_slope().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamIvSviParametersResponseV1.left_slope");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_left_slope(), target);
  }

  // string right_slope = 11;
  if (!this->_internal_right_slope().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_right_slope().data(), static_cast<int>(this->_internal_right_slope().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamIvSviParametersResponseV1.right_slope");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_right_slope(), target);
  }

  // string min_implied_variance = 12;
  if (!this->_internal_min_implied_variance().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_min_implied_variance().data(), static_cast<int>(this->_internal_min_implied_variance().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamIvSviParametersResponseV1.min_implied_variance");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_min_implied_variance(), target);
  }

  // string current_spot = 13;
  if (!this->_internal_current_spot().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_current_spot().data(), static_cast<int>(this->_internal_current_spot().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamIvSviParametersResponseV1.current_spot");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_current_spot(), target);
  }

  // string interest_rate = 14;
  if (!this->_internal_interest_rate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interest_rate().data(), static_cast<int>(this->_internal_interest_rate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.StreamIvSviParametersResponseV1.interest_rate");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_interest_rate(), target);
  }

  // .google.protobuf.Timestamp ts_event = 15;
  if (this->_internal_has_ts_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::ts_event(this),
        _Internal::ts_event(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaikosdk.StreamIvSviParametersResponseV1)
  return target;
}

size_t StreamIvSviParametersResponseV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaikosdk.StreamIvSviParametersResponseV1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string exchanges = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.exchanges_.size());
  for (int i = 0, n = _impl_.exchanges_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.exchanges_.Get(i));
  }

  // string base = 5;
  if (!this->_internal_base().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base());
  }

  // string quote = 6;
  if (!this->_internal_quote().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quote());
  }

  // string time_to_expiry = 7;
  if (!this->_internal_time_to_expiry().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time_to_expiry());
  }

  // string atm_implied_variance = 8;
  if (!this->_internal_atm_implied_variance().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_atm_implied_variance());
  }

  // string atm_skew = 9;
  if (!this->_internal_atm_skew().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_atm_skew());
  }

  // string left_slope = 10;
  if (!this->_internal_left_slope().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_left_slope());
  }

  // string right_slope = 11;
  if (!this->_internal_right_slope().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_right_slope());
  }

  // string min_implied_variance = 12;
  if (!this->_internal_min_implied_variance().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_min_implied_variance());
  }

  // string current_spot = 13;
  if (!this->_internal_current_spot().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_spot());
  }

  // string interest_rate = 14;
  if (!this->_internal_interest_rate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interest_rate());
  }

  // .google.protobuf.Timestamp data_start_time = 1;
  if (this->_internal_has_data_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_start_time_);
  }

  // .google.protobuf.Timestamp data_end_time = 2;
  if (this->_internal_has_data_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_end_time_);
  }

  // .google.protobuf.Timestamp expiry = 3;
  if (this->_internal_has_expiry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expiry_);
  }

  // .google.protobuf.Timestamp ts_event = 15;
  if (this->_internal_has_ts_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ts_event_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamIvSviParametersResponseV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamIvSviParametersResponseV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamIvSviParametersResponseV1::GetClassData() const { return &_class_data_; }


void StreamIvSviParametersResponseV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamIvSviParametersResponseV1*>(&to_msg);
  auto& from = static_cast<const StreamIvSviParametersResponseV1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kaikosdk.StreamIvSviParametersResponseV1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.exchanges_.MergeFrom(from._impl_.exchanges_);
  if (!from._internal_base().empty()) {
    _this->_internal_set_base(from._internal_base());
  }
  if (!from._internal_quote().empty()) {
    _this->_internal_set_quote(from._internal_quote());
  }
  if (!from._internal_time_to_expiry().empty()) {
    _this->_internal_set_time_to_expiry(from._internal_time_to_expiry());
  }
  if (!from._internal_atm_implied_variance().empty()) {
    _this->_internal_set_atm_implied_variance(from._internal_atm_implied_variance());
  }
  if (!from._internal_atm_skew().empty()) {
    _this->_internal_set_atm_skew(from._internal_atm_skew());
  }
  if (!from._internal_left_slope().empty()) {
    _this->_internal_set_left_slope(from._internal_left_slope());
  }
  if (!from._internal_right_slope().empty()) {
    _this->_internal_set_right_slope(from._internal_right_slope());
  }
  if (!from._internal_min_implied_variance().empty()) {
    _this->_internal_set_min_implied_variance(from._internal_min_implied_variance());
  }
  if (!from._internal_current_spot().empty()) {
    _this->_internal_set_current_spot(from._internal_current_spot());
  }
  if (!from._internal_interest_rate().empty()) {
    _this->_internal_set_interest_rate(from._internal_interest_rate());
  }
  if (from._internal_has_data_start_time()) {
    _this->_internal_mutable_data_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_data_start_time());
  }
  if (from._internal_has_data_end_time()) {
    _this->_internal_mutable_data_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_data_end_time());
  }
  if (from._internal_has_expiry()) {
    _this->_internal_mutable_expiry()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_expiry());
  }
  if (from._internal_has_ts_event()) {
    _this->_internal_mutable_ts_event()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_ts_event());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamIvSviParametersResponseV1::CopyFrom(const StreamIvSviParametersResponseV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaikosdk.StreamIvSviParametersResponseV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamIvSviParametersResponseV1::IsInitialized() const {
  return true;
}

void StreamIvSviParametersResponseV1::InternalSwap(StreamIvSviParametersResponseV1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.exchanges_.InternalSwap(&other->_impl_.exchanges_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.base_, lhs_arena,
      &other->_impl_.base_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.quote_, lhs_arena,
      &other->_impl_.quote_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.time_to_expiry_, lhs_arena,
      &other->_impl_.time_to_expiry_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.atm_implied_variance_, lhs_arena,
      &other->_impl_.atm_implied_variance_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.atm_skew_, lhs_arena,
      &other->_impl_.atm_skew_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.left_slope_, lhs_arena,
      &other->_impl_.left_slope_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.right_slope_, lhs_arena,
      &other->_impl_.right_slope_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.min_implied_variance_, lhs_arena,
      &other->_impl_.min_implied_variance_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.current_spot_, lhs_arena,
      &other->_impl_.current_spot_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.interest_rate_, lhs_arena,
      &other->_impl_.interest_rate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamIvSviParametersResponseV1, _impl_.ts_event_)
      + sizeof(StreamIvSviParametersResponseV1::_impl_.ts_event_)
      - PROTOBUF_FIELD_OFFSET(StreamIvSviParametersResponseV1, _impl_.data_start_time_)>(
          reinterpret_cast<char*>(&_impl_.data_start_time_),
          reinterpret_cast<char*>(&other->_impl_.data_start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamIvSviParametersResponseV1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sdk_2fstream_2fiv_5fsvi_5fparameters_5fv1_2fresponse_2eproto_getter, &descriptor_table_sdk_2fstream_2fiv_5fsvi_5fparameters_5fv1_2fresponse_2eproto_once,
      file_level_metadata_sdk_2fstream_2fiv_5fsvi_5fparameters_5fv1_2fresponse_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace kaikosdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kaikosdk::StreamIvSviParametersResponseV1*
Arena::CreateMaybeMessage< ::kaikosdk::StreamIvSviParametersResponseV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaikosdk::StreamIvSviParametersResponseV1 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
