// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk/core/envelope.proto

#include "sdk/core/envelope.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace kaikosdk {
constexpr Envelope::Envelope(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , access_(nullptr)
  , query_(nullptr)
  , time_(nullptr)
  , status_(0)
{}
struct EnvelopeDefaultTypeInternal {
  constexpr EnvelopeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnvelopeDefaultTypeInternal() {}
  union {
    Envelope _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnvelopeDefaultTypeInternal _Envelope_default_instance_;
}  // namespace kaikosdk
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sdk_2fcore_2fenvelope_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sdk_2fcore_2fenvelope_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sdk_2fcore_2fenvelope_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sdk_2fcore_2fenvelope_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::Envelope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kaikosdk::Envelope, access_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::Envelope, message_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::Envelope, query_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::Envelope, status_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::Envelope, time_),
  PROTOBUF_FIELD_OFFSET(::kaikosdk::Envelope, timestamp_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::kaikosdk::Envelope)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kaikosdk::_Envelope_default_instance_),
};

const char descriptor_table_protodef_sdk_2fcore_2fenvelope_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027sdk/core/envelope.proto\022\010kaikosdk\032\034goo"
  "gle/protobuf/struct.proto\032\037google/protob"
  "uf/timestamp.proto\032\036sdk/core/envelope_st"
  "atus.proto\"\323\001\n\010Envelope\022\'\n\006access\030\001 \001(\0132"
  "\027.google.protobuf.Struct\022\017\n\007message\030\002 \001("
  "\t\022&\n\005query\030\003 \001(\0132\027.google.protobuf.Struc"
  "t\022(\n\006status\030\004 \001(\0162\030.kaikosdk.EnvelopeSta"
  "tus\022(\n\004time\030\005 \001(\0132\032.google.protobuf.Time"
  "stamp\022\021\n\ttimestamp\030\006 \001(\tBX\n\022com.kaiko.sd"
  "k.coreP\001Z0github.com/challengerdeep/kaik"
  "o-go-sdk/core;core\252\002\rKaikoSdk.Coreb\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sdk_2fcore_2fenvelope_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_sdk_2fcore_2fenvelope_5fstatus_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sdk_2fcore_2fenvelope_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sdk_2fcore_2fenvelope_2eproto = {
  false, false, 442, descriptor_table_protodef_sdk_2fcore_2fenvelope_2eproto, "sdk/core/envelope.proto", 
  &descriptor_table_sdk_2fcore_2fenvelope_2eproto_once, descriptor_table_sdk_2fcore_2fenvelope_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_sdk_2fcore_2fenvelope_2eproto::offsets,
  file_level_metadata_sdk_2fcore_2fenvelope_2eproto, file_level_enum_descriptors_sdk_2fcore_2fenvelope_2eproto, file_level_service_descriptors_sdk_2fcore_2fenvelope_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_sdk_2fcore_2fenvelope_2eproto_getter() {
  return &descriptor_table_sdk_2fcore_2fenvelope_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sdk_2fcore_2fenvelope_2eproto(&descriptor_table_sdk_2fcore_2fenvelope_2eproto);
namespace kaikosdk {

// ===================================================================

class Envelope::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Struct& access(const Envelope* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& query(const Envelope* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& time(const Envelope* msg);
};

const PROTOBUF_NAMESPACE_ID::Struct&
Envelope::_Internal::access(const Envelope* msg) {
  return *msg->access_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
Envelope::_Internal::query(const Envelope* msg) {
  return *msg->query_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Envelope::_Internal::time(const Envelope* msg) {
  return *msg->time_;
}
void Envelope::clear_access() {
  if (GetArenaForAllocation() == nullptr && access_ != nullptr) {
    delete access_;
  }
  access_ = nullptr;
}
void Envelope::clear_query() {
  if (GetArenaForAllocation() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
}
void Envelope::clear_time() {
  if (GetArenaForAllocation() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
Envelope::Envelope(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kaikosdk.Envelope)
}
Envelope::Envelope(const Envelope& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_timestamp().empty()) {
    timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_timestamp(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_access()) {
    access_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.access_);
  } else {
    access_ = nullptr;
  }
  if (from._internal_has_query()) {
    query_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.query_);
  } else {
    query_ = nullptr;
  }
  if (from._internal_has_time()) {
    time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:kaikosdk.Envelope)
}

void Envelope::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&access_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&access_)) + sizeof(status_));
}

Envelope::~Envelope() {
  // @@protoc_insertion_point(destructor:kaikosdk.Envelope)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Envelope::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete access_;
  if (this != internal_default_instance()) delete query_;
  if (this != internal_default_instance()) delete time_;
}

void Envelope::ArenaDtor(void* object) {
  Envelope* _this = reinterpret_cast< Envelope* >(object);
  (void)_this;
}
void Envelope::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Envelope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Envelope::Clear() {
// @@protoc_insertion_point(message_clear_start:kaikosdk.Envelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  timestamp_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && access_ != nullptr) {
    delete access_;
  }
  access_ = nullptr;
  if (GetArenaForAllocation() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
  if (GetArenaForAllocation() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Envelope::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Struct access = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_access(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaikosdk.Envelope.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct query = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kaikosdk.EnvelopeStatus status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::kaikosdk::EnvelopeStatus>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kaikosdk.Envelope.timestamp"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Envelope::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kaikosdk.Envelope)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Struct access = 1;
  if (this->has_access()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::access(this), target, stream);
  }

  // string message = 2;
  if (!this->message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.Envelope.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // .google.protobuf.Struct query = 3;
  if (this->has_query()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::query(this), target, stream);
  }

  // .kaikosdk.EnvelopeStatus status = 4;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_status(), target);
  }

  // .google.protobuf.Timestamp time = 5;
  if (this->has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::time(this), target, stream);
  }

  // string timestamp = 6;
  if (!this->timestamp().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_timestamp().data(), static_cast<int>(this->_internal_timestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kaikosdk.Envelope.timestamp");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kaikosdk.Envelope)
  return target;
}

size_t Envelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kaikosdk.Envelope)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string timestamp = 6;
  if (!this->timestamp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timestamp());
  }

  // .google.protobuf.Struct access = 1;
  if (this->has_access()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *access_);
  }

  // .google.protobuf.Struct query = 3;
  if (this->has_query()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *query_);
  }

  // .google.protobuf.Timestamp time = 5;
  if (this->has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // .kaikosdk.EnvelopeStatus status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Envelope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kaikosdk.Envelope)
  GOOGLE_DCHECK_NE(&from, this);
  const Envelope* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Envelope>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kaikosdk.Envelope)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kaikosdk.Envelope)
    MergeFrom(*source);
  }
}

void Envelope::MergeFrom(const Envelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kaikosdk.Envelope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (!from.timestamp().empty()) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.has_access()) {
    _internal_mutable_access()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_access());
  }
  if (from.has_query()) {
    _internal_mutable_query()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_query());
  }
  if (from.has_time()) {
    _internal_mutable_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void Envelope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kaikosdk.Envelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Envelope::CopyFrom(const Envelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kaikosdk.Envelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Envelope::IsInitialized() const {
  return true;
}

void Envelope::InternalSwap(Envelope* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, GetArenaForAllocation(),
      &other->message_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &timestamp_, GetArenaForAllocation(),
      &other->timestamp_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Envelope, status_)
      + sizeof(Envelope::status_)
      - PROTOBUF_FIELD_OFFSET(Envelope, access_)>(
          reinterpret_cast<char*>(&access_),
          reinterpret_cast<char*>(&other->access_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Envelope::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sdk_2fcore_2fenvelope_2eproto_getter, &descriptor_table_sdk_2fcore_2fenvelope_2eproto_once,
      file_level_metadata_sdk_2fcore_2fenvelope_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace kaikosdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kaikosdk::Envelope* Arena::CreateMaybeMessage< ::kaikosdk::Envelope >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kaikosdk::Envelope >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
