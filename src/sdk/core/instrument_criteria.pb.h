// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk/core/instrument_criteria.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sdk_2fcore_2finstrument_5fcriteria_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sdk_2fcore_2finstrument_5fcriteria_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sdk_2fcore_2finstrument_5fcriteria_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sdk_2fcore_2finstrument_5fcriteria_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sdk_2fcore_2finstrument_5fcriteria_2eproto;
namespace kaikosdk {
class InstrumentCriteria;
struct InstrumentCriteriaDefaultTypeInternal;
extern InstrumentCriteriaDefaultTypeInternal _InstrumentCriteria_default_instance_;
}  // namespace kaikosdk
PROTOBUF_NAMESPACE_OPEN
template<> ::kaikosdk::InstrumentCriteria* Arena::CreateMaybeMessage<::kaikosdk::InstrumentCriteria>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kaikosdk {

// ===================================================================

class InstrumentCriteria final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.InstrumentCriteria) */ {
 public:
  inline InstrumentCriteria() : InstrumentCriteria(nullptr) {}
  ~InstrumentCriteria() override;
  explicit constexpr InstrumentCriteria(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InstrumentCriteria(const InstrumentCriteria& from);
  InstrumentCriteria(InstrumentCriteria&& from) noexcept
    : InstrumentCriteria() {
    *this = ::std::move(from);
  }

  inline InstrumentCriteria& operator=(const InstrumentCriteria& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstrumentCriteria& operator=(InstrumentCriteria&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstrumentCriteria& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstrumentCriteria* internal_default_instance() {
    return reinterpret_cast<const InstrumentCriteria*>(
               &_InstrumentCriteria_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InstrumentCriteria& a, InstrumentCriteria& b) {
    a.Swap(&b);
  }
  inline void Swap(InstrumentCriteria* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstrumentCriteria* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstrumentCriteria* New() const final {
    return new InstrumentCriteria();
  }

  InstrumentCriteria* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstrumentCriteria>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstrumentCriteria& from);
  void MergeFrom(const InstrumentCriteria& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstrumentCriteria* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.InstrumentCriteria";
  }
  protected:
  explicit InstrumentCriteria(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExchangeFieldNumber = 1,
    kInstrumentClassFieldNumber = 2,
    kCodeFieldNumber = 3,
  };
  // string exchange = 1;
  void clear_exchange();
  const std::string& exchange() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exchange(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exchange();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_exchange();
  void set_allocated_exchange(std::string* exchange);
  private:
  const std::string& _internal_exchange() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange(const std::string& value);
  std::string* _internal_mutable_exchange();
  public:

  // string instrument_class = 2;
  void clear_instrument_class();
  const std::string& instrument_class() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_class(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_class();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_instrument_class();
  void set_allocated_instrument_class(std::string* instrument_class);
  private:
  const std::string& _internal_instrument_class() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_class(const std::string& value);
  std::string* _internal_mutable_instrument_class();
  public:

  // string code = 3;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // @@protoc_insertion_point(class_scope:kaikosdk.InstrumentCriteria)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_class_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2fcore_2finstrument_5fcriteria_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InstrumentCriteria

// string exchange = 1;
inline void InstrumentCriteria::clear_exchange() {
  exchange_.ClearToEmpty();
}
inline const std::string& InstrumentCriteria::exchange() const {
  // @@protoc_insertion_point(field_get:kaikosdk.InstrumentCriteria.exchange)
  return _internal_exchange();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentCriteria::set_exchange(ArgT0&& arg0, ArgT... args) {
 
 exchange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.InstrumentCriteria.exchange)
}
inline std::string* InstrumentCriteria::mutable_exchange() {
  // @@protoc_insertion_point(field_mutable:kaikosdk.InstrumentCriteria.exchange)
  return _internal_mutable_exchange();
}
inline const std::string& InstrumentCriteria::_internal_exchange() const {
  return exchange_.Get();
}
inline void InstrumentCriteria::_internal_set_exchange(const std::string& value) {
  
  exchange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentCriteria::_internal_mutable_exchange() {
  
  return exchange_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentCriteria::release_exchange() {
  // @@protoc_insertion_point(field_release:kaikosdk.InstrumentCriteria.exchange)
  return exchange_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentCriteria::set_allocated_exchange(std::string* exchange) {
  if (exchange != nullptr) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.InstrumentCriteria.exchange)
}

// string instrument_class = 2;
inline void InstrumentCriteria::clear_instrument_class() {
  instrument_class_.ClearToEmpty();
}
inline const std::string& InstrumentCriteria::instrument_class() const {
  // @@protoc_insertion_point(field_get:kaikosdk.InstrumentCriteria.instrument_class)
  return _internal_instrument_class();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentCriteria::set_instrument_class(ArgT0&& arg0, ArgT... args) {
 
 instrument_class_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.InstrumentCriteria.instrument_class)
}
inline std::string* InstrumentCriteria::mutable_instrument_class() {
  // @@protoc_insertion_point(field_mutable:kaikosdk.InstrumentCriteria.instrument_class)
  return _internal_mutable_instrument_class();
}
inline const std::string& InstrumentCriteria::_internal_instrument_class() const {
  return instrument_class_.Get();
}
inline void InstrumentCriteria::_internal_set_instrument_class(const std::string& value) {
  
  instrument_class_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentCriteria::_internal_mutable_instrument_class() {
  
  return instrument_class_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentCriteria::release_instrument_class() {
  // @@protoc_insertion_point(field_release:kaikosdk.InstrumentCriteria.instrument_class)
  return instrument_class_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentCriteria::set_allocated_instrument_class(std::string* instrument_class) {
  if (instrument_class != nullptr) {
    
  } else {
    
  }
  instrument_class_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument_class,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.InstrumentCriteria.instrument_class)
}

// string code = 3;
inline void InstrumentCriteria::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& InstrumentCriteria::code() const {
  // @@protoc_insertion_point(field_get:kaikosdk.InstrumentCriteria.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InstrumentCriteria::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.InstrumentCriteria.code)
}
inline std::string* InstrumentCriteria::mutable_code() {
  // @@protoc_insertion_point(field_mutable:kaikosdk.InstrumentCriteria.code)
  return _internal_mutable_code();
}
inline const std::string& InstrumentCriteria::_internal_code() const {
  return code_.Get();
}
inline void InstrumentCriteria::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InstrumentCriteria::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InstrumentCriteria::release_code() {
  // @@protoc_insertion_point(field_release:kaikosdk.InstrumentCriteria.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InstrumentCriteria::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.InstrumentCriteria.code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace kaikosdk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sdk_2fcore_2finstrument_5fcriteria_2eproto
