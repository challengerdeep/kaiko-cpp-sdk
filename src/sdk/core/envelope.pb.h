// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk/core/envelope.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sdk_2fcore_2fenvelope_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sdk_2fcore_2fenvelope_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "sdk/core/envelope_status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sdk_2fcore_2fenvelope_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sdk_2fcore_2fenvelope_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sdk_2fcore_2fenvelope_2eproto;
namespace kaikosdk {
class Envelope;
struct EnvelopeDefaultTypeInternal;
extern EnvelopeDefaultTypeInternal _Envelope_default_instance_;
}  // namespace kaikosdk
PROTOBUF_NAMESPACE_OPEN
template<> ::kaikosdk::Envelope* Arena::CreateMaybeMessage<::kaikosdk::Envelope>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kaikosdk {

// ===================================================================

class Envelope final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kaikosdk.Envelope) */ {
 public:
  inline Envelope() : Envelope(nullptr) {}
  ~Envelope() override;
  explicit constexpr Envelope(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Envelope(const Envelope& from);
  Envelope(Envelope&& from) noexcept
    : Envelope() {
    *this = ::std::move(from);
  }

  inline Envelope& operator=(const Envelope& from) {
    CopyFrom(from);
    return *this;
  }
  inline Envelope& operator=(Envelope&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Envelope& default_instance() {
    return *internal_default_instance();
  }
  static inline const Envelope* internal_default_instance() {
    return reinterpret_cast<const Envelope*>(
               &_Envelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Envelope& a, Envelope& b) {
    a.Swap(&b);
  }
  inline void Swap(Envelope* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Envelope* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Envelope* New() const final {
    return new Envelope();
  }

  Envelope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Envelope>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Envelope& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Envelope& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Envelope* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kaikosdk.Envelope";
  }
  protected:
  explicit Envelope(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kTimestampFieldNumber = 6,
    kAccessFieldNumber = 1,
    kQueryFieldNumber = 3,
    kTimeFieldNumber = 5,
    kStatusFieldNumber = 4,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string timestamp = 6;
  void clear_timestamp();
  const std::string& timestamp() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timestamp(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timestamp();
  PROTOBUF_MUST_USE_RESULT std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // .google.protobuf.Struct access = 1;
  bool has_access() const;
  private:
  bool _internal_has_access() const;
  public:
  void clear_access();
  const PROTOBUF_NAMESPACE_ID::Struct& access() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Struct* release_access();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_access();
  void set_allocated_access(PROTOBUF_NAMESPACE_ID::Struct* access);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_access() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_access();
  public:
  void unsafe_arena_set_allocated_access(
      PROTOBUF_NAMESPACE_ID::Struct* access);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_access();

  // .google.protobuf.Struct query = 3;
  bool has_query() const;
  private:
  bool _internal_has_query() const;
  public:
  void clear_query();
  const PROTOBUF_NAMESPACE_ID::Struct& query() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Struct* release_query();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_query();
  void set_allocated_query(PROTOBUF_NAMESPACE_ID::Struct* query);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_query() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_query();
  public:
  void unsafe_arena_set_allocated_query(
      PROTOBUF_NAMESPACE_ID::Struct* query);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_query();

  // .google.protobuf.Timestamp time = 5;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();

  // .kaikosdk.EnvelopeStatus status = 4;
  void clear_status();
  ::kaikosdk::EnvelopeStatus status() const;
  void set_status(::kaikosdk::EnvelopeStatus value);
  private:
  ::kaikosdk::EnvelopeStatus _internal_status() const;
  void _internal_set_status(::kaikosdk::EnvelopeStatus value);
  public:

  // @@protoc_insertion_point(class_scope:kaikosdk.Envelope)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  PROTOBUF_NAMESPACE_ID::Struct* access_;
  PROTOBUF_NAMESPACE_ID::Struct* query_;
  PROTOBUF_NAMESPACE_ID::Timestamp* time_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sdk_2fcore_2fenvelope_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Envelope

// .google.protobuf.Struct access = 1;
inline bool Envelope::_internal_has_access() const {
  return this != internal_default_instance() && access_ != nullptr;
}
inline bool Envelope::has_access() const {
  return _internal_has_access();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& Envelope::_internal_access() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = access_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct&>(
      PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& Envelope::access() const {
  // @@protoc_insertion_point(field_get:kaikosdk.Envelope.access)
  return _internal_access();
}
inline void Envelope::unsafe_arena_set_allocated_access(
    PROTOBUF_NAMESPACE_ID::Struct* access) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(access_);
  }
  access_ = access;
  if (access) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.Envelope.access)
}
inline PROTOBUF_NAMESPACE_ID::Struct* Envelope::release_access() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = access_;
  access_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* Envelope::unsafe_arena_release_access() {
  // @@protoc_insertion_point(field_release:kaikosdk.Envelope.access)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = access_;
  access_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* Envelope::_internal_mutable_access() {
  
  if (access_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    access_ = p;
  }
  return access_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* Envelope::mutable_access() {
  PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_access();
  // @@protoc_insertion_point(field_mutable:kaikosdk.Envelope.access)
  return _msg;
}
inline void Envelope::set_allocated_access(PROTOBUF_NAMESPACE_ID::Struct* access) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(access_);
  }
  if (access) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(access));
    if (message_arena != submessage_arena) {
      access = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, access, submessage_arena);
    }
    
  } else {
    
  }
  access_ = access;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.Envelope.access)
}

// string message = 2;
inline void Envelope::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& Envelope::message() const {
  // @@protoc_insertion_point(field_get:kaikosdk.Envelope.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Envelope::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.Envelope.message)
}
inline std::string* Envelope::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:kaikosdk.Envelope.message)
  return _s;
}
inline const std::string& Envelope::_internal_message() const {
  return message_.Get();
}
inline void Envelope::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Envelope::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Envelope::release_message() {
  // @@protoc_insertion_point(field_release:kaikosdk.Envelope.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Envelope::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.Envelope.message)
}

// .google.protobuf.Struct query = 3;
inline bool Envelope::_internal_has_query() const {
  return this != internal_default_instance() && query_ != nullptr;
}
inline bool Envelope::has_query() const {
  return _internal_has_query();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& Envelope::_internal_query() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = query_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct&>(
      PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& Envelope::query() const {
  // @@protoc_insertion_point(field_get:kaikosdk.Envelope.query)
  return _internal_query();
}
inline void Envelope::unsafe_arena_set_allocated_query(
    PROTOBUF_NAMESPACE_ID::Struct* query) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_);
  }
  query_ = query;
  if (query) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.Envelope.query)
}
inline PROTOBUF_NAMESPACE_ID::Struct* Envelope::release_query() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = query_;
  query_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* Envelope::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_release:kaikosdk.Envelope.query)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = query_;
  query_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* Envelope::_internal_mutable_query() {
  
  if (query_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    query_ = p;
  }
  return query_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* Envelope::mutable_query() {
  PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:kaikosdk.Envelope.query)
  return _msg;
}
inline void Envelope::set_allocated_query(PROTOBUF_NAMESPACE_ID::Struct* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_);
  }
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query));
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    
  } else {
    
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.Envelope.query)
}

// .kaikosdk.EnvelopeStatus status = 4;
inline void Envelope::clear_status() {
  status_ = 0;
}
inline ::kaikosdk::EnvelopeStatus Envelope::_internal_status() const {
  return static_cast< ::kaikosdk::EnvelopeStatus >(status_);
}
inline ::kaikosdk::EnvelopeStatus Envelope::status() const {
  // @@protoc_insertion_point(field_get:kaikosdk.Envelope.status)
  return _internal_status();
}
inline void Envelope::_internal_set_status(::kaikosdk::EnvelopeStatus value) {
  
  status_ = value;
}
inline void Envelope::set_status(::kaikosdk::EnvelopeStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:kaikosdk.Envelope.status)
}

// .google.protobuf.Timestamp time = 5;
inline bool Envelope::_internal_has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline bool Envelope::has_time() const {
  return _internal_has_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Envelope::_internal_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Envelope::time() const {
  // @@protoc_insertion_point(field_get:kaikosdk.Envelope.time)
  return _internal_time();
}
inline void Envelope::unsafe_arena_set_allocated_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kaikosdk.Envelope.time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Envelope::release_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Envelope::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:kaikosdk.Envelope.time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Envelope::_internal_mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    time_ = p;
  }
  return time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Envelope::mutable_time() {
  PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:kaikosdk.Envelope.time)
  return _msg;
}
inline void Envelope::set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.Envelope.time)
}

// string timestamp = 6;
inline void Envelope::clear_timestamp() {
  timestamp_.ClearToEmpty();
}
inline const std::string& Envelope::timestamp() const {
  // @@protoc_insertion_point(field_get:kaikosdk.Envelope.timestamp)
  return _internal_timestamp();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Envelope::set_timestamp(ArgT0&& arg0, ArgT... args) {
 
 timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kaikosdk.Envelope.timestamp)
}
inline std::string* Envelope::mutable_timestamp() {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:kaikosdk.Envelope.timestamp)
  return _s;
}
inline const std::string& Envelope::_internal_timestamp() const {
  return timestamp_.Get();
}
inline void Envelope::_internal_set_timestamp(const std::string& value) {
  
  timestamp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Envelope::_internal_mutable_timestamp() {
  
  return timestamp_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Envelope::release_timestamp() {
  // @@protoc_insertion_point(field_release:kaikosdk.Envelope.timestamp)
  return timestamp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Envelope::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:kaikosdk.Envelope.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace kaikosdk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sdk_2fcore_2fenvelope_2eproto
