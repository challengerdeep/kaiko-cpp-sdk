// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sdk/sdk.proto
#ifndef GRPC_sdk_2fsdk_2eproto__INCLUDED
#define GRPC_sdk_2fsdk_2eproto__INCLUDED

#include "sdk/sdk.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace kaikosdk {

// Service for streaming Aggregated Quote V2
class StreamAggregatedQuoteServiceV2 final {
 public:
  static constexpr char const* service_full_name() {
    return "kaikosdk.StreamAggregatedQuoteServiceV2";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Subscribe
    std::unique_ptr< ::grpc::ClientReaderInterface< ::kaikosdk::StreamAggregatedQuoteResponseV2>> Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedQuoteRequestV2& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::kaikosdk::StreamAggregatedQuoteResponseV2>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatedQuoteResponseV2>> AsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedQuoteRequestV2& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatedQuoteResponseV2>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatedQuoteResponseV2>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedQuoteRequestV2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatedQuoteResponseV2>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Subscribe
      virtual void Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedQuoteRequestV2* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamAggregatedQuoteResponseV2>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::kaikosdk::StreamAggregatedQuoteResponseV2>* SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedQuoteRequestV2& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatedQuoteResponseV2>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedQuoteRequestV2& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatedQuoteResponseV2>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedQuoteRequestV2& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::kaikosdk::StreamAggregatedQuoteResponseV2>> Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedQuoteRequestV2& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::kaikosdk::StreamAggregatedQuoteResponseV2>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatedQuoteResponseV2>> AsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedQuoteRequestV2& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatedQuoteResponseV2>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatedQuoteResponseV2>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedQuoteRequestV2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatedQuoteResponseV2>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedQuoteRequestV2* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamAggregatedQuoteResponseV2>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::kaikosdk::StreamAggregatedQuoteResponseV2>* SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedQuoteRequestV2& request) override;
    ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatedQuoteResponseV2>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedQuoteRequestV2& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatedQuoteResponseV2>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedQuoteRequestV2& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Subscribe_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Subscribe
    virtual ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::kaikosdk::StreamAggregatedQuoteRequestV2* request, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatedQuoteResponseV2>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Subscribe() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatedQuoteRequestV2* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatedQuoteResponseV2>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::kaikosdk::StreamAggregatedQuoteRequestV2* request, ::grpc::ServerAsyncWriter< ::kaikosdk::StreamAggregatedQuoteResponseV2>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Subscribe<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::kaikosdk::StreamAggregatedQuoteRequestV2, ::kaikosdk::StreamAggregatedQuoteResponseV2>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::kaikosdk::StreamAggregatedQuoteRequestV2* request) { return this->Subscribe(context, request); }));
    }
    ~WithCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatedQuoteRequestV2* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatedQuoteResponseV2>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::kaikosdk::StreamAggregatedQuoteResponseV2>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::kaikosdk::StreamAggregatedQuoteRequestV2* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Subscribe<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Subscribe() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatedQuoteRequestV2* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatedQuoteResponseV2>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Subscribe() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatedQuoteRequestV2* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatedQuoteResponseV2>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Subscribe(context, request); }));
    }
    ~WithRawCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatedQuoteRequestV2* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatedQuoteResponseV2>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Subscribe() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::kaikosdk::StreamAggregatedQuoteRequestV2, ::kaikosdk::StreamAggregatedQuoteResponseV2>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::kaikosdk::StreamAggregatedQuoteRequestV2, ::kaikosdk::StreamAggregatedQuoteResponseV2>* streamer) {
                       return this->StreamedSubscribe(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatedQuoteRequestV2* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatedQuoteResponseV2>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribe(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::kaikosdk::StreamAggregatedQuoteRequestV2,::kaikosdk::StreamAggregatedQuoteResponseV2>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Subscribe<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_Subscribe<Service > StreamedService;
};

// Service for streaming Aggregated Price V1
// Service is deprecated, use `StreamAggregatedQuoteServiceV1` instead.
class StreamAggregatedPriceServiceV1 final {
 public:
  static constexpr char const* service_full_name() {
    return "kaikosdk.StreamAggregatedPriceServiceV1";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Subscribe
    std::unique_ptr< ::grpc::ClientReaderInterface< ::kaikosdk::StreamAggregatedPriceResponseV1>> Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedPriceRequestV1& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::kaikosdk::StreamAggregatedPriceResponseV1>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatedPriceResponseV1>> AsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedPriceRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatedPriceResponseV1>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatedPriceResponseV1>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedPriceRequestV1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatedPriceResponseV1>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Subscribe
      virtual void Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedPriceRequestV1* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamAggregatedPriceResponseV1>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::kaikosdk::StreamAggregatedPriceResponseV1>* SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedPriceRequestV1& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatedPriceResponseV1>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedPriceRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatedPriceResponseV1>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedPriceRequestV1& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::kaikosdk::StreamAggregatedPriceResponseV1>> Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedPriceRequestV1& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::kaikosdk::StreamAggregatedPriceResponseV1>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatedPriceResponseV1>> AsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedPriceRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatedPriceResponseV1>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatedPriceResponseV1>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedPriceRequestV1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatedPriceResponseV1>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedPriceRequestV1* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamAggregatedPriceResponseV1>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::kaikosdk::StreamAggregatedPriceResponseV1>* SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedPriceRequestV1& request) override;
    ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatedPriceResponseV1>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedPriceRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatedPriceResponseV1>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedPriceRequestV1& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Subscribe_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Subscribe
    virtual ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::kaikosdk::StreamAggregatedPriceRequestV1* request, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatedPriceResponseV1>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Subscribe() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatedPriceRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatedPriceResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::kaikosdk::StreamAggregatedPriceRequestV1* request, ::grpc::ServerAsyncWriter< ::kaikosdk::StreamAggregatedPriceResponseV1>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Subscribe<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::kaikosdk::StreamAggregatedPriceRequestV1, ::kaikosdk::StreamAggregatedPriceResponseV1>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::kaikosdk::StreamAggregatedPriceRequestV1* request) { return this->Subscribe(context, request); }));
    }
    ~WithCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatedPriceRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatedPriceResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::kaikosdk::StreamAggregatedPriceResponseV1>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::kaikosdk::StreamAggregatedPriceRequestV1* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Subscribe<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Subscribe() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatedPriceRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatedPriceResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Subscribe() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatedPriceRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatedPriceResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Subscribe(context, request); }));
    }
    ~WithRawCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatedPriceRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatedPriceResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Subscribe() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::kaikosdk::StreamAggregatedPriceRequestV1, ::kaikosdk::StreamAggregatedPriceResponseV1>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::kaikosdk::StreamAggregatedPriceRequestV1, ::kaikosdk::StreamAggregatedPriceResponseV1>* streamer) {
                       return this->StreamedSubscribe(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatedPriceRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatedPriceResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribe(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::kaikosdk::StreamAggregatedPriceRequestV1,::kaikosdk::StreamAggregatedPriceResponseV1>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Subscribe<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_Subscribe<Service > StreamedService;
};

// Service for streaming OHLCV V1
class StreamAggregatesOHLCVServiceV1 final {
 public:
  static constexpr char const* service_full_name() {
    return "kaikosdk.StreamAggregatesOHLCVServiceV1";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Subscribe
    std::unique_ptr< ::grpc::ClientReaderInterface< ::kaikosdk::StreamAggregatesOHLCVResponseV1>> Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesOHLCVRequestV1& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::kaikosdk::StreamAggregatesOHLCVResponseV1>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatesOHLCVResponseV1>> AsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesOHLCVRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatesOHLCVResponseV1>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatesOHLCVResponseV1>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesOHLCVRequestV1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatesOHLCVResponseV1>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Subscribe
      virtual void Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesOHLCVRequestV1* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamAggregatesOHLCVResponseV1>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::kaikosdk::StreamAggregatesOHLCVResponseV1>* SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesOHLCVRequestV1& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatesOHLCVResponseV1>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesOHLCVRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatesOHLCVResponseV1>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesOHLCVRequestV1& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::kaikosdk::StreamAggregatesOHLCVResponseV1>> Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesOHLCVRequestV1& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::kaikosdk::StreamAggregatesOHLCVResponseV1>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesOHLCVResponseV1>> AsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesOHLCVRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesOHLCVResponseV1>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesOHLCVResponseV1>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesOHLCVRequestV1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesOHLCVResponseV1>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesOHLCVRequestV1* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamAggregatesOHLCVResponseV1>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::kaikosdk::StreamAggregatesOHLCVResponseV1>* SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesOHLCVRequestV1& request) override;
    ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesOHLCVResponseV1>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesOHLCVRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesOHLCVResponseV1>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesOHLCVRequestV1& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Subscribe_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Subscribe
    virtual ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::kaikosdk::StreamAggregatesOHLCVRequestV1* request, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesOHLCVResponseV1>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Subscribe() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatesOHLCVRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesOHLCVResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::kaikosdk::StreamAggregatesOHLCVRequestV1* request, ::grpc::ServerAsyncWriter< ::kaikosdk::StreamAggregatesOHLCVResponseV1>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Subscribe<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::kaikosdk::StreamAggregatesOHLCVRequestV1, ::kaikosdk::StreamAggregatesOHLCVResponseV1>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::kaikosdk::StreamAggregatesOHLCVRequestV1* request) { return this->Subscribe(context, request); }));
    }
    ~WithCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatesOHLCVRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesOHLCVResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::kaikosdk::StreamAggregatesOHLCVResponseV1>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::kaikosdk::StreamAggregatesOHLCVRequestV1* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Subscribe<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Subscribe() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatesOHLCVRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesOHLCVResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Subscribe() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatesOHLCVRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesOHLCVResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Subscribe(context, request); }));
    }
    ~WithRawCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatesOHLCVRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesOHLCVResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Subscribe() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::kaikosdk::StreamAggregatesOHLCVRequestV1, ::kaikosdk::StreamAggregatesOHLCVResponseV1>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::kaikosdk::StreamAggregatesOHLCVRequestV1, ::kaikosdk::StreamAggregatesOHLCVResponseV1>* streamer) {
                       return this->StreamedSubscribe(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatesOHLCVRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesOHLCVResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribe(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::kaikosdk::StreamAggregatesOHLCVRequestV1,::kaikosdk::StreamAggregatesOHLCVResponseV1>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Subscribe<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_Subscribe<Service > StreamedService;
};

// Service for streaming Spot exchange rate V1
// Service is deprecated, use REST API instead, or upcoming `StreamAggregatesSpotExchangeRateServiceV2` instead.
class StreamAggregatesSpotExchangeRateServiceV1 final {
 public:
  static constexpr char const* service_full_name() {
    return "kaikosdk.StreamAggregatesSpotExchangeRateServiceV1";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Subscribe
    std::unique_ptr< ::grpc::ClientReaderInterface< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>> Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesSpotExchangeRateRequestV1& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>> AsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesSpotExchangeRateRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesSpotExchangeRateRequestV1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Subscribe
      virtual void Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesSpotExchangeRateRequestV1* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>* SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesSpotExchangeRateRequestV1& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesSpotExchangeRateRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesSpotExchangeRateRequestV1& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>> Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesSpotExchangeRateRequestV1& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>> AsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesSpotExchangeRateRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesSpotExchangeRateRequestV1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesSpotExchangeRateRequestV1* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>* SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesSpotExchangeRateRequestV1& request) override;
    ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesSpotExchangeRateRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesSpotExchangeRateRequestV1& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Subscribe_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Subscribe
    virtual ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::kaikosdk::StreamAggregatesSpotExchangeRateRequestV1* request, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Subscribe() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatesSpotExchangeRateRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::kaikosdk::StreamAggregatesSpotExchangeRateRequestV1* request, ::grpc::ServerAsyncWriter< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Subscribe<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::kaikosdk::StreamAggregatesSpotExchangeRateRequestV1, ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::kaikosdk::StreamAggregatesSpotExchangeRateRequestV1* request) { return this->Subscribe(context, request); }));
    }
    ~WithCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatesSpotExchangeRateRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::kaikosdk::StreamAggregatesSpotExchangeRateRequestV1* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Subscribe<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Subscribe() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatesSpotExchangeRateRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Subscribe() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatesSpotExchangeRateRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Subscribe(context, request); }));
    }
    ~WithRawCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatesSpotExchangeRateRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Subscribe() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::kaikosdk::StreamAggregatesSpotExchangeRateRequestV1, ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::kaikosdk::StreamAggregatesSpotExchangeRateRequestV1, ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>* streamer) {
                       return this->StreamedSubscribe(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatesSpotExchangeRateRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribe(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::kaikosdk::StreamAggregatesSpotExchangeRateRequestV1,::kaikosdk::StreamAggregatesSpotExchangeRateResponseV1>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Subscribe<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_Subscribe<Service > StreamedService;
};

// Service for streaming Direct exchange rate V1
// Service is deprecated, use REST API instead, or upcoming `StreamAggregatesDirectExchangeRateServiceV2` instead.
class StreamAggregatesDirectExchangeRateServiceV1 final {
 public:
  static constexpr char const* service_full_name() {
    return "kaikosdk.StreamAggregatesDirectExchangeRateServiceV1";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Subscribe
    std::unique_ptr< ::grpc::ClientReaderInterface< ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>> Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesDirectExchangeRateRequestV1& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>> AsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesDirectExchangeRateRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesDirectExchangeRateRequestV1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Subscribe
      virtual void Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesDirectExchangeRateRequestV1* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>* SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesDirectExchangeRateRequestV1& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesDirectExchangeRateRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesDirectExchangeRateRequestV1& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>> Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesDirectExchangeRateRequestV1& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>> AsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesDirectExchangeRateRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesDirectExchangeRateRequestV1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesDirectExchangeRateRequestV1* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>* SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesDirectExchangeRateRequestV1& request) override;
    ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesDirectExchangeRateRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesDirectExchangeRateRequestV1& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Subscribe_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Subscribe
    virtual ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::kaikosdk::StreamAggregatesDirectExchangeRateRequestV1* request, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Subscribe() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatesDirectExchangeRateRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::kaikosdk::StreamAggregatesDirectExchangeRateRequestV1* request, ::grpc::ServerAsyncWriter< ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Subscribe<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::kaikosdk::StreamAggregatesDirectExchangeRateRequestV1, ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::kaikosdk::StreamAggregatesDirectExchangeRateRequestV1* request) { return this->Subscribe(context, request); }));
    }
    ~WithCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatesDirectExchangeRateRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::kaikosdk::StreamAggregatesDirectExchangeRateRequestV1* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Subscribe<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Subscribe() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatesDirectExchangeRateRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Subscribe() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatesDirectExchangeRateRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Subscribe(context, request); }));
    }
    ~WithRawCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatesDirectExchangeRateRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Subscribe() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::kaikosdk::StreamAggregatesDirectExchangeRateRequestV1, ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::kaikosdk::StreamAggregatesDirectExchangeRateRequestV1, ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>* streamer) {
                       return this->StreamedSubscribe(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatesDirectExchangeRateRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribe(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::kaikosdk::StreamAggregatesDirectExchangeRateRequestV1,::kaikosdk::StreamAggregatesDirectExchangeRateResponseV1>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Subscribe<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_Subscribe<Service > StreamedService;
};

// Service for streaming trades V1
class StreamTradesServiceV1 final {
 public:
  static constexpr char const* service_full_name() {
    return "kaikosdk.StreamTradesServiceV1";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Subscribe
    std::unique_ptr< ::grpc::ClientReaderInterface< ::kaikosdk::StreamTradesResponseV1>> Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamTradesRequestV1& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::kaikosdk::StreamTradesResponseV1>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamTradesResponseV1>> AsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamTradesRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamTradesResponseV1>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamTradesResponseV1>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamTradesRequestV1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamTradesResponseV1>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Subscribe
      virtual void Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamTradesRequestV1* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamTradesResponseV1>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::kaikosdk::StreamTradesResponseV1>* SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamTradesRequestV1& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamTradesResponseV1>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamTradesRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamTradesResponseV1>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamTradesRequestV1& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::kaikosdk::StreamTradesResponseV1>> Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamTradesRequestV1& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::kaikosdk::StreamTradesResponseV1>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamTradesResponseV1>> AsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamTradesRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamTradesResponseV1>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamTradesResponseV1>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamTradesRequestV1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamTradesResponseV1>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamTradesRequestV1* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamTradesResponseV1>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::kaikosdk::StreamTradesResponseV1>* SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamTradesRequestV1& request) override;
    ::grpc::ClientAsyncReader< ::kaikosdk::StreamTradesResponseV1>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamTradesRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::kaikosdk::StreamTradesResponseV1>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamTradesRequestV1& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Subscribe_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Subscribe
    virtual ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::kaikosdk::StreamTradesRequestV1* request, ::grpc::ServerWriter< ::kaikosdk::StreamTradesResponseV1>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Subscribe() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamTradesRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamTradesResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::kaikosdk::StreamTradesRequestV1* request, ::grpc::ServerAsyncWriter< ::kaikosdk::StreamTradesResponseV1>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Subscribe<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::kaikosdk::StreamTradesRequestV1, ::kaikosdk::StreamTradesResponseV1>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::kaikosdk::StreamTradesRequestV1* request) { return this->Subscribe(context, request); }));
    }
    ~WithCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamTradesRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamTradesResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::kaikosdk::StreamTradesResponseV1>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::kaikosdk::StreamTradesRequestV1* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Subscribe<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Subscribe() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamTradesRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamTradesResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Subscribe() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamTradesRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamTradesResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Subscribe(context, request); }));
    }
    ~WithRawCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamTradesRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamTradesResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Subscribe() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::kaikosdk::StreamTradesRequestV1, ::kaikosdk::StreamTradesResponseV1>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::kaikosdk::StreamTradesRequestV1, ::kaikosdk::StreamTradesResponseV1>* streamer) {
                       return this->StreamedSubscribe(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamTradesRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamTradesResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribe(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::kaikosdk::StreamTradesRequestV1,::kaikosdk::StreamTradesResponseV1>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Subscribe<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_Subscribe<Service > StreamedService;
};

// Service for streaming VWAP V1
class StreamAggregatesVWAPServiceV1 final {
 public:
  static constexpr char const* service_full_name() {
    return "kaikosdk.StreamAggregatesVWAPServiceV1";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Subscribe
    std::unique_ptr< ::grpc::ClientReaderInterface< ::kaikosdk::StreamAggregatesVWAPResponseV1>> Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesVWAPRequestV1& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::kaikosdk::StreamAggregatesVWAPResponseV1>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatesVWAPResponseV1>> AsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesVWAPRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatesVWAPResponseV1>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatesVWAPResponseV1>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesVWAPRequestV1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatesVWAPResponseV1>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Subscribe
      virtual void Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesVWAPRequestV1* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamAggregatesVWAPResponseV1>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::kaikosdk::StreamAggregatesVWAPResponseV1>* SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesVWAPRequestV1& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatesVWAPResponseV1>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesVWAPRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamAggregatesVWAPResponseV1>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesVWAPRequestV1& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::kaikosdk::StreamAggregatesVWAPResponseV1>> Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesVWAPRequestV1& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::kaikosdk::StreamAggregatesVWAPResponseV1>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesVWAPResponseV1>> AsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesVWAPRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesVWAPResponseV1>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesVWAPResponseV1>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesVWAPRequestV1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesVWAPResponseV1>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesVWAPRequestV1* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamAggregatesVWAPResponseV1>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::kaikosdk::StreamAggregatesVWAPResponseV1>* SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesVWAPRequestV1& request) override;
    ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesVWAPResponseV1>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesVWAPRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesVWAPResponseV1>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesVWAPRequestV1& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Subscribe_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Subscribe
    virtual ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::kaikosdk::StreamAggregatesVWAPRequestV1* request, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesVWAPResponseV1>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Subscribe() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatesVWAPRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesVWAPResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::kaikosdk::StreamAggregatesVWAPRequestV1* request, ::grpc::ServerAsyncWriter< ::kaikosdk::StreamAggregatesVWAPResponseV1>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Subscribe<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::kaikosdk::StreamAggregatesVWAPRequestV1, ::kaikosdk::StreamAggregatesVWAPResponseV1>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::kaikosdk::StreamAggregatesVWAPRequestV1* request) { return this->Subscribe(context, request); }));
    }
    ~WithCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatesVWAPRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesVWAPResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::kaikosdk::StreamAggregatesVWAPResponseV1>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::kaikosdk::StreamAggregatesVWAPRequestV1* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Subscribe<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Subscribe() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatesVWAPRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesVWAPResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Subscribe() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatesVWAPRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesVWAPResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Subscribe(context, request); }));
    }
    ~WithRawCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatesVWAPRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesVWAPResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Subscribe() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::kaikosdk::StreamAggregatesVWAPRequestV1, ::kaikosdk::StreamAggregatesVWAPResponseV1>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::kaikosdk::StreamAggregatesVWAPRequestV1, ::kaikosdk::StreamAggregatesVWAPResponseV1>* streamer) {
                       return this->StreamedSubscribe(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamAggregatesVWAPRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesVWAPResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribe(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::kaikosdk::StreamAggregatesVWAPRequestV1,::kaikosdk::StreamAggregatesVWAPResponseV1>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Subscribe<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_Subscribe<Service > StreamedService;
};

// Service for streaming index V1
class StreamIndexServiceV1 final {
 public:
  static constexpr char const* service_full_name() {
    return "kaikosdk.StreamIndexServiceV1";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Subscribe
    std::unique_ptr< ::grpc::ClientReaderInterface< ::kaikosdk::StreamIndexServiceResponseV1>> Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexServiceRequestV1& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::kaikosdk::StreamIndexServiceResponseV1>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamIndexServiceResponseV1>> AsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexServiceRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamIndexServiceResponseV1>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamIndexServiceResponseV1>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexServiceRequestV1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamIndexServiceResponseV1>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Subscribe
      virtual void Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexServiceRequestV1* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamIndexServiceResponseV1>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::kaikosdk::StreamIndexServiceResponseV1>* SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexServiceRequestV1& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamIndexServiceResponseV1>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexServiceRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamIndexServiceResponseV1>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexServiceRequestV1& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::kaikosdk::StreamIndexServiceResponseV1>> Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexServiceRequestV1& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::kaikosdk::StreamIndexServiceResponseV1>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamIndexServiceResponseV1>> AsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexServiceRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamIndexServiceResponseV1>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamIndexServiceResponseV1>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexServiceRequestV1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamIndexServiceResponseV1>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexServiceRequestV1* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamIndexServiceResponseV1>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::kaikosdk::StreamIndexServiceResponseV1>* SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexServiceRequestV1& request) override;
    ::grpc::ClientAsyncReader< ::kaikosdk::StreamIndexServiceResponseV1>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexServiceRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::kaikosdk::StreamIndexServiceResponseV1>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexServiceRequestV1& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Subscribe_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Subscribe
    virtual ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::kaikosdk::StreamIndexServiceRequestV1* request, ::grpc::ServerWriter< ::kaikosdk::StreamIndexServiceResponseV1>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Subscribe() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamIndexServiceRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamIndexServiceResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::kaikosdk::StreamIndexServiceRequestV1* request, ::grpc::ServerAsyncWriter< ::kaikosdk::StreamIndexServiceResponseV1>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Subscribe<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::kaikosdk::StreamIndexServiceRequestV1, ::kaikosdk::StreamIndexServiceResponseV1>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::kaikosdk::StreamIndexServiceRequestV1* request) { return this->Subscribe(context, request); }));
    }
    ~WithCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamIndexServiceRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamIndexServiceResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::kaikosdk::StreamIndexServiceResponseV1>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::kaikosdk::StreamIndexServiceRequestV1* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Subscribe<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Subscribe() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamIndexServiceRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamIndexServiceResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Subscribe() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamIndexServiceRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamIndexServiceResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Subscribe(context, request); }));
    }
    ~WithRawCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamIndexServiceRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamIndexServiceResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Subscribe() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::kaikosdk::StreamIndexServiceRequestV1, ::kaikosdk::StreamIndexServiceResponseV1>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::kaikosdk::StreamIndexServiceRequestV1, ::kaikosdk::StreamIndexServiceResponseV1>* streamer) {
                       return this->StreamedSubscribe(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamIndexServiceRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamIndexServiceResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribe(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::kaikosdk::StreamIndexServiceRequestV1,::kaikosdk::StreamIndexServiceResponseV1>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Subscribe<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_Subscribe<Service > StreamedService;
};

// Service for streaming index multi assets V1
class StreamIndexMultiAssetsServiceV1 final {
 public:
  static constexpr char const* service_full_name() {
    return "kaikosdk.StreamIndexMultiAssetsServiceV1";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Subscribe
    std::unique_ptr< ::grpc::ClientReaderInterface< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>> Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>> AsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Subscribe
      virtual void Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>* SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>> Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>> AsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>* SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1& request) override;
    ::grpc::ClientAsyncReader< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Subscribe_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Subscribe
    virtual ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1* request, ::grpc::ServerWriter< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Subscribe() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1* request, ::grpc::ServerAsyncWriter< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Subscribe<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1, ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1* request) { return this->Subscribe(context, request); }));
    }
    ~WithCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Subscribe<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Subscribe() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Subscribe() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Subscribe(context, request); }));
    }
    ~WithRawCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Subscribe() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1, ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1, ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>* streamer) {
                       return this->StreamedSubscribe(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribe(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1,::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Subscribe<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_Subscribe<Service > StreamedService;
};

// Service for streaming market update V1
class StreamMarketUpdateServiceV1 final {
 public:
  static constexpr char const* service_full_name() {
    return "kaikosdk.StreamMarketUpdateServiceV1";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Subscribe
    std::unique_ptr< ::grpc::ClientReaderInterface< ::kaikosdk::StreamMarketUpdateResponseV1>> Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamMarketUpdateRequestV1& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::kaikosdk::StreamMarketUpdateResponseV1>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamMarketUpdateResponseV1>> AsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamMarketUpdateRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamMarketUpdateResponseV1>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamMarketUpdateResponseV1>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamMarketUpdateRequestV1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamMarketUpdateResponseV1>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Subscribe
      virtual void Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamMarketUpdateRequestV1* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamMarketUpdateResponseV1>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::kaikosdk::StreamMarketUpdateResponseV1>* SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamMarketUpdateRequestV1& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamMarketUpdateResponseV1>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamMarketUpdateRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::kaikosdk::StreamMarketUpdateResponseV1>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamMarketUpdateRequestV1& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::kaikosdk::StreamMarketUpdateResponseV1>> Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamMarketUpdateRequestV1& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::kaikosdk::StreamMarketUpdateResponseV1>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamMarketUpdateResponseV1>> AsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamMarketUpdateRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamMarketUpdateResponseV1>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamMarketUpdateResponseV1>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamMarketUpdateRequestV1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::kaikosdk::StreamMarketUpdateResponseV1>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamMarketUpdateRequestV1* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamMarketUpdateResponseV1>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::kaikosdk::StreamMarketUpdateResponseV1>* SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamMarketUpdateRequestV1& request) override;
    ::grpc::ClientAsyncReader< ::kaikosdk::StreamMarketUpdateResponseV1>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamMarketUpdateRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::kaikosdk::StreamMarketUpdateResponseV1>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamMarketUpdateRequestV1& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Subscribe_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Subscribe
    virtual ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::kaikosdk::StreamMarketUpdateRequestV1* request, ::grpc::ServerWriter< ::kaikosdk::StreamMarketUpdateResponseV1>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Subscribe() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamMarketUpdateRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamMarketUpdateResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::kaikosdk::StreamMarketUpdateRequestV1* request, ::grpc::ServerAsyncWriter< ::kaikosdk::StreamMarketUpdateResponseV1>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Subscribe<Service > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::kaikosdk::StreamMarketUpdateRequestV1, ::kaikosdk::StreamMarketUpdateResponseV1>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::kaikosdk::StreamMarketUpdateRequestV1* request) { return this->Subscribe(context, request); }));
    }
    ~WithCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamMarketUpdateRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamMarketUpdateResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::kaikosdk::StreamMarketUpdateResponseV1>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::kaikosdk::StreamMarketUpdateRequestV1* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Subscribe<Service > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Subscribe() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamMarketUpdateRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamMarketUpdateResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Subscribe() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamMarketUpdateRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamMarketUpdateResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Subscribe(context, request); }));
    }
    ~WithRawCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamMarketUpdateRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamMarketUpdateResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Subscribe() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::kaikosdk::StreamMarketUpdateRequestV1, ::kaikosdk::StreamMarketUpdateResponseV1>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::kaikosdk::StreamMarketUpdateRequestV1, ::kaikosdk::StreamMarketUpdateResponseV1>* streamer) {
                       return this->StreamedSubscribe(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::kaikosdk::StreamMarketUpdateRequestV1* /*request*/, ::grpc::ServerWriter< ::kaikosdk::StreamMarketUpdateResponseV1>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribe(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::kaikosdk::StreamMarketUpdateRequestV1,::kaikosdk::StreamMarketUpdateResponseV1>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Subscribe<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_Subscribe<Service > StreamedService;
};

}  // namespace kaikosdk


#endif  // GRPC_sdk_2fsdk_2eproto__INCLUDED
