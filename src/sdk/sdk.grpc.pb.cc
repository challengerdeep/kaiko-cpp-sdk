// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sdk/sdk.proto

#include "sdk/sdk.pb.h"
#include "sdk/sdk.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace kaikosdk {

static const char* StreamAggregatedQuoteServiceV2_method_names[] = {
  "/kaikosdk.StreamAggregatedQuoteServiceV2/Subscribe",
};

std::unique_ptr< StreamAggregatedQuoteServiceV2::Stub> StreamAggregatedQuoteServiceV2::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StreamAggregatedQuoteServiceV2::Stub> stub(new StreamAggregatedQuoteServiceV2::Stub(channel, options));
  return stub;
}

StreamAggregatedQuoteServiceV2::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Subscribe_(StreamAggregatedQuoteServiceV2_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::kaikosdk::StreamAggregatedQuoteResponseV2>* StreamAggregatedQuoteServiceV2::Stub::SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedQuoteRequestV2& request) {
  return ::grpc::internal::ClientReaderFactory< ::kaikosdk::StreamAggregatedQuoteResponseV2>::Create(channel_.get(), rpcmethod_Subscribe_, context, request);
}

void StreamAggregatedQuoteServiceV2::Stub::async::Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedQuoteRequestV2* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamAggregatedQuoteResponseV2>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::kaikosdk::StreamAggregatedQuoteResponseV2>::Create(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatedQuoteResponseV2>* StreamAggregatedQuoteServiceV2::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedQuoteRequestV2& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::kaikosdk::StreamAggregatedQuoteResponseV2>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatedQuoteResponseV2>* StreamAggregatedQuoteServiceV2::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedQuoteRequestV2& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::kaikosdk::StreamAggregatedQuoteResponseV2>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, false, nullptr);
}

StreamAggregatedQuoteServiceV2::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamAggregatedQuoteServiceV2_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< StreamAggregatedQuoteServiceV2::Service, ::kaikosdk::StreamAggregatedQuoteRequestV2, ::kaikosdk::StreamAggregatedQuoteResponseV2>(
          [](StreamAggregatedQuoteServiceV2::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kaikosdk::StreamAggregatedQuoteRequestV2* req,
             ::grpc::ServerWriter<::kaikosdk::StreamAggregatedQuoteResponseV2>* writer) {
               return service->Subscribe(ctx, req, writer);
             }, this)));
}

StreamAggregatedQuoteServiceV2::Service::~Service() {
}

::grpc::Status StreamAggregatedQuoteServiceV2::Service::Subscribe(::grpc::ServerContext* context, const ::kaikosdk::StreamAggregatedQuoteRequestV2* request, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatedQuoteResponseV2>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* StreamAggregatedPriceServiceV1_method_names[] = {
  "/kaikosdk.StreamAggregatedPriceServiceV1/Subscribe",
};

std::unique_ptr< StreamAggregatedPriceServiceV1::Stub> StreamAggregatedPriceServiceV1::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StreamAggregatedPriceServiceV1::Stub> stub(new StreamAggregatedPriceServiceV1::Stub(channel, options));
  return stub;
}

StreamAggregatedPriceServiceV1::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Subscribe_(StreamAggregatedPriceServiceV1_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::kaikosdk::StreamAggregatedPriceResponseV1>* StreamAggregatedPriceServiceV1::Stub::SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedPriceRequestV1& request) {
  return ::grpc::internal::ClientReaderFactory< ::kaikosdk::StreamAggregatedPriceResponseV1>::Create(channel_.get(), rpcmethod_Subscribe_, context, request);
}

void StreamAggregatedPriceServiceV1::Stub::async::Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedPriceRequestV1* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamAggregatedPriceResponseV1>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::kaikosdk::StreamAggregatedPriceResponseV1>::Create(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatedPriceResponseV1>* StreamAggregatedPriceServiceV1::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedPriceRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::kaikosdk::StreamAggregatedPriceResponseV1>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatedPriceResponseV1>* StreamAggregatedPriceServiceV1::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatedPriceRequestV1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::kaikosdk::StreamAggregatedPriceResponseV1>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, false, nullptr);
}

StreamAggregatedPriceServiceV1::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamAggregatedPriceServiceV1_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< StreamAggregatedPriceServiceV1::Service, ::kaikosdk::StreamAggregatedPriceRequestV1, ::kaikosdk::StreamAggregatedPriceResponseV1>(
          [](StreamAggregatedPriceServiceV1::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kaikosdk::StreamAggregatedPriceRequestV1* req,
             ::grpc::ServerWriter<::kaikosdk::StreamAggregatedPriceResponseV1>* writer) {
               return service->Subscribe(ctx, req, writer);
             }, this)));
}

StreamAggregatedPriceServiceV1::Service::~Service() {
}

::grpc::Status StreamAggregatedPriceServiceV1::Service::Subscribe(::grpc::ServerContext* context, const ::kaikosdk::StreamAggregatedPriceRequestV1* request, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatedPriceResponseV1>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* StreamAggregatesOHLCVServiceV1_method_names[] = {
  "/kaikosdk.StreamAggregatesOHLCVServiceV1/Subscribe",
};

std::unique_ptr< StreamAggregatesOHLCVServiceV1::Stub> StreamAggregatesOHLCVServiceV1::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StreamAggregatesOHLCVServiceV1::Stub> stub(new StreamAggregatesOHLCVServiceV1::Stub(channel, options));
  return stub;
}

StreamAggregatesOHLCVServiceV1::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Subscribe_(StreamAggregatesOHLCVServiceV1_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::kaikosdk::StreamAggregatesOHLCVResponseV1>* StreamAggregatesOHLCVServiceV1::Stub::SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesOHLCVRequestV1& request) {
  return ::grpc::internal::ClientReaderFactory< ::kaikosdk::StreamAggregatesOHLCVResponseV1>::Create(channel_.get(), rpcmethod_Subscribe_, context, request);
}

void StreamAggregatesOHLCVServiceV1::Stub::async::Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesOHLCVRequestV1* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamAggregatesOHLCVResponseV1>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::kaikosdk::StreamAggregatesOHLCVResponseV1>::Create(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesOHLCVResponseV1>* StreamAggregatesOHLCVServiceV1::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesOHLCVRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::kaikosdk::StreamAggregatesOHLCVResponseV1>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesOHLCVResponseV1>* StreamAggregatesOHLCVServiceV1::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesOHLCVRequestV1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::kaikosdk::StreamAggregatesOHLCVResponseV1>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, false, nullptr);
}

StreamAggregatesOHLCVServiceV1::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamAggregatesOHLCVServiceV1_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< StreamAggregatesOHLCVServiceV1::Service, ::kaikosdk::StreamAggregatesOHLCVRequestV1, ::kaikosdk::StreamAggregatesOHLCVResponseV1>(
          [](StreamAggregatesOHLCVServiceV1::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kaikosdk::StreamAggregatesOHLCVRequestV1* req,
             ::grpc::ServerWriter<::kaikosdk::StreamAggregatesOHLCVResponseV1>* writer) {
               return service->Subscribe(ctx, req, writer);
             }, this)));
}

StreamAggregatesOHLCVServiceV1::Service::~Service() {
}

::grpc::Status StreamAggregatesOHLCVServiceV1::Service::Subscribe(::grpc::ServerContext* context, const ::kaikosdk::StreamAggregatesOHLCVRequestV1* request, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesOHLCVResponseV1>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* StreamTradesServiceV1_method_names[] = {
  "/kaikosdk.StreamTradesServiceV1/Subscribe",
};

std::unique_ptr< StreamTradesServiceV1::Stub> StreamTradesServiceV1::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StreamTradesServiceV1::Stub> stub(new StreamTradesServiceV1::Stub(channel, options));
  return stub;
}

StreamTradesServiceV1::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Subscribe_(StreamTradesServiceV1_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::kaikosdk::StreamTradesResponseV1>* StreamTradesServiceV1::Stub::SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamTradesRequestV1& request) {
  return ::grpc::internal::ClientReaderFactory< ::kaikosdk::StreamTradesResponseV1>::Create(channel_.get(), rpcmethod_Subscribe_, context, request);
}

void StreamTradesServiceV1::Stub::async::Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamTradesRequestV1* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamTradesResponseV1>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::kaikosdk::StreamTradesResponseV1>::Create(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::kaikosdk::StreamTradesResponseV1>* StreamTradesServiceV1::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamTradesRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::kaikosdk::StreamTradesResponseV1>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::kaikosdk::StreamTradesResponseV1>* StreamTradesServiceV1::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamTradesRequestV1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::kaikosdk::StreamTradesResponseV1>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, false, nullptr);
}

StreamTradesServiceV1::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamTradesServiceV1_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< StreamTradesServiceV1::Service, ::kaikosdk::StreamTradesRequestV1, ::kaikosdk::StreamTradesResponseV1>(
          [](StreamTradesServiceV1::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kaikosdk::StreamTradesRequestV1* req,
             ::grpc::ServerWriter<::kaikosdk::StreamTradesResponseV1>* writer) {
               return service->Subscribe(ctx, req, writer);
             }, this)));
}

StreamTradesServiceV1::Service::~Service() {
}

::grpc::Status StreamTradesServiceV1::Service::Subscribe(::grpc::ServerContext* context, const ::kaikosdk::StreamTradesRequestV1* request, ::grpc::ServerWriter< ::kaikosdk::StreamTradesResponseV1>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* StreamAggregatesVWAPServiceV1_method_names[] = {
  "/kaikosdk.StreamAggregatesVWAPServiceV1/Subscribe",
};

std::unique_ptr< StreamAggregatesVWAPServiceV1::Stub> StreamAggregatesVWAPServiceV1::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StreamAggregatesVWAPServiceV1::Stub> stub(new StreamAggregatesVWAPServiceV1::Stub(channel, options));
  return stub;
}

StreamAggregatesVWAPServiceV1::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Subscribe_(StreamAggregatesVWAPServiceV1_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::kaikosdk::StreamAggregatesVWAPResponseV1>* StreamAggregatesVWAPServiceV1::Stub::SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesVWAPRequestV1& request) {
  return ::grpc::internal::ClientReaderFactory< ::kaikosdk::StreamAggregatesVWAPResponseV1>::Create(channel_.get(), rpcmethod_Subscribe_, context, request);
}

void StreamAggregatesVWAPServiceV1::Stub::async::Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesVWAPRequestV1* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamAggregatesVWAPResponseV1>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::kaikosdk::StreamAggregatesVWAPResponseV1>::Create(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesVWAPResponseV1>* StreamAggregatesVWAPServiceV1::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesVWAPRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::kaikosdk::StreamAggregatesVWAPResponseV1>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesVWAPResponseV1>* StreamAggregatesVWAPServiceV1::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesVWAPRequestV1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::kaikosdk::StreamAggregatesVWAPResponseV1>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, false, nullptr);
}

StreamAggregatesVWAPServiceV1::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamAggregatesVWAPServiceV1_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< StreamAggregatesVWAPServiceV1::Service, ::kaikosdk::StreamAggregatesVWAPRequestV1, ::kaikosdk::StreamAggregatesVWAPResponseV1>(
          [](StreamAggregatesVWAPServiceV1::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kaikosdk::StreamAggregatesVWAPRequestV1* req,
             ::grpc::ServerWriter<::kaikosdk::StreamAggregatesVWAPResponseV1>* writer) {
               return service->Subscribe(ctx, req, writer);
             }, this)));
}

StreamAggregatesVWAPServiceV1::Service::~Service() {
}

::grpc::Status StreamAggregatesVWAPServiceV1::Service::Subscribe(::grpc::ServerContext* context, const ::kaikosdk::StreamAggregatesVWAPRequestV1* request, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesVWAPResponseV1>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* StreamIndexServiceV1_method_names[] = {
  "/kaikosdk.StreamIndexServiceV1/Subscribe",
};

std::unique_ptr< StreamIndexServiceV1::Stub> StreamIndexServiceV1::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StreamIndexServiceV1::Stub> stub(new StreamIndexServiceV1::Stub(channel, options));
  return stub;
}

StreamIndexServiceV1::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Subscribe_(StreamIndexServiceV1_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::kaikosdk::StreamIndexServiceResponseV1>* StreamIndexServiceV1::Stub::SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexServiceRequestV1& request) {
  return ::grpc::internal::ClientReaderFactory< ::kaikosdk::StreamIndexServiceResponseV1>::Create(channel_.get(), rpcmethod_Subscribe_, context, request);
}

void StreamIndexServiceV1::Stub::async::Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexServiceRequestV1* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamIndexServiceResponseV1>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::kaikosdk::StreamIndexServiceResponseV1>::Create(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::kaikosdk::StreamIndexServiceResponseV1>* StreamIndexServiceV1::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexServiceRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::kaikosdk::StreamIndexServiceResponseV1>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::kaikosdk::StreamIndexServiceResponseV1>* StreamIndexServiceV1::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexServiceRequestV1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::kaikosdk::StreamIndexServiceResponseV1>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, false, nullptr);
}

StreamIndexServiceV1::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamIndexServiceV1_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< StreamIndexServiceV1::Service, ::kaikosdk::StreamIndexServiceRequestV1, ::kaikosdk::StreamIndexServiceResponseV1>(
          [](StreamIndexServiceV1::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kaikosdk::StreamIndexServiceRequestV1* req,
             ::grpc::ServerWriter<::kaikosdk::StreamIndexServiceResponseV1>* writer) {
               return service->Subscribe(ctx, req, writer);
             }, this)));
}

StreamIndexServiceV1::Service::~Service() {
}

::grpc::Status StreamIndexServiceV1::Service::Subscribe(::grpc::ServerContext* context, const ::kaikosdk::StreamIndexServiceRequestV1* request, ::grpc::ServerWriter< ::kaikosdk::StreamIndexServiceResponseV1>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* StreamIndexMultiAssetsServiceV1_method_names[] = {
  "/kaikosdk.StreamIndexMultiAssetsServiceV1/Subscribe",
};

std::unique_ptr< StreamIndexMultiAssetsServiceV1::Stub> StreamIndexMultiAssetsServiceV1::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StreamIndexMultiAssetsServiceV1::Stub> stub(new StreamIndexMultiAssetsServiceV1::Stub(channel, options));
  return stub;
}

StreamIndexMultiAssetsServiceV1::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Subscribe_(StreamIndexMultiAssetsServiceV1_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>* StreamIndexMultiAssetsServiceV1::Stub::SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1& request) {
  return ::grpc::internal::ClientReaderFactory< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>::Create(channel_.get(), rpcmethod_Subscribe_, context, request);
}

void StreamIndexMultiAssetsServiceV1::Stub::async::Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>::Create(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>* StreamIndexMultiAssetsServiceV1::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>* StreamIndexMultiAssetsServiceV1::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, false, nullptr);
}

StreamIndexMultiAssetsServiceV1::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamIndexMultiAssetsServiceV1_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< StreamIndexMultiAssetsServiceV1::Service, ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1, ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>(
          [](StreamIndexMultiAssetsServiceV1::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1* req,
             ::grpc::ServerWriter<::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>* writer) {
               return service->Subscribe(ctx, req, writer);
             }, this)));
}

StreamIndexMultiAssetsServiceV1::Service::~Service() {
}

::grpc::Status StreamIndexMultiAssetsServiceV1::Service::Subscribe(::grpc::ServerContext* context, const ::kaikosdk::StreamIndexMultiAssetsServiceRequestV1* request, ::grpc::ServerWriter< ::kaikosdk::StreamIndexMultiAssetsServiceResponseV1>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* StreamMarketUpdateServiceV1_method_names[] = {
  "/kaikosdk.StreamMarketUpdateServiceV1/Subscribe",
};

std::unique_ptr< StreamMarketUpdateServiceV1::Stub> StreamMarketUpdateServiceV1::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StreamMarketUpdateServiceV1::Stub> stub(new StreamMarketUpdateServiceV1::Stub(channel, options));
  return stub;
}

StreamMarketUpdateServiceV1::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Subscribe_(StreamMarketUpdateServiceV1_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::kaikosdk::StreamMarketUpdateResponseV1>* StreamMarketUpdateServiceV1::Stub::SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamMarketUpdateRequestV1& request) {
  return ::grpc::internal::ClientReaderFactory< ::kaikosdk::StreamMarketUpdateResponseV1>::Create(channel_.get(), rpcmethod_Subscribe_, context, request);
}

void StreamMarketUpdateServiceV1::Stub::async::Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamMarketUpdateRequestV1* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamMarketUpdateResponseV1>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::kaikosdk::StreamMarketUpdateResponseV1>::Create(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::kaikosdk::StreamMarketUpdateResponseV1>* StreamMarketUpdateServiceV1::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamMarketUpdateRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::kaikosdk::StreamMarketUpdateResponseV1>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::kaikosdk::StreamMarketUpdateResponseV1>* StreamMarketUpdateServiceV1::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamMarketUpdateRequestV1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::kaikosdk::StreamMarketUpdateResponseV1>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, false, nullptr);
}

StreamMarketUpdateServiceV1::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamMarketUpdateServiceV1_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< StreamMarketUpdateServiceV1::Service, ::kaikosdk::StreamMarketUpdateRequestV1, ::kaikosdk::StreamMarketUpdateResponseV1>(
          [](StreamMarketUpdateServiceV1::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kaikosdk::StreamMarketUpdateRequestV1* req,
             ::grpc::ServerWriter<::kaikosdk::StreamMarketUpdateResponseV1>* writer) {
               return service->Subscribe(ctx, req, writer);
             }, this)));
}

StreamMarketUpdateServiceV1::Service::~Service() {
}

::grpc::Status StreamMarketUpdateServiceV1::Service::Subscribe(::grpc::ServerContext* context, const ::kaikosdk::StreamMarketUpdateRequestV1* request, ::grpc::ServerWriter< ::kaikosdk::StreamMarketUpdateResponseV1>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* StreamAggregatesSpotExchangeRateV2ServiceV1_method_names[] = {
  "/kaikosdk.StreamAggregatesSpotExchangeRateV2ServiceV1/Subscribe",
};

std::unique_ptr< StreamAggregatesSpotExchangeRateV2ServiceV1::Stub> StreamAggregatesSpotExchangeRateV2ServiceV1::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StreamAggregatesSpotExchangeRateV2ServiceV1::Stub> stub(new StreamAggregatesSpotExchangeRateV2ServiceV1::Stub(channel, options));
  return stub;
}

StreamAggregatesSpotExchangeRateV2ServiceV1::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Subscribe_(StreamAggregatesSpotExchangeRateV2ServiceV1_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::kaikosdk::StreamAggregatesSpotExchangeRateV2ResponseV1>* StreamAggregatesSpotExchangeRateV2ServiceV1::Stub::SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesSpotExchangeRateV2RequestV1& request) {
  return ::grpc::internal::ClientReaderFactory< ::kaikosdk::StreamAggregatesSpotExchangeRateV2ResponseV1>::Create(channel_.get(), rpcmethod_Subscribe_, context, request);
}

void StreamAggregatesSpotExchangeRateV2ServiceV1::Stub::async::Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesSpotExchangeRateV2RequestV1* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamAggregatesSpotExchangeRateV2ResponseV1>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::kaikosdk::StreamAggregatesSpotExchangeRateV2ResponseV1>::Create(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesSpotExchangeRateV2ResponseV1>* StreamAggregatesSpotExchangeRateV2ServiceV1::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesSpotExchangeRateV2RequestV1& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::kaikosdk::StreamAggregatesSpotExchangeRateV2ResponseV1>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesSpotExchangeRateV2ResponseV1>* StreamAggregatesSpotExchangeRateV2ServiceV1::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesSpotExchangeRateV2RequestV1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::kaikosdk::StreamAggregatesSpotExchangeRateV2ResponseV1>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, false, nullptr);
}

StreamAggregatesSpotExchangeRateV2ServiceV1::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamAggregatesSpotExchangeRateV2ServiceV1_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< StreamAggregatesSpotExchangeRateV2ServiceV1::Service, ::kaikosdk::StreamAggregatesSpotExchangeRateV2RequestV1, ::kaikosdk::StreamAggregatesSpotExchangeRateV2ResponseV1>(
          [](StreamAggregatesSpotExchangeRateV2ServiceV1::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kaikosdk::StreamAggregatesSpotExchangeRateV2RequestV1* req,
             ::grpc::ServerWriter<::kaikosdk::StreamAggregatesSpotExchangeRateV2ResponseV1>* writer) {
               return service->Subscribe(ctx, req, writer);
             }, this)));
}

StreamAggregatesSpotExchangeRateV2ServiceV1::Service::~Service() {
}

::grpc::Status StreamAggregatesSpotExchangeRateV2ServiceV1::Service::Subscribe(::grpc::ServerContext* context, const ::kaikosdk::StreamAggregatesSpotExchangeRateV2RequestV1* request, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesSpotExchangeRateV2ResponseV1>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* StreamAggregatesSpotDirectExchangeRateV2ServiceV1_method_names[] = {
  "/kaikosdk.StreamAggregatesSpotDirectExchangeRateV2ServiceV1/Subscribe",
};

std::unique_ptr< StreamAggregatesSpotDirectExchangeRateV2ServiceV1::Stub> StreamAggregatesSpotDirectExchangeRateV2ServiceV1::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StreamAggregatesSpotDirectExchangeRateV2ServiceV1::Stub> stub(new StreamAggregatesSpotDirectExchangeRateV2ServiceV1::Stub(channel, options));
  return stub;
}

StreamAggregatesSpotDirectExchangeRateV2ServiceV1::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Subscribe_(StreamAggregatesSpotDirectExchangeRateV2ServiceV1_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::kaikosdk::StreamAggregatesDirectExchangeRateV2ResponseV1>* StreamAggregatesSpotDirectExchangeRateV2ServiceV1::Stub::SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesDirectExchangeRateV2RequestV1& request) {
  return ::grpc::internal::ClientReaderFactory< ::kaikosdk::StreamAggregatesDirectExchangeRateV2ResponseV1>::Create(channel_.get(), rpcmethod_Subscribe_, context, request);
}

void StreamAggregatesSpotDirectExchangeRateV2ServiceV1::Stub::async::Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesDirectExchangeRateV2RequestV1* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamAggregatesDirectExchangeRateV2ResponseV1>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::kaikosdk::StreamAggregatesDirectExchangeRateV2ResponseV1>::Create(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesDirectExchangeRateV2ResponseV1>* StreamAggregatesSpotDirectExchangeRateV2ServiceV1::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesDirectExchangeRateV2RequestV1& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::kaikosdk::StreamAggregatesDirectExchangeRateV2ResponseV1>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::kaikosdk::StreamAggregatesDirectExchangeRateV2ResponseV1>* StreamAggregatesSpotDirectExchangeRateV2ServiceV1::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamAggregatesDirectExchangeRateV2RequestV1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::kaikosdk::StreamAggregatesDirectExchangeRateV2ResponseV1>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, false, nullptr);
}

StreamAggregatesSpotDirectExchangeRateV2ServiceV1::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamAggregatesSpotDirectExchangeRateV2ServiceV1_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< StreamAggregatesSpotDirectExchangeRateV2ServiceV1::Service, ::kaikosdk::StreamAggregatesDirectExchangeRateV2RequestV1, ::kaikosdk::StreamAggregatesDirectExchangeRateV2ResponseV1>(
          [](StreamAggregatesSpotDirectExchangeRateV2ServiceV1::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kaikosdk::StreamAggregatesDirectExchangeRateV2RequestV1* req,
             ::grpc::ServerWriter<::kaikosdk::StreamAggregatesDirectExchangeRateV2ResponseV1>* writer) {
               return service->Subscribe(ctx, req, writer);
             }, this)));
}

StreamAggregatesSpotDirectExchangeRateV2ServiceV1::Service::~Service() {
}

::grpc::Status StreamAggregatesSpotDirectExchangeRateV2ServiceV1::Service::Subscribe(::grpc::ServerContext* context, const ::kaikosdk::StreamAggregatesDirectExchangeRateV2RequestV1* request, ::grpc::ServerWriter< ::kaikosdk::StreamAggregatesDirectExchangeRateV2ResponseV1>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* StreamIndexForexRateServiceV1_method_names[] = {
  "/kaikosdk.StreamIndexForexRateServiceV1/Subscribe",
};

std::unique_ptr< StreamIndexForexRateServiceV1::Stub> StreamIndexForexRateServiceV1::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StreamIndexForexRateServiceV1::Stub> stub(new StreamIndexForexRateServiceV1::Stub(channel, options));
  return stub;
}

StreamIndexForexRateServiceV1::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Subscribe_(StreamIndexForexRateServiceV1_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::kaikosdk::StreamIndexForexRateServiceResponseV1>* StreamIndexForexRateServiceV1::Stub::SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexForexRateServiceRequestV1& request) {
  return ::grpc::internal::ClientReaderFactory< ::kaikosdk::StreamIndexForexRateServiceResponseV1>::Create(channel_.get(), rpcmethod_Subscribe_, context, request);
}

void StreamIndexForexRateServiceV1::Stub::async::Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexForexRateServiceRequestV1* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamIndexForexRateServiceResponseV1>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::kaikosdk::StreamIndexForexRateServiceResponseV1>::Create(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::kaikosdk::StreamIndexForexRateServiceResponseV1>* StreamIndexForexRateServiceV1::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexForexRateServiceRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::kaikosdk::StreamIndexForexRateServiceResponseV1>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::kaikosdk::StreamIndexForexRateServiceResponseV1>* StreamIndexForexRateServiceV1::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamIndexForexRateServiceRequestV1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::kaikosdk::StreamIndexForexRateServiceResponseV1>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, false, nullptr);
}

StreamIndexForexRateServiceV1::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamIndexForexRateServiceV1_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< StreamIndexForexRateServiceV1::Service, ::kaikosdk::StreamIndexForexRateServiceRequestV1, ::kaikosdk::StreamIndexForexRateServiceResponseV1>(
          [](StreamIndexForexRateServiceV1::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kaikosdk::StreamIndexForexRateServiceRequestV1* req,
             ::grpc::ServerWriter<::kaikosdk::StreamIndexForexRateServiceResponseV1>* writer) {
               return service->Subscribe(ctx, req, writer);
             }, this)));
}

StreamIndexForexRateServiceV1::Service::~Service() {
}

::grpc::Status StreamIndexForexRateServiceV1::Service::Subscribe(::grpc::ServerContext* context, const ::kaikosdk::StreamIndexForexRateServiceRequestV1* request, ::grpc::ServerWriter< ::kaikosdk::StreamIndexForexRateServiceResponseV1>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* StreamDerivativesInstrumentMetricsServiceV1_method_names[] = {
  "/kaikosdk.StreamDerivativesInstrumentMetricsServiceV1/Subscribe",
};

std::unique_ptr< StreamDerivativesInstrumentMetricsServiceV1::Stub> StreamDerivativesInstrumentMetricsServiceV1::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StreamDerivativesInstrumentMetricsServiceV1::Stub> stub(new StreamDerivativesInstrumentMetricsServiceV1::Stub(channel, options));
  return stub;
}

StreamDerivativesInstrumentMetricsServiceV1::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Subscribe_(StreamDerivativesInstrumentMetricsServiceV1_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::kaikosdk::StreamDerivativesInstrumentMetricsResponseV1>* StreamDerivativesInstrumentMetricsServiceV1::Stub::SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamDerivativesInstrumentMetricsRequestV1& request) {
  return ::grpc::internal::ClientReaderFactory< ::kaikosdk::StreamDerivativesInstrumentMetricsResponseV1>::Create(channel_.get(), rpcmethod_Subscribe_, context, request);
}

void StreamDerivativesInstrumentMetricsServiceV1::Stub::async::Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamDerivativesInstrumentMetricsRequestV1* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamDerivativesInstrumentMetricsResponseV1>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::kaikosdk::StreamDerivativesInstrumentMetricsResponseV1>::Create(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::kaikosdk::StreamDerivativesInstrumentMetricsResponseV1>* StreamDerivativesInstrumentMetricsServiceV1::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamDerivativesInstrumentMetricsRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::kaikosdk::StreamDerivativesInstrumentMetricsResponseV1>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::kaikosdk::StreamDerivativesInstrumentMetricsResponseV1>* StreamDerivativesInstrumentMetricsServiceV1::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamDerivativesInstrumentMetricsRequestV1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::kaikosdk::StreamDerivativesInstrumentMetricsResponseV1>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, false, nullptr);
}

StreamDerivativesInstrumentMetricsServiceV1::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamDerivativesInstrumentMetricsServiceV1_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< StreamDerivativesInstrumentMetricsServiceV1::Service, ::kaikosdk::StreamDerivativesInstrumentMetricsRequestV1, ::kaikosdk::StreamDerivativesInstrumentMetricsResponseV1>(
          [](StreamDerivativesInstrumentMetricsServiceV1::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kaikosdk::StreamDerivativesInstrumentMetricsRequestV1* req,
             ::grpc::ServerWriter<::kaikosdk::StreamDerivativesInstrumentMetricsResponseV1>* writer) {
               return service->Subscribe(ctx, req, writer);
             }, this)));
}

StreamDerivativesInstrumentMetricsServiceV1::Service::~Service() {
}

::grpc::Status StreamDerivativesInstrumentMetricsServiceV1::Service::Subscribe(::grpc::ServerContext* context, const ::kaikosdk::StreamDerivativesInstrumentMetricsRequestV1* request, ::grpc::ServerWriter< ::kaikosdk::StreamDerivativesInstrumentMetricsResponseV1>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* StreamIvSviParametersServiceV1_method_names[] = {
  "/kaikosdk.StreamIvSviParametersServiceV1/Subscribe",
};

std::unique_ptr< StreamIvSviParametersServiceV1::Stub> StreamIvSviParametersServiceV1::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StreamIvSviParametersServiceV1::Stub> stub(new StreamIvSviParametersServiceV1::Stub(channel, options));
  return stub;
}

StreamIvSviParametersServiceV1::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Subscribe_(StreamIvSviParametersServiceV1_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::kaikosdk::StreamIvSviParametersResponseV1>* StreamIvSviParametersServiceV1::Stub::SubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamIvSviParametersRequestV1& request) {
  return ::grpc::internal::ClientReaderFactory< ::kaikosdk::StreamIvSviParametersResponseV1>::Create(channel_.get(), rpcmethod_Subscribe_, context, request);
}

void StreamIvSviParametersServiceV1::Stub::async::Subscribe(::grpc::ClientContext* context, const ::kaikosdk::StreamIvSviParametersRequestV1* request, ::grpc::ClientReadReactor< ::kaikosdk::StreamIvSviParametersResponseV1>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::kaikosdk::StreamIvSviParametersResponseV1>::Create(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::kaikosdk::StreamIvSviParametersResponseV1>* StreamIvSviParametersServiceV1::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamIvSviParametersRequestV1& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::kaikosdk::StreamIvSviParametersResponseV1>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::kaikosdk::StreamIvSviParametersResponseV1>* StreamIvSviParametersServiceV1::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::kaikosdk::StreamIvSviParametersRequestV1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::kaikosdk::StreamIvSviParametersResponseV1>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, false, nullptr);
}

StreamIvSviParametersServiceV1::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamIvSviParametersServiceV1_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< StreamIvSviParametersServiceV1::Service, ::kaikosdk::StreamIvSviParametersRequestV1, ::kaikosdk::StreamIvSviParametersResponseV1>(
          [](StreamIvSviParametersServiceV1::Service* service,
             ::grpc::ServerContext* ctx,
             const ::kaikosdk::StreamIvSviParametersRequestV1* req,
             ::grpc::ServerWriter<::kaikosdk::StreamIvSviParametersResponseV1>* writer) {
               return service->Subscribe(ctx, req, writer);
             }, this)));
}

StreamIvSviParametersServiceV1::Service::~Service() {
}

::grpc::Status StreamIvSviParametersServiceV1::Service::Subscribe(::grpc::ServerContext* context, const ::kaikosdk::StreamIvSviParametersRequestV1* request, ::grpc::ServerWriter< ::kaikosdk::StreamIvSviParametersResponseV1>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace kaikosdk

